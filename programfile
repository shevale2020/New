using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using DNAPGateway.EFLibrary;
using System.Net;
using System.IO;

namespace DNAPGateway.GatewayCMD
{
    class Program
    {
        static int Main(string[] args)
        {
            //Define local variables
            int execRecordID = 0;
            SFTPCommunicator.InboundFileSync inbSync = null;
            SFTPCommunicator.OutboundFileSync outSync = null;
            EmailGenerator emailGen = null;
            // Test if input arguments were supplied:
            if (args.Length == 0)
            {
                Program.ShowUsage();
                return 1;
            }
            //Check if command is received else show command usage
            if (!string.IsNullOrEmpty(args[0]))
            {
                //Add execution record
                execRecordID = ExcHelper.ExecHelper.AddExecRecord(args);
                //Process the command
                string function = args[0].Trim().ToLower();
                string subFunction = "";
                if (args.Count() > 1)
                    subFunction = !string.IsNullOrEmpty(args[1]) ? args[1].Trim().ToLower() : "";

                switch (function)
                {
                    case "inbound":
                        //Process all inbound entities
                        Globals.FileLogger.Info("Invoking Inbound Entity Processing...");
                        InboundProcessing.ProcessInboundFile inboundObj = new InboundProcessing.ProcessInboundFile();
                        if (subFunction == "")
                            inboundObj.ProcessAllFiles();
                        else
                            inboundObj.ProcessAllFiles(subFunction);
                        Globals.FileLogger.Info("Completed Processing of Inbound Entities.");
                        break;
                    case "processoutbound":
                    case "outbound":
                        //process all Outbound entities
                        ExcHelper.ExecHelper.ProcessOutboundEntity("AWS_Image", true);
                        ExcHelper.ExecHelper.ProcessOutboundEntity("PS_Posting", true);
                        break;
                    case "processoutawsimage":
                        ExcHelper.ExecHelper.ProcessOutboundEntity("AWS_Image", true);
                        break;
                    case "processoutpsposting":
                        ExcHelper.ExecHelper.ProcessOutboundEntity("PS_Posting", true);
                        break;
                    case "sftpinbounddownload":
                        //Download all inbound files
                        Globals.FileLogger.Info("Downloading inbound files...");
                        inbSync = new SFTPCommunicator.InboundFileSync();
                        inbSync.DownloadInboundFiles();
                        Globals.FileLogger.Info("Inbound file download complete.");
                        break;
                    case "sftpinboundupload":
                        //Upload results of inbound files
                        Globals.FileLogger.Info("Uploading inbound result files...");
                        inbSync = new SFTPCommunicator.InboundFileSync();
                        inbSync.UploadInboundResults();
                        Globals.FileLogger.Info("Inbound result file upload complete.");
                        break;
                    case "sftpoutboundupload":
                        //Upload outbound files
                        Globals.FileLogger.Info("Uploading outbound files...");
                        outSync = new SFTPCommunicator.OutboundFileSync();
                        outSync.UploadOutboundFiles();
                        Globals.FileLogger.Info("Outbound file upload complete.");
                        break;
                    case "creategatewaydb":
                        //process all inbound entities
                        Globals.FileLogger.Info("Creating Gateway DB if doesnt exist...");
                        EFLibrary.EFLibraryUtils.CreateEmptyDB();
                        Globals.FileLogger.Info("Created Gateway DB.");
                        break;
                    case "populatemetadata":
                        //process all inbound entities
                        Globals.FileLogger.Info("Populate Metadata if missing...");
                        EFLibrary.EFLibraryUtils.VerifyMetadata();
                        Globals.FileLogger.Info("Populated Metadata.");
                        break;
                    case "processinbound":
                        ExcHelper.ExecHelper.ProcessInboundEntities();
                        break;
                    case "processcurrency":
                        ExcHelper.ExecHelper.ProcessInboundEntity("CurrMaster");
                        break;
                    case "processglcode":
                        ExcHelper.ExecHelper.ProcessInboundEntity("GLCodeMaster");
                        break;
                    case "processorgmas":
                        ExcHelper.ExecHelper.ProcessInboundEntity("OrgMaster");
                        break;
                    case "processvendor":
                        ExcHelper.ExecHelper.ProcessInboundEntity("VendorMaster");
                        break;
                    case "processimageack":
                        ExcHelper.ExecHelper.ProcessInboundEntity("PostAckFailure");
                        break;
                    case "processvoucherack":
                        ExcHelper.ExecHelper.ProcessInboundEntity("VoucherAck");
                        break;
                    case "processapprovalmas":
                        ExcHelper.ExecHelper.ProcessInboundEntity("ApprovalMatrix");
                        break;
                    case "processhrhierarchy":
                        ExcHelper.ExecHelper.ProcessInboundEntity("HRHierarchy");
                        break;
                    case "processoucodermaster":
                        ExcHelper.ExecHelper.ProcessInboundEntity("OUCoderMaster");
                        break;
                    case "processglbuvssetid":
                        ExcHelper.ExecHelper.ProcessInboundEntity("GLBUVsSetID");
                        break;
                    case "processglacchartfield":
                        ExcHelper.ExecHelper.ProcessInboundEntity("GLACChartField");
                        break;
                    case "processescuserscodapp":
                        ExcHelper.ExecHelper.ProcessInboundEntity("EscUsersCodApp");
                        break;
                    case "downloadinvoices":
                        //Process all invoice download
                        Globals.FileLogger.Info("Invoking Download Invoices...");
                        ExcHelper.ExecHelper.DownloadInvoices(subFunction);
                        Globals.FileLogger.Info("Completed Processing of Download Invoices.");
                        break;
                    case "createinboundfolders":
                        ExcHelper.ExecHelper.CreateInboundFolders();
                        break;
                    case "sendemails":
                    case "sendpendingemails":
                        //Send out pending emails
                        emailGen = new EmailGenerator();
                        //emailGen.GenerateCompleteSummaryMessage(DateTime.Now.AddDays(-7), DateTime.Now);
                        emailGen.SendPendingEmails();
                        break;
                    case "summaryemail":
                        //Generate Summary message
                        emailGen = new EmailGenerator();
                        if (string.IsNullOrWhiteSpace(subFunction))
                            emailGen.GenerateCompleteSummaryMessage(DateTime.Now.AddDays(-2), DateTime.Now);
                        else
                            emailGen.GenerateCompleteSummaryMessage(DateTime.Now.AddDays(int.Parse(subFunction) * -1), DateTime.Now);
                        emailGen.SendPendingEmails();
                        break;
                    case "cleanlog4net":
                        //Clean Log4Net
                        Globals.FileLogger.Info("Invoking Clean Log4Net...");
                        if (string.IsNullOrWhiteSpace(subFunction))
                            ExcHelper.ExecHelper.CleanLog4Net(Globals.Log4NetDaysToKeep);
                        else
                            ExcHelper.ExecHelper.CleanLog4Net(int.Parse(subFunction));
                        Globals.FileLogger.Info("Completed Cleaning of Log4Net.");
                        break;
                    default:
                        Program.ShowUsage();
                        break;
                }
                //Update execution record
                ExcHelper.ExecHelper.UpdateExecRecord(execRecordID);
            }
            else
            {
                Program.ShowUsage();
                return 1;
            }
            return 0;
        }


        static private void ShowUsage()
        {
            Console.WriteLine("Please specify Correct Gateway function to execute.");
            Console.WriteLine("Usage: DNAPGateway.GatewayCMD Inbound <EntityName>");
            Console.WriteLine("Usage: DNAPGateway.GatewayCMD Outbound <EntityName>");
            Console.WriteLine("Usage: DNAPGateway.GatewayCMD SFTPInboundDownload");
            Console.WriteLine("Usage: DNAPGateway.GatewayCMD SFTPInboundUpload");
            Console.WriteLine("Usage: DNAPGateway.GatewayCMD SFTPOutboundUpload");
            //Individual commands to download from SFTP, Process and Upload to SFTP
            Console.WriteLine("----Individual commands to download from SFTP, Process and Upload to SFTP---");
            Console.WriteLine("Usage: DNAPGateway.GatewayCMD ProcessInbound");
            Console.WriteLine("Usage: DNAPGateway.GatewayCMD ProcessCurrency");
            Console.WriteLine("Usage: DNAPGateway.GatewayCMD ProcessGLCode");
            Console.WriteLine("Usage: DNAPGateway.GatewayCMD ProcessOrgMas");
            Console.WriteLine("Usage: DNAPGateway.GatewayCMD ProcessVendor");
            Console.WriteLine("Usage: DNAPGateway.GatewayCMD ProcessImageAck");
            Console.WriteLine("Usage: DNAPGateway.GatewayCMD ProcessVoucherAck");
            //Individual commands for outbound files
            Console.WriteLine("------Individual commands for outbound files---------");
            Console.WriteLine("Usage: DNAPGateway.GatewayCMD ProcessOutbound");
            Console.WriteLine("Usage: DNAPGateway.GatewayCMD ProcessOutAWSImage");
            Console.WriteLine("Usage: DNAPGateway.GatewayCMD ProcessOutPSPosting");
            //Commands for download invoices
            Console.WriteLine("-------Commands for download invoices-----------");
            Console.WriteLine("Usage: DNAPGateway.GatewayCMD DownloadInvoices <POBoxName>");
            //Commands for send email and summary email
            Console.WriteLine("-------Commands for send email and summary email-------");
            Console.WriteLine("Usage: DNAPGateway.GatewayCMD SendPendingEmails");
            Console.WriteLine("Usage: DNAPGateway.GatewayCMD SummaryEmail <NoOfDays>");
            //Commands for housekeeping and for new instance
            Console.WriteLine("-------Commands for housekeeping and for new instance--------");
            Console.WriteLine("Usage: DNAPGateway.GatewayCMD CreateInboundFolders");
            Console.WriteLine("Usage: DNAPGateway.GatewayCMD CreateGatewayDB");
            Console.WriteLine("Usage: DNAPGateway.GatewayCMD PopulateMetadata");
            Console.WriteLine("Usage: DNAPGateway.GatewayCMD CleanLog4Net <NoOfDaysToKeep>");

            return;
        }
    }
}
