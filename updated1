   public static bool DeleteExecRecord(int MonthsToKeep)
        {
            try
            {
                Globals.DBLogger.Info("DeleteExecRecord : Cleaning All Table...");
                using (GatewayDBContext dbContext = new GatewayDBContext())
                {
                    List<InboundProcessingSummary> SuccessIPS = new List<InboundProcessingSummary>();
                    List<InboundProcessingSummary> FailIPS = new List<InboundProcessingSummary>();
                    List<OutboundFilesSummary> SuccessOFS = new List<OutboundFilesSummary>();
                    List<OutboundFilesSummary> FailOFS = new List<OutboundFilesSummary>();
                    List<OutboundProcessingSummary> SuccessOPS = new List<OutboundProcessingSummary>();
                    List<OutboundProcessingSummary> FailOPS = new List<OutboundProcessingSummary>();
                    List<Dictionary<string, string>> _FileStatusList = new List<Dictionary<string, string>>();
                    //get date before 3 month
                    DateTime date = DateTime.Now.AddMonths(-MonthsToKeep);
                    SFTPHelper SFTPHelper = new SFTPHelper();

                    //get records from InboundProcessingSummaries
                    var infoListForIPS = dbContext.InboundProcessingSummaries
                               .Where(x => x.ProcessingStartedTime < date).ToList();
                   
                    if (infoListForIPS.Count != 0)
                    {
                       
                        foreach (var infoIPS in infoListForIPS)
                        {
                            var ForRemoveinfoIPS = infoIPS;
                            try
                            {
                                if(infoIPS.LocalSourceFilePath!="")
                                { 
                                var LocalSourceFileName = Path.GetFileName(infoIPS.LocalSourceFilePath);
                                var LocalSourceFilePath = Path.GetDirectoryName(infoIPS.LocalSourceFilePath);
                                //get all files from Local Directory
                                try
                                {
                                   
                                    string[] AllLocalSourceFiles = System.IO.Directory.GetFiles(LocalSourceFilePath, LocalSourceFileName + ".*");
                                Dictionary<string, string> IPSLocalSourceFileList = new Dictionary<string, string>();
                                foreach (string f in AllLocalSourceFiles)
                                  {
                                        infoIPS.LocalSourceFilePath = f;
                                        System.IO.File.Delete(f);
                                        SuccessIPS.Add(infoIPS);
                                    }
                                }
                                catch
                                {
                                    FailIPS.Add(infoIPS);
                                }
                                }
                                //delete that file on SFTP Directory
                                SFTPHelper.DeleteSFTPFile(infoIPS.LocalSuccessFilePath);
                                if (infoIPS.LocalSuccessFilePath != "")
                                {
                                    var LocalSuccessFileName = Path.GetFileName(infoIPS.LocalSuccessFilePath);
                                    var LocalSuccessFilePath = Path.GetDirectoryName(infoIPS.LocalSuccessFilePath);
                                    try
                                    {
                                        //get all files from Local Directory
                                        string[] AllLocalSuccessFiles = System.IO.Directory.GetFiles(LocalSuccessFilePath, LocalSuccessFileName + ".*");
                                        Dictionary<string, string> IPSLocalSuccessFileList = new Dictionary<string, string>();
                                        foreach (string f in AllLocalSuccessFiles)
                                        {
                                            //delete file on Local Directory
                                            infoIPS.LocalSuccessFilePath = f;
                                            System.IO.File.Delete(f);
                                            SuccessIPS.Add(infoIPS);
                                        }
                                    }
                                    catch
                                    {
                                        FailIPS.Add(infoIPS);
                                    }
                                }
                                //delete that file on SFTP Directory
                                SFTPHelper.DeleteSFTPFile(infoIPS.SFTPSuccessFilePath);
                                if (infoIPS.LocalFailedFilePath != "")
                                {
                                    var LocalFailedFileName = Path.GetFileName(infoIPS.LocalFailedFilePath);
                                    var LocalFailedFilePath = Path.GetDirectoryName(infoIPS.LocalFailedFilePath);
                                    //get all files from Local Directory
                                    try
                                    {
                                        string[] AllLocalFailedFiles = System.IO.Directory.GetFiles(LocalFailedFilePath, LocalFailedFileName + ".*");
                                        Dictionary<string, string> IPSLocalFailedFileList = new Dictionary<string, string>();
                                        foreach (string f in AllLocalFailedFiles)
                                        {
                                            //delete file on Local Directory
                                            infoIPS.LocalFailedFilePath = f;
                                            System.IO.File.Delete(f);
                                            SuccessIPS.Add(infoIPS);
                                        }
                                    }
                                    catch
                                    {
                                        FailIPS.Add(infoIPS);
                                    }
                                }
                            }
                            catch
                            {
                                FailIPS.Add(infoIPS);
                            }
                            //delete that file on SFTP Directory
                            SFTPHelper.DeleteSFTPFile(infoIPS.SFTPFailedFilePath);
                            //delete Data From Database
                            dbContext.InboundProcessingSummaries.Remove(ForRemoveinfoIPS);
                            dbContext.SaveChanges();

                        }
                    }

                 
                    //get records from OutboundFilesSummaries

                    var infoListForOFS = dbContext.OutboundFilesSummaries.Join(
                                                 dbContext.OutboundProcessingSummaries,
                                                ofs => new { ofs.OutboundFileName },
                                                ops => new { ops.OutboundFileName },
                                                (ofs, ops) => new { ofs, ops })
                                                .Where(o => o.ofs.OutboundFileName == o.ops.OutboundFileName
                                                            && o.ops.ProcessingStartedTime < date).Select(o => new { o.ofs.LocalFilePath, o.ofs.SFTPFilePath });
                  
                    GatewayDBContext contextDB = new GatewayDBContext();
                     if (infoListForOFS.ToList().Count != 0)
                    {
                        foreach (var infoOFS in infoListForOFS)
                        {
                            var infoList = contextDB.OutboundFilesSummaries.Where(x => x.LocalFilePath == infoOFS.LocalFilePath && x.SFTPFilePath == infoOFS.SFTPFilePath).FirstOrDefault();
                            var ForRemoveinfoOFS = infoList;
                            try
                            {
                                if (infoOFS.LocalFilePath != "")
                                {
                                    var LocalFileName = Path.GetFileName(infoOFS.LocalFilePath);
                                    var LocalFilePath = Path.GetDirectoryName(infoOFS.LocalFilePath);
                                    //get all files from Local Directory
                                    try
                                    {
                                        string[] AllLocalFiles = System.IO.Directory.GetFiles(LocalFilePath, LocalFileName + ".*");
                                        Dictionary<string, string> OFSLocalFilesList = new Dictionary<string, string>();
                                        foreach (string f in AllLocalFiles)
                                        {

                                            infoList.LocalFilePath = f;
                                            System.IO.File.Delete(f);
                                            SuccessOFS.Add(infoList);
                                        }


                                    }
                                    catch
                                    {
                                        FailOFS.Add(infoList);
                                    }
                                }
                            }
                            catch 
                            {
                                FailOFS.Add(infoList);
                            }
                            //delete that file on SFTP Directory
                            SFTPHelper.DeleteSFTPFile(infoOFS.SFTPFilePath);
                            //delete Data From Database
                            contextDB.OutboundFilesSummaries.Remove(ForRemoveinfoOFS);
                            contextDB.SaveChanges();
                        }
                    }

                    //get records from OutboundProcessingSummaries

                    var infoListForOPS = dbContext.OutboundProcessingSummaries
                       .Where(x => x.ProcessingStartedTime < date).ToList();
                    if (infoListForOPS.Count != 0)
                    {
                        foreach (var infoOPS in infoListForOPS)
                        {
                            var ForRemoveinfoOPS = infoOPS;
                            try
                            {
                                if (infoOPS.LocalFilePath != "")
                                {
                                    var LocalFileName = Path.GetFileName(infoOPS.LocalFilePath);
                                    var LocalFilePath = Path.GetDirectoryName(infoOPS.LocalFilePath);
                                    //get all files from Local Directory
                                    try
                                    {
                                        string[] AllLocalFiles = System.IO.Directory.GetFiles(LocalFilePath, LocalFileName + ".*");
                                        Dictionary<string, string> OPSLocalFilesList = new Dictionary<string, string>();

                                        foreach (string f in AllLocalFiles)
                                        {

                                            infoOPS.LocalFilePath = f;
                                            System.IO.File.Delete(f);
                                            SuccessOPS.Add(infoOPS);
                                        }

                                    }
                                    catch
                                    {
                                        FailOPS.Add(infoOPS);
                                    }
                                }

                            }
                            catch
                            {
                                FailOPS.Add(infoOPS);
                            }
                            //delete that file on SFTP Directory
                            SFTPHelper.DeleteSFTPFile(infoOPS.SFTPFilePath);
                            //delete Data From Database
                            dbContext.OutboundProcessingSummaries.Remove(ForRemoveinfoOPS);
                            dbContext.SaveChanges();
                        }
                    }
                    EmailGenerator emailGen = new EmailGenerator();
                    emailGen.DeleteProcessingSummaryMessage(SuccessIPS,FailIPS,SuccessOFS,FailOFS,SuccessOPS,FailOPS);
                }
               
                return true;
            }
            catch (Exception ex)
            {
                Globals.DBLogger.Error(String.Format("DeleteExecRecord: Error while executing : {0}", ex.Message), ex);
                return false;
            }
            finally
            {
                Globals.FlushLogBuffers();
            }
        }
