        public bool DeleteProcessingSummaryMessage(Dictionary<string,InboundProcessingSummary> IPSSuccess, Dictionary<string, InboundProcessingSummary> IPSFail, Dictionary<string, OutboundFilesSummary> OFSSuccess, Dictionary<string, OutboundFilesSummary> OFSFail, Dictionary<string, OutboundProcessingSummary> OPSSuccess, Dictionary<string, OutboundProcessingSummary> OPSFail)
        {
            try
            {
                lock (mailLock)
                {
                    using (demoEmailEntities dbContext = new demoEmailEntities())
                    {
                        //Create email body
                        _sbBody.AppendLine("<p>Dear <strong>Team</strong>,</p>");
                        _sbBody.AppendLine("<p>Following is Delete summary of Inbound, Outbound and Outbound File</p>");

                        //Inbound Success
                        _sbBody.AppendLine("<br>");
                        _sbBody.AppendLine("<p><strong>Inbound File Processing  Summary</strong>:</p>");
                        _sbBody.AppendLine("<table>");
                        var Entitys = string.Join(",<br>", IPSSuccess.Select(x => x.Value.EntityID).Distinct());
                        List<string> sccessFile = new List<string>();
                        sccessFile.AddRange( IPSSuccess.Where(x => x.Key == "LocalSourceFilePath").Select(x => x.Value.LocalSourceFilePath).Distinct());
                        sccessFile.AddRange(IPSSuccess.Where(x => x.Key == "LocalSuccessFilePath").Select(x => x.Value.LocalSuccessFilePath).Distinct());
                        sccessFile.AddRange(IPSSuccess.Where(x => x.Key == "LocalFailedFilePath").Select(x => x.Value.LocalFailedFilePath).Distinct());
                        var sccessFileList = string.Join(",<br>", sccessFile);

                        List<string> FailFiles = new List<string>();
                        FailFiles.AddRange(IPSFail.Where(x => x.Key == "LocalSourceFilePath").Select(x => x.Value.LocalSourceFilePath).Distinct());
                        FailFiles.AddRange(IPSFail.Where(x => x.Key == "LocalSuccessFilePath").Select(x => x.Value.LocalSuccessFilePath).Distinct());
                        FailFiles.AddRange(IPSFail.Where(x => x.Key == "LocalFailedFilePath").Select(x => x.Value.LocalFailedFilePath).Distinct());

                        var failFileList = string.Join(",<br>", FailFiles);

                        _sbBody.AppendLine("<tr><th>Entity</th><th>No of Files Delete</th><th>No of Files Problem Delete</th><th>Successfully Deleted  FileName</th><th>Failed In deleting FileName</th></tr>");
                        _sbBody.AppendFormat("<tr><td>{0}<td>", Entitys);
                        _sbBody.AppendFormat("<td>{0}</td>", OFSSuccess.Count.ToString());
                        _sbBody.AppendFormat("<td>{0}</td>", OFSFail.Count.ToString());
                        _sbBody.AppendFormat("<td>{0}", sccessFileList);
                        _sbBody.AppendFormat("<td>{0}", failFileList);
                        _sbBody.AppendLine("</tr>");
                        _sbBody.AppendLine("</table>");
                        _sbBody.AppendLine("<br>");




                        //Outbound File Success
                        _sbBody.AppendLine("<br>");
                        _sbBody.AppendLine("<p><strong>Outbound File Processing Summary</strong>:</p>");
                        _sbBody.AppendLine("<table>");
                        _sbBody.AppendLine("<tr><th>Entity</th><th>No of Files Delete</th><th>No of Files Problem Delete</th><th>Successfully Deleted  FileName</th><th>Failed In deleting FileName</th></tr>");
                        _sbBody.AppendFormat("<tr><td>{0}<td>", string.Join(",<br>", OFSSuccess.Select(x => x.Value.EntityID).Distinct()));
                        _sbBody.AppendFormat("<td>{0}</td>", OFSSuccess.Count.ToString());
                        _sbBody.AppendFormat("<td>{0}</td>", OFSFail.Count.ToString());
                        _sbBody.AppendFormat("<td>{0}", string.Join(",<br>", OFSSuccess.Where(x => x.Key == "LocalFilePath").Select(x => x.Value.LocalFilePath).Distinct()));
                        _sbBody.AppendFormat("<td>{0}", string.Join(",<br>", OFSFail.Where(x => x.Key == "LocalFilePath").Select(x => x.Value.LocalFilePath).Distinct()));
                        _sbBody.AppendLine("</tr>");
                        _sbBody.AppendLine("</table>");
                        _sbBody.AppendLine("<br>");

                        //Outbound Failed
                        _sbBody.AppendLine("<br>");
                        _sbBody.AppendLine("<p><strong>Outbound File Processing Summary</strong>:</p>");
                        _sbBody.AppendLine("<table>");
                        _sbBody.AppendLine("<tr><th>Entity</th><th>No of Files Delete</th><th>No of Files Problem Delete</th><th>Successfully Deleted  FileName</th><th>Failed In deleting FileName</th></tr>");
                        _sbBody.AppendFormat("<tr><td>{0}<td>", string.Join(",<br>", OPSSuccess.Select(x => x.Value.EntityID).Distinct()));
                        _sbBody.AppendFormat("<td>{0}</td>", OPSSuccess.Count.ToString());
                        _sbBody.AppendFormat("<td>{0}</td>", OPSFail.Count.ToString());
                        _sbBody.AppendFormat("<td>{0}", string.Join(",<br>", OPSSuccess.Where(x => x.Key == "LocalFilePath").Select(x => x.Value.LocalFilePath).Distinct()));
                        _sbBody.AppendFormat("<td>{0}", string.Join(",<br>", OPSFail.Where(x => x.Key == "LocalFilePath").Select(x => x.Value.LocalFilePath).Distinct()));
                        _sbBody.AppendLine("</tr>");
                        _sbBody.AppendLine("</table>");
                        _sbBody.AppendLine("<br>");

                        //Total Count
                        _sbBody.AppendLine(_emailFooter);
                        _message.Subject = $"Delete Processing summary Date:{DateTime.Now:MM/dd/yyyy} , Inbound Success:{IPSSuccess.Count} ,Inbound Fail:{IPSFail.Count} , Outbound File Success:{OFSSuccess.Count},Outbound File Fail:{OFSFail.Count}, Outbound Success:{OPSSuccess.Count}, Outbound Fail:{OPSFail.Count}";

                        //Set message field values                   
                        _message.BodyText = _sbBody.ToString();
                        _message.EmailType = "SummaryEmail";
                        //_message.EmailSubType = summaryType;
                        _message.CreatedBy = "Gateway Monitor";
                        //Save message
                        dbContext.SEEmailMessages.Add(_message);
                        dbContext.SaveChanges();
                        _message.To = string.Format("{0}", Globals.MailToInfo);

                        return true;
                    }
                }
            }
            catch (Exception ex)
            {
               Globals.DBLogger.Error(string.Format("DeleteProcessingSummaryMessage: Error while Sendmail {0}", ex.Message), ex);
                return false;
            }
        }

        public static bool DeleteExecRecord(int MonthsToKeep)
        {
            try
            {
                Globals.DBLogger.Info("DeleteExecRecord : Cleaning All Table...");
                using (demoEmailEntities dbContext = new demoEmailEntities())
                {
                    
                    Dictionary<string,InboundProcessingSummary> SuccessIPS = new Dictionary<string,InboundProcessingSummary>();
                    Dictionary<string,InboundProcessingSummary> FailIPS = new Dictionary<string,InboundProcessingSummary>();
                    Dictionary<string,OutboundFilesSummary> SuccessOFS = new Dictionary<string,OutboundFilesSummary>();
                    Dictionary<string,OutboundFilesSummary> FailOFS = new Dictionary<string,OutboundFilesSummary>();
                    Dictionary<string,OutboundProcessingSummary> SuccessOPS = new Dictionary<string,OutboundProcessingSummary>();
                    Dictionary<string,OutboundProcessingSummary> FailOPS = new Dictionary<string,OutboundProcessingSummary>();
                    //get date before 3 month
                    DateTime date = DateTime.Now.AddMonths(-MonthsToKeep);
                    SFTPHelper SFTPHelper = new SFTPHelper();

                    //get records from InboundProcessingSummaries
                    var infoListForIPS = dbContext.InboundProcessingSummaries
                               .Where(x => x.ProcessingStartedTime < date).ToList();

                    if (infoListForIPS.Count != 0)
                    {

                        foreach (var infoIPS in infoListForIPS)
                        {
                            var ForRemoveinfoIPS = infoIPS;
                                if (infoIPS.LocalSourceFilePath != "")
                                {
                                    var LocalSourceFileName = Path.GetFileName(infoIPS.LocalSourceFilePath);
                                    var LocalSourceFilePath = Path.GetDirectoryName(infoIPS.LocalSourceFilePath);
                                    //get all files from Local Directory
                                    try
                                    {

                                        string[] AllLocalSourceFiles = System.IO.Directory.GetFiles(LocalSourceFilePath, LocalSourceFileName + ".*");
                                        Dictionary<string, string> IPSLocalSourceFileList = new Dictionary<string, string>();
                                        foreach (string f in AllLocalSourceFiles)
                                        {
                                            infoIPS.LocalSourceFilePath = f;
                                            System.IO.File.Delete(f);
                                            SuccessIPS.Add("LocalSourceFilePath",infoIPS);
                                        }
                                    }
                                    catch
                                    {
                                        FailIPS.Add("LocalSourceFilePath",infoIPS);
                                    }
                                }
                                //delete that file on SFTP Directory
                                SFTPHelper.DeleteSFTPFile(infoIPS.LocalSuccessFilePath);
                                if (infoIPS.LocalSuccessFilePath != "")
                                {
                                    var LocalSuccessFileName = Path.GetFileName(infoIPS.LocalSuccessFilePath);
                                    var LocalSuccessFilePath = Path.GetDirectoryName(infoIPS.LocalSuccessFilePath);
                                    try
                                    {
                                        //get all files from Local Directory
                                        string[] AllLocalSuccessFiles = System.IO.Directory.GetFiles(LocalSuccessFilePath, LocalSuccessFileName + ".*");
                                        Dictionary<string, string> IPSLocalSuccessFileList = new Dictionary<string, string>();
                                        foreach (string f in AllLocalSuccessFiles)
                                        {
                                            //delete file on Local Directory
                                            infoIPS.LocalSuccessFilePath = f;
                                            System.IO.File.Delete(f);
                                            SuccessIPS.Add("LocalSuccessFilePath",infoIPS);
                                        }
                                    }
                                    catch
                                    {
                                        FailIPS.Add("LocalSuccessFilePath",infoIPS);
                                    }
                                }
                                //delete that file on SFTP Directory
                                SFTPHelper.DeleteSFTPFile(infoIPS.SFTPSuccessFilePath);
                                if (infoIPS.LocalFailedFilePath != "")
                                {
                                    var LocalFailedFileName = Path.GetFileName(infoIPS.LocalFailedFilePath);
                                    var LocalFailedFilePath = Path.GetDirectoryName(infoIPS.LocalFailedFilePath);
                                    //get all files from Local Directory
                                    try
                                    {
                                        string[] AllLocalFailedFiles = System.IO.Directory.GetFiles(LocalFailedFilePath, LocalFailedFileName + ".*");
                                        Dictionary<string, string> IPSLocalFailedFileList = new Dictionary<string, string>();
                                        foreach (string f in AllLocalFailedFiles)
                                        {
                                            //delete file on Local Directory
                                            infoIPS.LocalFailedFilePath = f;
                                            System.IO.File.Delete(f);
                                            SuccessIPS.Add("LocalFailedFilePath",infoIPS);
                                        }
                                    }
                                    catch
                                    {
                                        FailIPS.Add("LocalFailedFilePath",infoIPS);
                                    }
                                }
                          
                            //delete that file on SFTP Directory
                            SFTPHelper.DeleteSFTPFile(infoIPS.SFTPFailedFilePath);
                            //delete Data From Database
                            dbContext.InboundProcessingSummaries.Remove(ForRemoveinfoIPS);
                            dbContext.SaveChanges();

                        }
                    }


                    //get records from OutboundFilesSummaries

                    var infoListForOFS = dbContext.OutboundFilesSummaries.Join(
                                                 dbContext.OutboundProcessingSummaries,
                                                ofs => new { ofs.OutboundFileName },
                                                ops => new { ops.OutboundFileName },
                                                (ofs, ops) => new { ofs, ops })
                                                .Where(o => o.ofs.OutboundFileName == o.ops.OutboundFileName
                                                            && o.ops.ProcessingStartedTime < date).Select(o => new { o.ofs.LocalFilePath, o.ofs.SFTPFilePath });

                    demoEmailEntities contextDB = new demoEmailEntities();
                    if (infoListForOFS.ToList().Count != 0)
                    {
                        foreach (var infoOFS in infoListForOFS)
                        {
                            var infoList = contextDB.OutboundFilesSummaries.Where(x => x.LocalFilePath == infoOFS.LocalFilePath && x.SFTPFilePath == infoOFS.SFTPFilePath).FirstOrDefault();
                            var ForRemoveinfoOFS = infoList;
                             if (infoOFS.LocalFilePath != "")
                                {
                                    var LocalFileName = Path.GetFileName(infoOFS.LocalFilePath);
                                    var LocalFilePath = Path.GetDirectoryName(infoOFS.LocalFilePath);
                                    //get all files from Local Directory
                                    try
                                    {
                                        string[] AllLocalFiles = System.IO.Directory.GetFiles(LocalFilePath, LocalFileName + ".*");
                                        Dictionary<string, string> OFSLocalFilesList = new Dictionary<string, string>();
                                        foreach (string f in AllLocalFiles)
                                        {

                                            infoList.LocalFilePath = f;
                                            System.IO.File.Delete(f);
                                            SuccessOFS.Add("LocalFilePath",infoList);

                                        }


                                    }
                                    catch
                                    {
                                        FailOFS.Add("LocalFilePath",infoList);
                                    }
                                }
                            FailOFS.Add("LocalFilePath",infoList);
                            }
                            //delete that file on SFTP Directory
                            SFTPHelper.DeleteSFTPFile(infoOFS.SFTPFilePath);
                            //delete Data From Database
                            contextDB.OutboundFilesSummaries.Remove(ForRemoveinfoOFS);
                            contextDB.SaveChanges();
                        }

                    //get records from OutboundProcessingSummaries

                    var infoListForOPS = dbContext.OutboundProcessingSummaries
                       .Where(x => x.ProcessingStartedTime < date).ToList();
                    if (infoListForOPS.Count != 0)
                    {
                        foreach (var infoOPS in infoListForOPS)
                        {
                            var ForRemoveinfoOPS = infoOPS;
                             if (infoOPS.LocalFilePath != "")
                                {
                                    var LocalFileName = Path.GetFileName(infoOPS.LocalFilePath);
                                    var LocalFilePath = Path.GetDirectoryName(infoOPS.LocalFilePath);
                                    //get all files from Local Directory
                                    try
                                    {
                                        string[] AllLocalFiles = System.IO.Directory.GetFiles(LocalFilePath, LocalFileName + ".*");
                                        Dictionary<string, string> OPSLocalFilesList = new Dictionary<string, string>();

                                        foreach (string f in AllLocalFiles)
                                        {

                                            infoOPS.LocalFilePath = f;
                                            System.IO.File.Delete(f);
                                            SuccessOPS.Add("LocalFilePath",infoOPS);
                                        }

                                    }
                                    catch
                                    {
                                        FailOPS.Add("LocalFilePath",infoOPS);
                                    }
                                }

                            //delete that file on SFTP Directory
                            SFTPHelper.DeleteSFTPFile(infoOPS.SFTPFilePath);
                            //delete Data From Database
                            dbContext.OutboundProcessingSummaries.Remove(ForRemoveinfoOPS);
                            dbContext.SaveChanges();
                        }
                    }
                    EmailGenerator emailGen = new EmailGenerator();
                    emailGen.DeleteProcessingSummaryMessage(SuccessIPS, FailIPS, SuccessOFS, FailOFS, SuccessOPS, FailOPS);
                }

                return true;
            }
            catch (Exception ex)
            {
               Globals.DBLogger.Error(String.Format("DeleteExecRecord: Error while executing : {0}", ex.Message), ex);
                return false;
            }
            finally
            {
                Globals.FlushLogBuffers();
            }
        }
