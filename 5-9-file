    public static bool DeleteExecRecord(int DaysToKeep)
        {
            try
            {
                Globals.DBLogger.Info("DeleteExecRecord : Cleaning All Table...");
                using (GatewayDBContext dbContext = new GatewayDBContext())
                {
                    
                    //get date before 3 month
                    DateTime date = DateTime.Now.AddMonths(-DaysToKeep);
                   
                    //get records from InboundProcessingSummaries
                    var infoListForIPS = dbContext.InboundProcessingSummaries
                               .Where(x => x.ProcessingStartedTime < date).ToList();
                    InboundPurgeData inboundPurgeData = new InboundPurgeData();
                    List<Dictionary<InboundProcessingSummary,List<string>>>inboundList= inboundPurgeData.PurgeInboundData(infoListForIPS);
                  
                    //get records from OutboundFilesSummaries
                    var infoListForOFS = dbContext.OutboundFilesSummaries.Join(
                                                 dbContext.OutboundProcessingSummaries,
                                                ofs => new { ofs.OutboundFileName },
                                                ops => new { ops.OutboundFileName },
                                                (ofs, ops) => new { ofs, ops })
                                                .Where(o => o.ofs.OutboundFileName == o.ops.OutboundFileName
                                                            && o.ops.ProcessingStartedTime < date).Select(o => new { o.ofs.LocalFilePath, o.ofs.SFTPFilePath }).ToDictionary(kvp => kvp.LocalFilePath, kvp => kvp.SFTPFilePath);
                
                   // Dictionary<string,string> List = infoListForOFS.ToDictionary();
                   
                    OutboundPurgeData outboundPurgeData = new OutboundPurgeData();
                    List<Dictionary<OutboundFilesSummary, List<string>>> outboundFileList = outboundPurgeData.PurgeOutboundFileData(infoListForOFS);
                   
                    var infoListForOPS = dbContext.OutboundProcessingSummaries
                       .Where(x => x.ProcessingStartedTime < date).ToList();

                    List<Dictionary<OutboundProcessingSummary, List<string>>> outboundList = outboundPurgeData.PurgeOutboundData(infoListForOPS);
                    EmailGenerator emailGen = new EmailGenerator();
                    emailGen.DeleteProcessingSummaryMessage(inboundList[0], inboundList[1], outboundFileList[0], outboundFileList[1], outboundList[0], outboundList[1]);
                }
                return true;
            }
            catch (Exception ex)
            {
                Globals.DBLogger.Error(String.Format("DeleteExecRecord: Error while executing : {0}", ex.Message), ex);
                return false;
            }
            finally
            {
                Globals.FlushLogBuffers();
            }
        }

 
 ***************************************************
 
 public class InboundPurgeData
    {
        FileInfo _fileInfo;
        public List<Dictionary<InboundProcessingSummary, List<string>>> PurgeInboundData(List<InboundProcessingSummary> infoListForIPS)
        {
            List<Dictionary<InboundProcessingSummary, List<string>>> successFailList = new List<Dictionary<InboundProcessingSummary, List<string>>>();
            try
            {
                Globals.DBLogger.Info("DeleteExecRecord : Cleaning InboundProcessingSummary Table...");
                using (GatewayDBContext dbContext = new GatewayDBContext())
                {
                    Dictionary<InboundProcessingSummary, List<string>> successListIPS = new Dictionary<InboundProcessingSummary, List<string>>();
                    Dictionary<InboundProcessingSummary, List<string>> failListIPS = new Dictionary<InboundProcessingSummary, List<string>>();
                    List<string> fileInfo = new List<string>();
                    var fileName = "";
                    var fileDirectory = "";
                    bool IsSFTPFileStatus;
                    string[] allExtnFiles;
                    SFTPHelper sftpHelper = new SFTPHelper();
                    if (infoListForIPS.Count != 0)
                    {
                        foreach (var infoIPS in infoListForIPS)
                        {
                            
                            try
                            {
                                if (string.IsNullOrWhiteSpace(infoIPS.LocalSourceFilePath))
                                {
                                    _fileInfo = new FileInfo(infoIPS.LocalSourceFilePath);
                                    fileName = Globals.FileNameWOExt(infoIPS.LocalSourceFilePath);
                                    fileDirectory = _fileInfo.DirectoryName;
                                    try
                                    {
                                        allExtnFiles = System.IO.Directory.GetFiles(fileName, $"{fileDirectory}.* ");
                                        foreach (string f in allExtnFiles)
                                        {
                                            System.IO.File.Delete(f);
                                            fileInfo.Add(f);
                                            successListIPS.Add(infoIPS, fileInfo);
                                        }
                                    }
                                    catch
                                    {
                                        failListIPS.Add(infoIPS, fileInfo);
                                    }
                                }
                                if (string.IsNullOrWhiteSpace(infoIPS.SFTPSourceFilePath))
                                {
                                    _fileInfo = new FileInfo(infoIPS.SFTPSourceFilePath);
                                    fileName = Globals.FileNameWOExt(infoIPS.SFTPSourceFilePath);
                                    fileDirectory = _fileInfo.DirectoryName;
                                    //delete that file on SFTP Directory
                                    allExtnFiles = System.IO.Directory.GetFiles(fileName, $"{fileDirectory}.* ");
                                    foreach (string f in allExtnFiles)
                                    {
                                        IsSFTPFileStatus = sftpHelper.DeleteSFTPFile(f, true);
                                        if (IsSFTPFileStatus == true)
                                        {
                                            fileInfo.Add(f);
                                            successListIPS.Add(infoIPS, fileInfo);
                                        }
                                        else
                                        {
                                            fileInfo.Add(f);
                                            failListIPS.Add(infoIPS, fileInfo);
                                        }
                                    }
                                }

                                if (string.IsNullOrWhiteSpace(infoIPS.LocalSuccessFilePath))
                                {
                                    _fileInfo = new FileInfo(infoIPS.LocalSuccessFilePath);
                                    fileName = Globals.FileNameWOExt(infoIPS.LocalSuccessFilePath);
                                    fileDirectory = _fileInfo.DirectoryName;
                                    try
                                    {
                                        allExtnFiles = System.IO.Directory.GetFiles(fileName, $"{fileDirectory}.* ");
                                        foreach (string f in allExtnFiles)
                                        {
                                            System.IO.File.Delete(f);
                                            fileInfo.Add(f);
                                            successListIPS.Add(infoIPS, fileInfo);
                                        }
                                    }
                                    catch
                                    {
                                        failListIPS.Add(infoIPS, fileInfo);
                                    }
                                }
                                if (string.IsNullOrWhiteSpace(infoIPS.SFTPSuccessFilePath))
                                {
                                    _fileInfo = new FileInfo(infoIPS.SFTPSuccessFilePath);
                                    fileName = Globals.FileNameWOExt(infoIPS.SFTPSuccessFilePath);
                                    fileDirectory = _fileInfo.DirectoryName;
                                    //delete that file on SFTP Directory
                                    allExtnFiles = System.IO.Directory.GetFiles(fileName, $"{fileDirectory}.* ");
                                    foreach (string f in allExtnFiles)
                                    {
                                        IsSFTPFileStatus = sftpHelper.DeleteSFTPFile(f, true);
                                        if (IsSFTPFileStatus == true)
                                        {
                                            fileInfo.Add(f);
                                            successListIPS.Add(infoIPS, fileInfo);
                                        }
                                        else
                                        {
                                            fileInfo.Add(f);
                                            failListIPS.Add(infoIPS, fileInfo);
                                        }
                                    }
                                }
                                if (string.IsNullOrWhiteSpace(infoIPS.LocalFailedFilePath))
                                {
                                    _fileInfo = new FileInfo(infoIPS.LocalFailedFilePath);
                                    fileName = Globals.FileNameWOExt(infoIPS.LocalFailedFilePath);
                                    fileDirectory = _fileInfo.DirectoryName;
                                    try
                                    {
                                        allExtnFiles = System.IO.Directory.GetFiles(fileName, $"{fileDirectory}.* ");
                                        foreach (string f in allExtnFiles)
                                        {
                                            System.IO.File.Delete(f);
                                            fileInfo.Add(f);
                                            successListIPS.Add(infoIPS, fileInfo);
                                        }
                                    }
                                    catch
                                    {
                                        failListIPS.Add(infoIPS, fileInfo);
                                    }
                                }
                                if (string.IsNullOrWhiteSpace(infoIPS.SFTPFailedFilePath))
                                {
                                    _fileInfo = new FileInfo(infoIPS.SFTPFailedFilePath);
                                    fileName = Globals.FileNameWOExt(infoIPS.SFTPFailedFilePath);
                                    fileDirectory = _fileInfo.DirectoryName;
                                    //delete that file on SFTP Directory
                                    allExtnFiles = System.IO.Directory.GetFiles(fileName, $"{fileDirectory}.* ");
                                    foreach (string f in allExtnFiles)
                                    {
                                        IsSFTPFileStatus = sftpHelper.DeleteSFTPFile(f, true);
                                        if (IsSFTPFileStatus == true)
                                        {
                                            fileInfo.Add(f);
                                            successListIPS.Add(infoIPS, fileInfo);
                                        }
                                        else
                                        {
                                            fileInfo.Add(f);
                                            failListIPS.Add(infoIPS, fileInfo);
                                        }
                                    }
                                }
                                //delete recordData from database
                                dbContext.InboundProcessingSummaries.Remove(infoIPS);
                                dbContext.SaveChanges();
                            }
                            catch (Exception ex)
                            {
                                Globals.DBLogger.Error(String.Format("DeleteExecRecord: Error while executing : {0}", ex.Message), ex);

                            }
                        }
                    }
                    successFailList.Add(successListIPS);
                    successFailList.Add(failListIPS);
                    return successFailList;

                }
            }
            catch (Exception ex)
            {
                Globals.DBLogger.Error(String.Format("DeleteExecRecord: Error while executing : {0}", ex.Message), ex);
                return successFailList;
            }
            finally
            {
                Globals.FlushLogBuffers();
            }
        }

    }
    
    
    
    **************************************************
    
    
     public class OutboundPurgeData
    {
        FileInfo _fileInfo;
        public List<Dictionary<OutboundProcessingSummary, List<string>>> PurgeOutboundData(List<OutboundProcessingSummary> infoListForOPS)
        {
            List<Dictionary<OutboundProcessingSummary, List<string>>> successFailList = new List<Dictionary<OutboundProcessingSummary, List<string>>>();
            try
            {
                Globals.DBLogger.Info("DeleteExecRecord : Cleaning OutboundProcessingSummary Table...");
                using (GatewayDBContext dbContext = new GatewayDBContext())
                {
                    Dictionary<OutboundProcessingSummary, List<string>> successListOPS = new Dictionary<OutboundProcessingSummary, List<string>>();
                    Dictionary<OutboundProcessingSummary, List<string>> failListOPS = new Dictionary<OutboundProcessingSummary, List<string>>();
                    List<string> fileInfo = new List<string>();
                    var fileName = "";
                    var fileDirectory = "";
                    bool IsSFTPFileStatus;
                    string[] allExtnFiles;
                    SFTPHelper sftpHelper = new SFTPHelper();
                    if (infoListForOPS.Count != 0)
                    {
                        foreach (var infoOPS in infoListForOPS)
                        {
                            try
                            {
                                if (string.IsNullOrWhiteSpace(infoOPS.LocalFilePath))
                                {
                                    _fileInfo = new FileInfo(infoOPS.LocalFilePath);
                                    fileName = Globals.FileNameWOExt(infoOPS.LocalFilePath);
                                    fileDirectory = _fileInfo.DirectoryName;
                                    try
                                    {
                                        allExtnFiles = System.IO.Directory.GetFiles(fileName, $"{fileDirectory}.* ");
                                        foreach (string f in allExtnFiles)
                                        {
                                            System.IO.File.Delete(f);
                                            fileInfo.Add(f);
                                            successListOPS.Add(infoOPS, fileInfo);
                                        }
                                    }
                                    catch
                                    {
                                        failListOPS.Add(infoOPS, fileInfo);
                                    }
                                }
                                if (string.IsNullOrWhiteSpace(infoOPS.SFTPFilePath))
                                {
                                    _fileInfo = new FileInfo(infoOPS.SFTPFilePath);
                                    fileName = Globals.FileNameWOExt(infoOPS.SFTPFilePath);
                                    fileDirectory = _fileInfo.DirectoryName;
                                    //delete that file on SFTP Directory
                                    allExtnFiles = System.IO.Directory.GetFiles(fileName, $"{fileDirectory}.* ");
                                    foreach (string f in allExtnFiles)
                                    {
                                        IsSFTPFileStatus = sftpHelper.DeleteSFTPFile(f, true);
                                        if (IsSFTPFileStatus == true)
                                        {
                                            fileInfo.Add(f);
                                            successListOPS.Add(infoOPS, fileInfo);
                                        }
                                        else
                                        {
                                            fileInfo.Add(f);
                                            failListOPS.Add(infoOPS, fileInfo);
                                        }
                                    }
                                }

                                //delete recordData from database
                                dbContext.OutboundProcessingSummaries.Remove(infoOPS);
                                dbContext.SaveChanges();
                            }
                            catch (Exception ex)
                            {
                                Globals.DBLogger.Error(String.Format("DeleteExecRecord: Error while executing : {0}", ex.Message), ex);

                            }
                        }
                    }
                    successFailList.Add(successListOPS);
                    successFailList.Add(failListOPS);
                    return successFailList;

                }
            }
            catch (Exception ex)
            {
                Globals.DBLogger.Error(String.Format("DeleteExecRecord: Error while executing : {0}", ex.Message), ex);
                return successFailList;
            }
            finally
            {
                Globals.FlushLogBuffers();
            }
        }

        public List<Dictionary<OutboundFilesSummary, List<string>>> PurgeOutboundFileData(Dictionary<string,string> infoListForOFS)
        {
            List<Dictionary<OutboundFilesSummary, List<string>>> successFailList = new List<Dictionary<OutboundFilesSummary, List<string>>>();
            try
            {
                Globals.DBLogger.Info("DeleteExecRecord : Cleaning OutboundFilesSummary Table...");
                using (GatewayDBContext dbContext = new GatewayDBContext())
                {
                    Dictionary<OutboundFilesSummary, List<string>> successListOPS = new Dictionary<OutboundFilesSummary, List<string>>();
                    Dictionary<OutboundFilesSummary, List<string>> failListOPS = new Dictionary<OutboundFilesSummary, List<string>>();
                    List<string> fileInfo = new List<string>();
                    var fileName = "";
                    var fileDirectory = "";
                    bool IsSFTPFileStatus;
                    string[] allExtnFiles;
                    GatewayDBContext contextDB = new GatewayDBContext();
                    SFTPHelper sftpHelper = new SFTPHelper();
                    if (infoListForOFS.ToList().Count != 0)
                    {
                        foreach (var infoOFS in infoListForOFS)
                        {
                            var listinfoOFS = contextDB.OutboundFilesSummaries.Where(x => x.LocalFilePath == infoOFS.LocalFilePath && x.SFTPFilePath == infoOFS.SFTPFilePath).FirstOrDefault();
                            try
                            {
                                if (string.IsNullOrWhiteSpace(infoOFS.Key))
                                {
                                    _fileInfo = new FileInfo(infoOFS.Key);
                                    fileName = Globals.FileNameWOExt(infoOFS.Key);
                                    fileDirectory = _fileInfo.DirectoryName;
                                    try
                                    {
                                        allExtnFiles = System.IO.Directory.GetFiles(fileName, $"{fileDirectory}.* ");
                                        foreach (string f in allExtnFiles)
                                        {
                                            System.IO.File.Delete(f);
                                            fileInfo.Add(f);
                                            successListOPS.Add(listinfoOFS, fileInfo);
                                        }
                                    }
                                    catch
                                    {
                                        failListOPS.Add(listinfoOFS, fileInfo);
                                    }
                                }
                                if (string.IsNullOrWhiteSpace(infoOFS.Value))
                                {
                                    _fileInfo = new FileInfo(infoOFS.Value);
                                    fileName = Globals.FileNameWOExt(infoOFS.Value);
                                    fileDirectory = _fileInfo.DirectoryName;
                                    //delete that file on SFTP Directory
                                    allExtnFiles = System.IO.Directory.GetFiles(fileName, $"{fileDirectory}.* ");
                                    foreach (string f in allExtnFiles)
                                    {
                                        IsSFTPFileStatus = sftpHelper.DeleteSFTPFile(f, true);
                                        if (IsSFTPFileStatus == true)
                                        {
                                            fileInfo.Add(f);
                                            successListOPS.Add(listinfoOFS, fileInfo);
                                        }
                                        else
                                        {
                                            fileInfo.Add(f);
                                            failListOPS.Add(listinfoOFS, fileInfo);
                                        }
                                    }
                                }

                                //delete recordData from database
                                contextDB.OutboundFilesSummaries.Remove(listinfoOFS);
                                contextDB.SaveChanges();
                            }
                            catch (Exception ex)
                            {
                                Globals.DBLogger.Error(String.Format("DeleteExecRecord: Error while executing : {0}", ex.Message), ex);

                            }
                        }
                    }
                    successFailList.Add(successListOPS);
                    successFailList.Add(failListOPS);
                    return successFailList;

                }
            }
            catch (Exception ex)
            {
                Globals.DBLogger.Error(String.Format("DeleteExecRecord: Error while executing : {0}", ex.Message), ex);
                return successFailList;
            }
            finally
            {
                Globals.FlushLogBuffers();
            }
        }
    }
    
    
    **********************************************
    
    public bool DeleteProcessingSummaryMessage(Dictionary<InboundProcessingSummary, List<string>> IPSSuccess, Dictionary<InboundProcessingSummary, List<string>> IPSFail, Dictionary<OutboundFilesSummary, List<string>> OFSSuccess, Dictionary<OutboundFilesSummary, List<string>> OFSFail, Dictionary<OutboundProcessingSummary, List<string>> OPSSuccess, Dictionary<OutboundProcessingSummary, List<string>> OPSFail)
        {
            try
            {
                lock (mailLock)
                {
                    using (GatewayDBContext dbContext = new EFLibrary.GatewayDBContext())
                    {
                        //Create email body
                        _sbBody.AppendLine("<p>Dear <strong>Team</strong>,</p>");
                        _sbBody.AppendLine("<p>Following is Delete summary of Inbound, Outbound and Outbound File</p>");

                        //Inbound 
                        _sbBody.AppendLine("<br>");
                        _sbBody.AppendLine("<p><strong>Inbound File Processing  Summary</strong>:</p>");
                        _sbBody.AppendLine("<table>");
                        var Entitys = string.Join(",<br>", IPSSuccess.Select(x => x.Value.EntityID).Distinct());
                        List<string> sccessFile = new List<string>();
                        sccessFile.AddRange(IPSSuccess.Where(x => x.Key.Contains("LocalSourceFilePath")).Select(x => x.Value.LocalSourceFilePath).Distinct());
                        sccessFile.AddRange(IPSSuccess.Where(x => x.Key.Contains("LocalSuccessFilePath")).Select(x => x.Value.LocalSuccessFilePath).Distinct());
                        sccessFile.AddRange(IPSSuccess.Where(x => x.Key.Contains("LocalFailedFilePath")).Select(x => x.Value.LocalFailedFilePath).Distinct());
                        sccessFile.AddRange(IPSSuccess.Where(x => x.Key.Contains("SFTPSourceFilePath")).Select(x => x.Value.SFTPSourceFilePath).Distinct());
                        sccessFile.AddRange(IPSSuccess.Where(x => x.Key.Contains("SFTPSuccessFilePath")).Select(x => x.Value.SFTPSuccessFilePath).Distinct());
                        sccessFile.AddRange(IPSSuccess.Where(x => x.Key.Contains("SFTPFailedFilePath")).Select(x => x.Value.SFTPFailedFilePath).Distinct());
                        var sccessFileList = string.Join(",<br>", sccessFile);

                        List<string> FailFiles = new List<string>();
                        FailFiles.AddRange(IPSFail.Where(x => x.Key.Contains("LocalSourceFilePath")).Select(x => x.Value.LocalSourceFilePath).Distinct());
                        FailFiles.AddRange(IPSFail.Where(x => x.Key.Contains("LocalSuccessFilePath")).Select(x => x.Value.LocalSuccessFilePath).Distinct());
                        FailFiles.AddRange(IPSFail.Where(x => x.Key.Contains("LocalFailedFilePath")).Select(x => x.Value.LocalFailedFilePath).Distinct());
                        FailFiles.AddRange(IPSFail.Where(x => x.Key.Contains("SFTPSourceFilePath")).Select(x => x.Value.SFTPSourceFilePath).Distinct());
                        FailFiles.AddRange(IPSFail.Where(x => x.Key.Contains("SFTPSuccessFilePath")).Select(x => x.Value.SFTPSuccessFilePath).Distinct());
                        FailFiles.AddRange(IPSFail.Where(x => x.Key.Contains("SFTPFailedFilePath")).Select(x => x.Value.SFTPFailedFilePath).Distinct());

                        var failFileList = string.Join(",<br>", FailFiles);

                        _sbBody.AppendLine("<tr><th>Entity</th><th>No of Files Delete</th><th>No of Files Problem Delete</th><th>Successfully Deleted  FileName</th><th>Failed In deleting FileName</th></tr>");
                        _sbBody.AppendFormat("<tr><td>{0}<td>", Entitys);
                        _sbBody.AppendFormat("<td>{0}</td>", OFSSuccess.Count.ToString());
                        _sbBody.AppendFormat("<td>{0}</td>", OFSFail.Count.ToString());
                        _sbBody.AppendFormat("<td>{0}", sccessFileList);
                        _sbBody.AppendFormat("<td>{0}", failFileList);
                        _sbBody.AppendLine("</tr>");
                        _sbBody.AppendLine("</table>");
                        _sbBody.AppendLine("<br>");

                        //Outbound File 
                        _sbBody.AppendLine("<br>");
                        _sbBody.AppendLine("<p><strong>Outbound File Processing Summary</strong>:</p>");
                        _sbBody.AppendLine("<table>");
                        _sbBody.AppendLine("<tr><th>Entity</th><th>No of Files Delete</th><th>No of Files Problem Delete</th><th>Successfully Deleted Local FileName</th><th>Failed In deleting Local FileName</th><th>Successfully Deleted SFTP FileName</th><th>Failed In deleting SFTP FileName</th></tr>");
                        _sbBody.AppendFormat("<tr><td>{0}<td>", string.Join(",<br>", OFSSuccess.Select(x => x.Value.EntityID).Distinct()));
                        _sbBody.AppendFormat("<td>{0}</td>", OFSSuccess.Count.ToString());
                        _sbBody.AppendFormat("<td>{0}</td>", OFSFail.Count.ToString());
                        _sbBody.AppendFormat("<td>{0}", string.Join(",<br>", OFSSuccess.Where(x => x.Key.Contains("LocalFilePath")).Select(x => x.Value.LocalFilePath).Distinct()));
                        _sbBody.AppendFormat("<td>{0}", string.Join(",<br>", OFSFail.Where(x => x.Key.Contains("LocalFilePath")).Select(x => x.Value.LocalFilePath).Distinct()));
                        _sbBody.AppendFormat("<td>{0}", string.Join(",<br>", OFSSuccess.Where(x => x.Key.Contains("SFTPFilePath")).Select(x => x.Value.SFTPFilePath).Distinct()));
                        _sbBody.AppendFormat("<td>{0}", string.Join(",<br>", OFSFail.Where(x => x.Key.Contains("SFTPFilePath")).Select(x => x.Value.SFTPFilePath).Distinct()));
                        _sbBody.AppendLine("</tr>");
                        _sbBody.AppendLine("</table>");
                        _sbBody.AppendLine("<br>");

                        //Outbound 
                        _sbBody.AppendLine("<br>");
                        _sbBody.AppendLine("<p><strong>Outbound File Processing Summary</strong>:</p>");
                        _sbBody.AppendLine("<table>");
                        _sbBody.AppendLine("<tr><th>Entity</th><th>No of Files Delete</th><th>No of Files Problem Delete</th><th>Successfully Deleted Local FileName</th><th>Failed In deleting Local FileName</th><th>Successfully Deleted SFTP FileName</th><th>Failed In deleting SFTP FileName</th></tr>");
                        _sbBody.AppendFormat("<tr><td>{0}<td>", string.Join(",<br>", OPSSuccess.Select(x => x.Value.EntityID).Distinct()));
                        _sbBody.AppendFormat("<td>{0}</td>", OPSSuccess.Count.ToString());
                        _sbBody.AppendFormat("<td>{0}</td>", OPSFail.Count.ToString());
                        _sbBody.AppendFormat("<td>{0}", string.Join(",<br>", OPSSuccess.Where(x => x.Key.Contains("LocalFilePath")).Select(x => x.Value.LocalFilePath).Distinct()));
                        _sbBody.AppendFormat("<td>{0}", string.Join(",<br>", OPSFail.Where(x => x.Key.Contains("LocalFilePath")).Select(x => x.Value.LocalFilePath).Distinct()));
                        _sbBody.AppendFormat("<td>{0}", string.Join(",<br>", OFSSuccess.Where(x => x.Key.Contains("SFTPFilePath")).Select(x => x.Value.SFTPFilePath).Distinct()));
                        _sbBody.AppendFormat("<td>{0}", string.Join(",<br>", OFSFail.Where(x => x.Key.Contains("SFTPFilePath")).Select(x => x.Value.SFTPFilePath).Distinct()));
                        _sbBody.AppendLine("</tr>");
                        _sbBody.AppendLine("</table>");
                        _sbBody.AppendLine("<br>");

                        //Total Count
                        _sbBody.AppendLine(_emailFooter);
                        _message.Subject = $"Delete Processing summary Date:{DateTime.Now:MM/dd/yyyy} , Inbound Success:{IPSSuccess.Count} ,Inbound Fail:{IPSFail.Count} , Outbound File Success:{OFSSuccess.Count},Outbound File Fail:{OFSFail.Count}, Outbound Success:{OPSSuccess.Count}, Outbound Fail:{OPSFail.Count}";

                        //Set message field values                   
                        _message.BodyText = _sbBody.ToString();
                        _message.EmailType = "SummaryEmail";
                        //_message.EmailSubType = summaryType;
                        _message.CreatedBy = "Gateway Monitor";
                        //Save message
                        dbContext.SEEmailMessages.Add(_message);
                        dbContext.SaveChanges();
                        _message.To = string.Format("{0}", Globals.MailToInfo);

                        return true;
                    }
                }
            }
            catch (Exception ex)
            {
                Globals.DBLogger.Error(string.Format("DeleteProcessingSummaryMessage: Error while Sendmail {0}", ex.Message), ex);
                return false;
            }
        }
