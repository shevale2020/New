    public static bool DeleteExecRecord(int MonthsToKeep)
        {
            try
            {
                Globals.DBLogger.Info("DeleteExecRecord : Cleaning All Table...");
                using (GatewayDBContext dbContext = new GatewayDBContext())
                {

                    DateTime date = DateTime.Now.AddMonths(-MonthsToKeep);
                    SFTPHelper SFTPHelper = new SFTPHelper();
                    var infoListForIPS = dbContext.InboundProcessingSummaries
                               .Where(x => x.ProcessingStartedTime < date).ToList();
                    List<InboundProcessingSummary> SuccessIPS = new List<InboundProcessingSummary>();
                    List<InboundProcessingSummary> FailIPS = new List<InboundProcessingSummary>();
                    List<OutboundFilesSummary> SuccessOFS = new List<OutboundFilesSummary>();
                    List<OutboundFilesSummary> FailOFS = new List<OutboundFilesSummary>();
                    List<OutboundProcessingSummary> SuccessOPS = new List<OutboundProcessingSummary>();
                    List<OutboundProcessingSummary> FailOPS = new List<OutboundProcessingSummary>();
                    List<Dictionary<string, string>> _FileStatusList = new List<Dictionary<string, string>>();
                    if (infoListForIPS != null)
                    {
                        foreach (var infoIPS in infoListForIPS)
                        {
                            try
                            {

                                var LocalSourceFileName = Path.GetFileName(infoIPS.LocalSourceFilePath);
                                var LocalSourceFilePath = Path.GetDirectoryName(infoIPS.LocalSourceFilePath);

                                string[] AllLocalSourceFiles = System.IO.Directory.GetFiles(LocalSourceFilePath, "'"+ LocalSourceFileName + "'.*");
                                Dictionary<string, string> IPSLocalSourceFileList = new Dictionary<string, string>();
                                foreach (string f in AllLocalSourceFiles)
                                {
                                    try
                                    {
                                        System.IO.File.Delete(f);
                                        IPSLocalSourceFileList.Add(f, "Success");
                                    }
                                    catch
                                    {
                                        IPSLocalSourceFileList.Add(f, "Fail");
                                    }

                                }
                                _FileStatusList.Add(IPSLocalSourceFileList);
                                SFTPHelper.DeleteSFTPFile(infoIPS.LocalSuccessFilePath);

                                var LocalSuccessFileName = Path.GetFileName(infoIPS.LocalSuccessFilePath);
                                var LocalSuccessFilePath = Path.GetDirectoryName(infoIPS.LocalSuccessFilePath);

                                string[] AllLocalSuccessFiles = System.IO.Directory.GetFiles(LocalSuccessFilePath, "'" + LocalSuccessFileName + "'.*");
                                Dictionary<string, string> IPSLocalSuccessFileList = new Dictionary<string, string>();
                                foreach (string f in AllLocalSuccessFiles)
                                {
                                    try
                                    {
                                        System.IO.File.Delete(f);
                                        IPSLocalSuccessFileList.Add(f, "Success");
                                    }
                                    catch
                                    {
                                        IPSLocalSuccessFileList.Add(f, "Fail");
                                    }

                                }

                                _FileStatusList.Add(IPSLocalSuccessFileList);
                                SFTPHelper.DeleteSFTPFile(infoIPS.SFTPSuccessFilePath);

                                var LocalFailedFileName = Path.GetFileName(infoIPS.LocalFailedFilePath);
                                var LocalFailedFilePath = Path.GetDirectoryName(infoIPS.LocalFailedFilePath);

                                string[] AllLocalFailedFiles = System.IO.Directory.GetFiles(LocalFailedFilePath, "'" + LocalFailedFileName + "'.*");
                                Dictionary<string, string> IPLocalFailedFileList = new Dictionary<string, string>();
                                foreach (string f in AllLocalFailedFiles)
                                {
                                    try
                                    {
                                        System.IO.File.Delete(f);
                                        IPLocalFailedFileList.Add(f, "Success");
                                    }
                                    catch
                                    {
                                        IPLocalFailedFileList.Add(f, "Fail");
                                    }

                                }
                                _FileStatusList.Add(IPSLocalSuccessFileList);
                                SuccessIPS.Add(infoIPS);
                            }
                            catch (IOException)
                            {
                                FailIPS.Add(infoIPS);
                            }
                            SFTPHelper.DeleteSFTPFile(infoIPS.SFTPFailedFilePath);
                            dbContext.InboundProcessingSummaries.Remove(infoIPS);
                            dbContext.SaveChanges();

                        }
                    }

                    //GatewayDBContext newObj = new GatewayDBContext();
                    //List<OutboundFilesSummary> infoListForOFS = dbContext
                    //.Database.SqlQuery<OutboundFilesSummary>("select ofs.* from OutboundFilesSummaries ofs inner join OutboundProcessingSummaries ops on ofs.OutboundFileName = ops.OutboundFileName where ops.ProcessingStartedTime <'" + dtErrorsTill + "' ")
                    //.ToList();

                    var infoListForOFS = dbContext.OutboundFilesSummaries.Join(
                                                 dbContext.OutboundProcessingSummaries,
                                                ofs => new { ofs.OutboundFileName },
                                                ops => new { ops.OutboundFileName },
                                                (ofs, ops) => new { ofs, ops })
                                                .Where(o => o.ofs.OutboundFileName == o.ops.OutboundFileName
                                                            && o.ops.ProcessingStartedTime < date).Select(o => new { o.ofs.LocalFilePath, o.ofs.SFTPFilePath });
                  
                    GatewayDBContext contextDB = new GatewayDBContext();
                     if (infoListForOFS != null)
                    {
                        foreach (var infoOFS in infoListForOFS)
                        {
                            var infoList = contextDB.OutboundFilesSummaries.Where(x => x.LocalFilePath == infoOFS.LocalFilePath && x.SFTPFilePath == infoOFS.SFTPFilePath).FirstOrDefault();
                            try
                            {
                                var LocalFileName = Path.GetFileName(infoOFS.LocalFilePath);
                                var LocalFilePath = Path.GetDirectoryName(infoOFS.LocalFilePath);

                                string[] AllLocalFiles = System.IO.Directory.GetFiles(LocalFilePath, "'" + LocalFileName + "'.*");
                                Dictionary<string, string> OFSLocalFilesList = new Dictionary<string, string>();
                                foreach (string f in AllLocalFiles)
                                {
                                    try
                                    {
                                        System.IO.File.Delete(f);
                                        OFSLocalFilesList.Add(f, "Success");
                                    }
                                    catch
                                    {
                                        OFSLocalFilesList.Add(f, "Fail");
                                    }

                                }
                                _FileStatusList.Add(OFSLocalFilesList);
                                SuccessOFS.Add(infoList);
                            }
                            catch (IOException )
                            {
                                FailOFS.Add(infoList);
                            }

                            SFTPHelper.DeleteSFTPFile(infoOFS.SFTPFilePath);
                            contextDB.OutboundFilesSummaries.Remove(infoList);
                            contextDB.SaveChanges();
                        }
                    }

                    var infoListForOPS = dbContext.OutboundProcessingSummaries
                       .Where(x => x.ProcessingStartedTime < date).ToList();
                    if (infoListForOPS != null)
                    {
                        foreach (var infoOPS in infoListForOPS)
                        {
                            try
                            {
                                var LocalFileName = Path.GetFileName(infoOPS.LocalFilePath);
                                var LocalFilePath = Path.GetDirectoryName(infoOPS.LocalFilePath);

                                string[] AllLocalFiles = System.IO.Directory.GetFiles(LocalFilePath, "'" + LocalFileName + "'.*");
                                Dictionary<string, string> OPSLocalFilesList = new Dictionary<string, string>();
                               
                                foreach (string f in AllLocalFiles)
                                {
                                    try
                                    {
                                        System.IO.File.Delete(f);
                                        OPSLocalFilesList.Add(f, "Success");
                                    }
                                    catch
                                    {
                                        OPSLocalFilesList.Add(f, "Fail");
                                    }

                                }
                                SuccessOPS.Add(infoOPS);
                            }
                            catch (IOException )
                            {
                                FailOPS.Add(infoOPS);
                            }
                            SFTPHelper.DeleteSFTPFile(infoOPS.SFTPFilePath);
                            dbContext.OutboundProcessingSummaries.Remove(infoOPS);
                            dbContext.SaveChanges();
                        }
                    }
                    EmailGenerator emailGen = new EmailGenerator();
                    emailGen.DeleteProcessingSummaryMessage(SuccessIPS,FailIPS,SuccessOFS,FailOFS,SuccessOPS,FailOPS);
                }
               
                return true;
            }
            catch (Exception ex)
            {
                Globals.DBLogger.Error(String.Format("DeleteExecRecord: Error while executing : {0}", ex.Message), ex);
                return false;
            }
            finally
            {
                Globals.FlushLogBuffers();
            }
        }
