   public bool PurgeDataSummaryMessage(Dictionary<InboundProcessingSummary, Tuple<List<string>, List<string>>> inboundList, Dictionary<OutboundProcessingSummary, Tuple<List<string>, List<string>>> outboundList,DateTime tillDate)
        {
            try
            {
                lock (mailLock)
                {
                    using (GatewayDBContext dbContext = new EFLibrary.GatewayDBContext())
                    {
                        //Create email body
                        _sbBody.AppendLine("<p>Dear <strong>Team</strong>,</p>");
                        _sbBody.AppendLine("<p>Following is Purging Data summary of Inbound, Outbound and Outbound File</p>");

                        //Inbound Data Purging Summary
                        _sbBody.AppendLine("<br>");
                        _sbBody.AppendLine("<p><strong>Inbound Purge Data Summary</strong>:</p>");
                        _sbBody.AppendLine("<table>");
                        _sbBody.AppendLine("<tr><th>Entity</th><th>No of Files Delete</th><th>No of Files Problem Delete</th><th>Successfully Deleted  FileName</th><th>Failed In deleting FileName</th></tr>");
                        foreach (var inboundRecord in inboundList)
                        {
                            _sbBody.AppendFormat("<tr><td>{0}<td>", inboundRecord.Key.EntityID);
                            _sbBody.AppendFormat("<td>{0}</td>", inboundRecord.Value.Item1.Distinct().Count().ToString());
                            _sbBody.AppendFormat("<td>{0}</td>", inboundRecord.Value.Item2.Distinct().Count().ToString());
                            _sbBody.AppendFormat("<td>{0}", string.Join(",<br>", inboundRecord.Value.Item1.Distinct()));
                            _sbBody.AppendFormat("<td>{0}", string.Join(",<br>", inboundRecord.Value.Item2.Distinct()));
                            _sbBody.AppendLine("</tr>");
                        }
                        _sbBody.AppendLine("</table>");
                        _sbBody.AppendLine("<br>");

                        //Outbound Data Purging Summary
                        
                            _sbBody.AppendLine("<br>");
                            _sbBody.AppendLine("<p><strong>Outbound Purge Data Summary</strong>:</p>");
                            _sbBody.AppendLine("<table>");
                        _sbBody.AppendLine("<tr><th>Entity</th><th>No of Files Delete</th><th>No of Files Problem Delete</th><th>Successfully Deleted  FileName</th><th>Failed In deleting FileName</th></tr>");
                        foreach (var outboundRecord in outboundList)
                            {
                             _sbBody.AppendFormat("<tr><td>{0}<td>", outboundRecord.Key.EntityID);
                            _sbBody.AppendFormat("<td>{0}</td>", outboundRecord.Value.Item1.Distinct().Count().ToString());
                            _sbBody.AppendFormat("<td>{0}</td>", outboundRecord.Value.Item2.Distinct().Count().ToString());
                            _sbBody.AppendFormat("<td>{0}", string.Join(",<br>", outboundRecord.Value.Item1.Distinct()));
                            _sbBody.AppendFormat("<td>{0}", string.Join(",<br>", outboundRecord.Value.Item2.Distinct()));
                            _sbBody.AppendLine("</tr>");
                            }
                        
                        _sbBody.AppendLine("</table>");
                        _sbBody.AppendLine("<br>");
                        //Total Count
                        _sbBody.AppendLine(_emailFooter);
                        _message.Subject = $"Purging Data summary Date:{tillDate}";
                        //Set message field values                   
                        _message.BodyText = _sbBody.ToString();
                        _message.EmailType = "SummaryEmail";
                        //_message.EmailSubType = summaryType;
                        _message.CreatedBy = "Gateway Monitor";
                        //Save message
                        dbContext.SEEmailMessages.Add(_message);
                        dbContext.SaveChanges();
                        _message.To = string.Format("{0}", Globals.MailToInfo);
                    }
                    return true;
                }
            }
            catch (Exception ex)
            {
                Globals.DBLogger.Error(string.Format("PurgingDataSummaryMessage: Error while Sendmail {0}", ex.Message), ex);
                return false;
            }
        }
