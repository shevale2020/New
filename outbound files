using System;
using WinSCP;
using System.Linq;
using DNAPGateway.EFLibrary;
using System.Collections.Generic;
using System.IO;

namespace DNAPGateway.SFTPCommunicator
{
    public class OutboundFileSync
    {
        public static bool VerifySFTPOutboundFolders(string entityId = "")
        {
            bool bResult = false;
            Globals.DBLogger.Info("Checking/Creating SFTP Outbound Folders...");
            using (GatewayDBContext dbContext = new EFLibrary.GatewayDBContext())
            {
                using (SFTPHelper sftpHelper = new SFTPHelper())
                {
                    //Create root folders
                    sftpHelper.CreateSFTPFolder(Globals.SFTPOutboundRootFolder);
                    // Perform data access using the context 
                    List<OutboundEntity> entities = null;
                    if (string.IsNullOrWhiteSpace(entityId))
                    {
                        entities = dbContext.OutboundEntities.AsNoTracking().ToList();
                    }
                    else
                    {
                        entities = dbContext.OutboundEntities.AsNoTracking()
                            .Where(x => x.EntityID.Equals(entityId, StringComparison.OrdinalIgnoreCase)).ToList();
                    }
                    foreach (EFLibrary.OutboundEntity entity in entities)
                    {
                        try
                        {
                            // Connect
                            Globals.DBLogger.InfoFormat("Checking/Creating folders on SFTP for {0}", entity.EntityID);
                            sftpHelper.CreateSFTPFolder($"{Globals.SFTPOutboundRootFolder}{entity.EntityID}");
                            sftpHelper.CreateSFTPFolder($"{Globals.SFTPOutboundRootFolder}{entity.EntityID}/Success");
                            sftpHelper.CreateSFTPFolder($"{Globals.SFTPOutboundRootFolder}{entity.EntityID}/Failure");
                            Globals.DBLogger.InfoFormat("SFTP Folders Verified Successfully for {0}", entity.EntityID);
                            bResult = true;
                        }
                        catch (Exception ex)
                        {
                            Globals.DBLogger.Error(string.Format("Exception while creating SFTP folder for {0}. Error: {1}", entity.EntityID, ex.Message), ex);
                            bResult = false;
                        }
                    }
                }
                Globals.DBLogger.Info("Checked/Created SFTP Outbound Folders.");
                return bResult;
            }
        }
        public bool UploadOutboundFiles()
        {
            List<OutboundProcessingSummary> outboundSuccessList = new List<OutboundProcessingSummary>(),
                    outboundFailedList = new List<OutboundProcessingSummary>();
            Exception lastException = null;
            try
            {
                bool bResult = false;
                FileInfo fiSource;
                string strSFTPEntityFolder;
                Globals.DBLogger.Info("UploadOutboundFiles: Starting Upload Outbound Files...");

                using (GatewayDBContext dbContext = new EFLibrary.GatewayDBContext())
                {
                    List<OutboundProcessingSummary> outSummaries;
                    ////EXIT if there is nothing to upload
                    outSummaries = dbContext.OutboundProcessingSummaries.Where(x => !x.IsFileUploadedToSFTP
                            && x.ProcessingWorkstation == Environment.MachineName).ToList();
                    if (outSummaries.Count == 0)
                    {
                        Globals.DBLogger.Info("UploadOutboundFiles: Nothing to upload");
                        return true;
                    }
                    outboundFailedList = outSummaries;
                    //Download inbound files of all enabled entities
                    List<OutboundEntity> entities;
                    entities = dbContext.OutboundEntities.Where(x => x.IsEntitySyncEnabled == true).ToList();

                    //There is something to upload
                    using (SFTPHelper sftpHelper = new SFTPHelper())
                    {
                        TransferOperationResult transferResult = null, tempTransfer = null;
                        outboundFailedList = new List<OutboundProcessingSummary>();
                        //Run upload for all or selected entities
                        foreach (EFLibrary.OutboundEntity entity in entities)
                        {
                            //Verify outbound folders
                            OutboundFileSync.VerifySFTPOutboundFolders(entity.EntityID);
                            strSFTPEntityFolder = string.Format(@"{0}{1}/", Globals.SFTPOutboundRootFolder, entity.EntityID);
                            //Get the outbound summary records 
                            //i.e. No Summary record -> No Data upload
                            outSummaries = dbContext.OutboundProcessingSummaries
                                    .Where(x => !x.IsFileUploadedToSFTP && x.EntityID == entity.EntityID
                                        && x.ProcessingWorkstation == Environment.MachineName).ToList();

                            foreach (OutboundProcessingSummary summary in outSummaries)
                            {
                                // Upload Outbound files
                                fiSource = new FileInfo(summary.LocalFilePath);
                                // Start file Upload for success
                                bResult = sftpHelper.UploadLocalFile(summary.LocalFilePath, strSFTPEntityFolder + fiSource.Name, ref transferResult);
                                if (bResult)
                                {
                                    foreach (TransferEventArgs transfer in transferResult.Transfers)
                                    {
                                        Globals.DBLogger.InfoFormat("Transferred: {0} to {1}", transfer.FileName, transfer.Destination);
                                        //Calculate MD5 Checksum for local and SFTP file 2018-02-19
                                        summary.LocalFileChecksum = Globals.MD5Hash(summary.LocalFilePath);
                                        FileInfo tempFile = new FileInfo(Path.Combine(fiSource.DirectoryName, Guid.NewGuid().ToString()));
                                        if (sftpHelper.DownloadSFTPFile(transfer.Destination, tempFile.FullName, ref tempTransfer))
                                        {
                                            summary.SFTPFileChecksum = Globals.MD5Hash(tempFile.FullName);
                                            tempFile.Delete();
                                        }
                                        //Check if checksum matches
                                        if (summary.LocalFileChecksum.Equals(summary.SFTPFileChecksum))
                                        {
                                            //Set other attributes as checksum matches
                                            summary.SFTPFilePath = transfer.Destination;
                                            summary.IsFileUploadedToSFTP = true;
                                            summary.SFTPUploadTime = DateTime.Now;
                                            dbContext.SaveChanges();
                                            outboundSuccessList.Add(summary);
                                            bResult = true;
                                        }
                                        else
                                        {
                                            //move uploaded file to Failure
                                            outboundFailedList.Add(summary);
                                            lastException = new Exception("Checksum Mismatch in Local file and Uploaded File. File upload to SFTP will be retried again after some time.");
                                            sftpHelper.MoveOrUploadFile(transfer.Destination, (strSFTPEntityFolder + "Failure/" + fiSource.Name), summary.LocalFilePath);
                                            bResult = false;
                                        }
                                    }
                                    //Keep copy in Success folder as well as Parker programme is deleting file after processing
                                    bResult = sftpHelper.UploadLocalFile(summary.LocalFilePath, (strSFTPEntityFolder + "Success/" + fiSource.Name), ref transferResult);
                                }
                                else
                                {
                                    outboundFailedList.Add(summary);
                                    lastException = sftpHelper.LastException;
                                }
                            }
                        }
                    }
                }
                //Throw exception if any file upload failed
                if (outboundFailedList.Count > 0)
                {
                    throw new Exception("EXCEPTION during Outbound File Upload to SFTP.", lastException);
                }
                Globals.DBLogger.Info("UploadOutboundFiles: Transfer Completed.");
                return bResult;
            }
            catch (Exception ex)
            {
                Globals.DBLogger.Error(string.Format("UploadOutboundFiles Error: {0}", ex.Message), ex);
                return false;
            }
            finally
            {
                if (outboundFailedList.Count > 0)
                {
                    //Generate SFTP Upload Failure message
                    EmailGenerator emailGen = new EmailGenerator();
                    emailGen.GenerateOutboundSFTPErrorMessage(lastException.Message, lastException, outboundFailedList);
                }
                if (outboundSuccessList.Count > 0)
                {
                    //Generate SFTP Upload message
                    EmailGenerator emailGen = new EmailGenerator();
                    emailGen.GenerateOutboundSFTPMessage(outboundSuccessList);
                }
            }
        }


    }
}
