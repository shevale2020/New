USE [FAR]
GO
/****** Object:  StoredProcedure [dbo].[Proc_AddBulkInventory]    Script Date: 12/20/2018 11:46:01 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO





/*-- =============================================
-- Author:		Chetan Chaudhari
-- Create date: 13 july 2017
-- Description: Add Bulk Inventory 
 
 DECLARE @GoalSettingReportFilter InventoryDesktopDetailType
 insert into @GoalSettingReportFilter  (Vertical ,Country ,SupervisorId,RoleBand )
  VALUES ('Autoclaims','','','A') 
 exec [Proc_AddUpdateInventory]'','204430','','','1,3,4','','','','194500','','0','','','GoalSettingReport',@GoalSettingReportFilter 

 
 DECLARE @obj InventoryDesktopDetailType
 --,@Messag NVARCHAR(100)
 insert into @obj  ([DualHostName],[DeskID] ,[IPAddress],[Make],[ModelSize],[Processor],[RAM],[HardDisk],[DomainName],[SharedDedicated],[project],[Location1],[wing],[InstalledOperatingSystem],[PurchasedOS],[MSOffice] ,[OCSClient],[AcrobatReader],[Winzip],[Antivirus],[OtherSoftware],[WarrantyStart],[WarrantyEnd],[AgeSpend],[PhysicalVerification],[StockStatus],[bond],[Hostname],[SerialNumber],[TAGNumber])
  VALUES  ('DualHostName','DeskID' ,'IPAddress','Make','ModelSize','Processor','RAM','HardDisk','DomainName','SharedDedicated','project','Location1','wing','InstalledOperatingSystem','PurchasedOS','MSOffice' ,'OCSClient','AcrobatReader','Winzip','Antivirus','OtherSoftware','WarrantyStart','WarrantyEnd','AgeSpend','PhysicalVerification','StockStatus','bond','Hostname','SerialNumber','TAG1')
 exec [Proc_AddInventory] '3530000738','204430','idsf', 'loc',@obj
 --,@Messag OUTPUT
 PRINT @Messag

 select * from TD_Inventory
 select * from TD_InventoryCommonDetail
 select * from TD_InventoryDesktopDetail
 select * from TD_InventoryLaptopDetail
 select * from TD_InventoryNetworkDetail
 select * from TD_InventoryServerDetail
 select * from TD_InventoryTelecomDetail
 -- drop proc [Proc_AddBulkInventory]
 
-- =============================================*/
ALTER Proc [dbo].[Proc_AddBulkInventory] --'204430' ,'1,4' 
@EmplId varchar(50)=null,
@UserId int=0,
@RoleID varchar(50)=null,
@InventoryDesktopDetailType InventoryDesktopDetailType readonly,
@InventoryLaptopDetailType InventoryLaptopDetailType readonly,
@InventoryNetworkDetailType InventoryNetworkDetailType readonly,
@InventoryServerDetailType InventoryServerDetailType readonly,
@InventoryTelecomDetailType InventoryTelecomDetailType readonly

----Start - Infra Inventory P2 Changes----
,@InventoryInfraDetailType InventoryInfraDetailType readonly
----End - Infra Inventory P2 Changes----

--,@Msg NVARCHAR(MAX) OUTPUT
As
Begin
BEGIN TRANSACTION
 BEGIN TRY

print 'Add inventory'


declare  @Msg varchar(200)= ''
declare @flag bit=0
declare @DuplicateMain int=0
declare @Duplicate1 int=0
declare @Duplicate2 int=0
declare @Duplicate3 int=0
declare @Duplicate4 int=0
declare @Duplicate5 int=0

declare @AssetBookType nvarchar(500)=''
declare @Count1 int=0
declare @Count2 int=0
declare @Count3 int=0
declare @Count4 int=0
declare @Count5 int=0

----Start - Infra Inventory P2 Changes----
declare @Duplicate6 int=0
declare @Count6 int=0
----End - Infra Inventory P2 Changes----

declare @TagNumber nvarchar(max)

/****************************START: DESKTOP INSERTION ******************************************************************************************************************************************************/
--select * from @InventoryDesktopDetailType
--select * from TD_Inventory 


	if(exists(select 'X' from @InventoryDesktopDetailType invcommon join [TD_TAG] tag on invcommon.TagNumber =tag.TagNumber where tag.IsTagVoid=1))
	begin
	set @flag=1
	end

	if(exists(select 'X' from @InventoryLaptopDetailType invcommon join [TD_TAG] tag on invcommon.TagNumber =tag.TagNumber where tag.IsTagVoid=1))
	begin
	set @flag=1
	end

	if(exists(select 'X' from @InventoryNetworkDetailType invcommon join [TD_TAG] tag on invcommon.TagNumber =tag.TagNumber where tag.IsTagVoid=1))
	begin
	set @flag=1
	end

	if(exists(select 'X' from @InventoryServerDetailType invcommon join [TD_TAG] tag on invcommon.TagNumber =tag.TagNumber where tag.IsTagVoid=1))
	begin
	set @flag=1
	end

	if(exists(select 'X' from @InventoryTelecomDetailType invcommon join [TD_TAG] tag on invcommon.TagNumber =tag.TagNumber where tag.IsTagVoid=1))
	begin
	set @flag=1
	end

----Start - Infra Inventory P2 Changes----
	if(exists(select 'X' from @InventoryInfraDetailType invcommon join [TD_TAG] tag on invcommon.TagNumber =tag.TagNumber where tag.IsTagVoid=1))
	begin
	set @flag=1
	end
----End - Infra Inventory P2 Changes----

if(@flag =0)
begin -- flag start




declare @Expected_Qty as bigint;
declare @Actual_Qty as bigint;

declare @PoNumber  nvarchar(500)=null,@GRNNumber nvarchar(500)=null,@ItemCode  nvarchar(500)=null,@qty bigint=0


if(exists(select top 1 1 from  @InventoryDesktopDetailType ))
	begin
		
		print 'Inserting Inventory ... Desktop' 

		declare @desktopCnt int=1,@InventoryIDDesktop bigint=0


		--select @Count1=count(*) from @InventoryDesktopDetailType

		
declare @tempDC table (ID bigint  identity(1,1), [PoNumber]  nvarchar(500), [GRNNumber]   nvarchar(500),[ItemCode]  nvarchar(500),qty bigint)
declare @ct bigint=1,@actCnt bigint =0,@stdCnt bigint =0,@ActualInesrtCnt bigint =0
	insert into @tempDC
	select a.[PoNumber],a.[GRNNumber],a.[ItemCode]	,count(a.[PoNumber])from @InventoryDesktopDetailType a group by a.[PoNumber],a.[GRNNumber],a.[ItemCode]

--select * from @tempDC
	IF OBJECT_ID('tempdb..#InventoryDesktopDetailTempE') IS NOT NULL                                              
								  BEGIN                                              
									DROP TABLE #InventoryDesktopDetailTempE                                            
								  END

		create  TABLE #InventoryDesktopDetailTempE (	[PoNumber] [nvarchar](100) NULL,	[GRNNumber] [nvarchar](250) NULL,	[ItemCode] [nvarchar](250) NULL)

while (@ct<= (select count(*) from @tempDC))
	begin	
		-- 3
		select @PoNumber=PoNumber,@GRNNumber=GRNNumber,@ItemCode=ItemCode ,@qty=qty from @tempDC where ID=@ct
		
		--2

		set  @AssetBookType=(select top 1 [BOOK_TYPE_CODE] from [WNS_PO_DETAILS_V] (nolock) where PONumber=@PoNumber)


		if(exists (select top 1 1  from TD_Inventory (nolock) where PoNumber= @PONumber and GRNNumber=@GRNNumber and ItemCode=@ItemCode and  InventoryTypeID=1 group by PoNumber,GRNNumber,ItemCode))
			set @actCnt=(select count(*)  from TD_Inventory (nolock) where PoNumber= @PONumber and GRNNumber=@GRNNumber and ItemCode=@ItemCode and  InventoryTypeID=1 group by PoNumber,GRNNumber,ItemCode)
		
		

		--set @stdCnt=(select   sum((cast( CAST(LTRIM(RTRIM(QUANTITY)) as decimal) as bigint )) ) from WNS_RCV_TRANSACTIONS (nolock) 
		-- where PONumber= @PoNumber and GRNNumber=@GRNNumber and ItemCode=@ItemCode 
		--  group by PONumber,GRNNumber,ItemCode)

		   set @stdCnt=(select  sum((cast(tag_count as bigint)* cast( cast (b.QUANTITY as decimal) as bigint)))--(select  sum((cast(tag_count as bigint)* cast(b.QUANTITY as bigint)))
 
			 --sum((cast( CAST(LTRIM(RTRIM(QUANTITY)) as decimal) as bigint )) ) 
 
			from WNS_PO_DETAILS_V(nolock) a inner join WNS_RCV_TRANSACTIONS(nolock) b
			on a.PONumber=b.PONumber and a.ItemCode=b.ItemCode 
			 and a.LineNum=b.PO_LINE_NUM
			inner join WNS_ITEM_MSTER_V (nolock)c on c.ItemCode=a.ItemCode and c.INVENTORY_ORG=a.INVENTORY_ORG
			where 

			a.PONumber=@PoNumber  and ( GRNNumber=@GRNNumber )
			and INV_TYPE='Desktop' 
			 and b.QUANTITY is not null)


		  print 'count'
		  print cast(@qty as varchar(100))
		   print cast(@actCnt as varchar(100))
		    print cast(@stdCnt as varchar(100))

		set @ActualInesrtCnt=@stdCnt-@actCnt

		  -- print cast(@ActualInesrtCnt as varchar(100))
		--Check Duplicate Start

		IF OBJECT_ID('tempdb..#InventoryDesktopDetailTemp') IS NOT NULL                                              
								  BEGIN                                              
									DROP TABLE #InventoryDesktopDetailTemp                                            
								  END

		create  TABLE #InventoryDesktopDetailTemp (
	[ID] [bigint] IDENTITY(1,1) NOT NULL,	
	[PoNumber] [nvarchar](100) NULL,
	[PoId] [nvarchar](250) NULL,
	[PoDate] [datetime] NULL,
	[GRNNumber] [nvarchar](250) NULL,
	[GRNDate] [datetime] NULL,
	[ItemCode] [nvarchar](250) NULL,
	[TAGCount] [nvarchar](250) NULL,
	[MajorCategory] [nvarchar](500) NULL,
	[MinorCategory] [nvarchar](500) NULL,
	[MinorSubCategory] [nvarchar](500) NULL,
	[Description] [nvarchar](3000) NULL,
	[ManufacturerName] [nvarchar](500) NULL,
	[TaggableTypeID] [nvarchar](100) NULL,
	[AssetTypeID] [nvarchar](100) NULL,
	[ExpTypeID] [nvarchar](100) NULL,
	[DualHostName] [nvarchar](100) NULL,
	[DeskID] [nvarchar](100) NULL,
	[IPAddress] [nvarchar](100) NULL,
	[MakeDesktopID] [nvarchar](100) NULL,
	[ModelSize] [nvarchar](100) NULL,
	[Processor] [nvarchar](100) NULL,
	[RAM] [nvarchar](100) NULL,
	[HardDisk] [nvarchar](100) NULL,
	[DomainName] [nvarchar](100) NULL,
	[SharedDedicated] [nvarchar](100) NULL,
	[project] [nvarchar](100) NULL,
	[Location1] [nvarchar](100) NULL,
	[wing] [nvarchar](100) NULL,
	[InstalledOperatingSystem] [nvarchar](100) NULL,
	[PurchasedOS] [nvarchar](100) NULL,
	[MSOffice] [nvarchar](100) NULL,
	[OCSClient] [nvarchar](100) NULL,
	[AcrobatReader] [nvarchar](100) NULL,
	[Winzip] [nvarchar](100) NULL,
	[Antivirus] [nvarchar](100) NULL,
	[OtherSoftware] [nvarchar](100) NULL,
	[WarrantyStart] [nvarchar](100) NULL, 
	[WarrantyEnd] [nvarchar](100) NULL,  
	--[WarrantyStart] [datetime] NULL, --Date Format
	--[WarrantyEnd] [datetime] NULL, --Date Format
	[AgeSpend] [nvarchar](100) NULL,
	[PhysicalVerification] [nvarchar](100) NULL,
	[StockStatusDesktopID] [nvarchar](100) NULL,
	[bond] [nvarchar](100) NULL,
	[Hostname] [nvarchar](100) NULL,
	[AllocationTypeID] [nvarchar](100) NULL,
	[SystemAssetID] [nvarchar](100) NULL,
	[SerialNumber] [nvarchar](100) NULL,
	TAGNumber  [nvarchar](100) NULL
	,Location [nvarchar](500) NULL 
	,IsAdd bit null
	,error nvarchar(max),[SubLocation] [nvarchar](1000)  NULL,
	[SubMinorCategory] [nvarchar](100) NULL,
	[PropertyCode] [nvarchar](10) NULL,
	[DateOfAcquisition][nvarchar](100) NULL,
	[Remark] [nvarchar](max) NULL)

		insert into #InventoryDesktopDetailTemp
		select 
		temp.[PoNumber] ,p.PoId,cast( POCreationDate as datetime) [PoDate]      ,temp.[GRNNumber]      ,cast( R.GRNDate as datetime) [GRNDate] 
      ,P.ItemCode      ,I.TAG_COUNT      ,I.MAJOR_CATEGORY      ,I.MINOR_CATEGORY	      ,[MinorSubCategory]      ,[Description]     
	 ,P.VendorName      ,(select top 1 pmval.Parametervalueid from [TM_Parameter](nolock) pm inner join [TM_ParameterValue] pmval 
on pm.parameterid=pmval.parameterid
Where pm.parameterdescr='Taggable Type' and pmval.parametervalue= [TaggableTypeID]) ---
      ,(select top 1 pmval.Parametervalueid from [TM_Parameter](nolock) pm inner join [TM_ParameterValue] pmval 
on pm.parameterid=pmval.parameterid
Where pm.parameterdescr='Asset Type' and pmval.parametervalue= [AssetTypeID])  ---
      ,(select top 1 pmval.Parametervalueid from [TM_Parameter](nolock) pm inner join [TM_ParameterValue] pmval 
on pm.parameterid=pmval.parameterid
Where pm.parameterdescr='ExpType' and pmval.parametervalue= [ExpTypeID])  --
	 -- ,[DualHostName],[DeskID] ,[IPAddress],[MakeDesktopID],[ModelSize],[Processor],[RAM],[HardDisk],[DomainName],[SharedDedicated],[project],[Location1],[wing],[InstalledOperatingSystem],[PurchasedOS],[MSOffice] ,[OCSClient],[AcrobatReader],[Winzip],[Antivirus],[OtherSoftware],[WarrantyStart],[WarrantyEnd],[AgeSpend],[PhysicalVerification],[StockStatusDesktopID],[bond],[Hostname],[SerialNumber],TAGNumber		
	  ,[DualHostName]
      ,[DeskID]
      ,[IPAddress]
      ,(select top 1 pmval.Parametervalueid from [TM_Parameter] (nolock)pm inner join [TM_ParameterValue] pmval 
on pm.parameterid=pmval.parameterid
Where pm.parameterdescr='MakeDesktop' and pmval.parametervalue= [MakeDesktopID]) --
      ,[ModelSize]
      ,[Processor]
      ,[RAM]
      ,[HardDisk]
      ,[DomainName]
--      ,(select pmval.Parametervalueid from [TM_Parameter](nolock) pm inner join [TM_ParameterValue] pmval 
--on pm.parameterid=pmval.parameterid
--Where pm.parameterdescr='SharedDedicatedDesktop' and pmval.parametervalue=[SharedDedicated])

      ,case when [SharedDedicated] is null or  [SharedDedicated]='' then null
	   when [SharedDedicated] is not null or [SharedDedicated]<> '' then case when (select top 1 pmval.Parametervalueid from [TM_Parameter](nolock) pm inner join [TM_ParameterValue] pmval 
                                                                                    on pm.parameterid=pmval.parameterid
                                                                                    Where pm.parameterdescr='SharedDedicatedDesktop' and pmval.parametervalue=[SharedDedicated]) is null then 0
																					else (select top 1 pmval.Parametervalueid from [TM_Parameter](nolock) pm inner join [TM_ParameterValue] pmval 
                                                                                    on pm.parameterid=pmval.parameterid
                                                                                    Where pm.parameterdescr='SharedDedicatedDesktop' and pmval.parametervalue=[SharedDedicated]) end end as SharedDedicated


      ,[project]      ,[Location1]      ,[wing]      ,[InstalledOperatingSystem]      ,[PurchasedOS]      ,[MSOffice]      ,[OCSClient]      ,[AcrobatReader]      ,[Winzip]      ,[Antivirus]      ,[OtherSoftware]     
	   --,[WarrantyStart]      --Date Format
	   --,[WarrantyEnd]      --Date Format
	   ,case when [WarrantyStart]='' then null 
		     when [WarrantyStart]<>'' then (case when ISDATE([WarrantyStart]) =1 then cast( [WarrantyStart] as datetime) else '1900-01-01' end) end    [WarrantyStart] --Date Format
       ,case when [WarrantyEnd]='' then null
		     when [WarrantyEnd]<>'' then (case when ISDATE([WarrantyEnd]) =1 then cast( [WarrantyEnd] as datetime) else '1900-01-01' end) end    [WarrantyEnd] --Date Format
	   --,[AgeSpend]   
	    ,case when [WarrantyStart]='' then null 
		     when [WarrantyStart]<>'' then (case when ISDATE([WarrantyStart]) =1  then cast((DATEDIFF(m, [WarrantyStart], GETDATE())/12) as varchar) + ' years ' + cast((DATEDIFF(m, [WarrantyStart], GETDATE())%12) as varchar) + ' months'  else null end) end    [AgeSpend] --Date Format        
	   ,[PhysicalVerification]
--      ,(select pmval.Parametervalueid from [TM_Parameter] (nolock)pm inner join [TM_ParameterValue] pmval 
--on pm.parameterid=pmval.parameterid
--Where pm.parameterdescr='stockstatus' and pmval.parametervalue=[StockStatusDesktopID]) --

      ,case when [StockStatusDesktopID] is null or  [StockStatusDesktopID]='' then null
	  when [StockStatusDesktopID] is not null or [StockStatusDesktopID]<> '' then case when (select top 1 pmval.Parametervalueid from [TM_Parameter] (nolock)pm inner join [TM_ParameterValue] pmval 
                                                                                   on pm.parameterid=pmval.parameterid
                                                                                   Where pm.parameterdescr='stockstatus' and pmval.parametervalue=[StockStatusDesktopID]) is null then 0 --
																				   else 
																				   (select top 1 pmval.Parametervalueid from [TM_Parameter] (nolock)pm inner join [TM_ParameterValue] pmval 
                                                                                   on pm.parameterid=pmval.parameterid
                                                                                   Where pm.parameterdescr='stockstatus' and pmval.parametervalue=[StockStatusDesktopID]) end end as StockStatusDesktopID

      ,[bond]
      ,[Hostname]
--      ,(select pmval.Parametervalueid from [TM_Parameter] (nolock)pm inner join [TM_ParameterValue] pmval 
--on pm.parameterid=pmval.parameterid
--Where pm.parameterdescr='AllocationType' and pmval.parametervalue=[AllocationTypeID])


      ,case when [AllocationTypeID] is null or  [AllocationTypeID]='' then null
	   when [AllocationTypeID] is not null or [AllocationTypeID]<> '' then case when (select top 1 pmval.Parametervalueid from [TM_Parameter] (nolock)pm inner join [TM_ParameterValue] pmval 
                                                                            on pm.parameterid=pmval.parameterid
                                                                            Where pm.parameterdescr='AllocationType' and pmval.parametervalue=[AllocationTypeID]) is null then 0
																			else  (select top 1 pmval.Parametervalueid from [TM_Parameter] (nolock)pm inner join [TM_ParameterValue] pmval 
                                                                            on pm.parameterid=pmval.parameterid
                                                                            Where pm.parameterdescr='AllocationType' and pmval.parametervalue=[AllocationTypeID]) end end as    AllocationTypeID   

	  ,SystemAssetID      ,[SerialNumber]	  ,TAGNumber ,I.INVENTORY_ORG	  ,null,null,SubLocation,

	  --(select id from TM_SubMinorCategory  (nolock) where ltrim(rtrim(name))=ltrim(rtrim(temp.SubMinorCategory))) 
	  	  case when temp.SubMinorCategory is null or temp.SubMinorCategory='' then null 
	        when temp.SubMinorCategory is not null or  temp.SubMinorCategory<>'' then case when (select id from TM_SubMinorCategory  (nolock) where ltrim(rtrim(name))=ltrim(rtrim(temp.SubMinorCategory))) is null then 0 else (select id from TM_SubMinorCategory  (nolock) where ltrim(rtrim(name))=ltrim(rtrim(temp.SubMinorCategory))) end end as SubMinorCategory
			,temp.[PropertyCode],temp.[DateOfAcquisition],temp.[Remark]
		from @InventoryDesktopDetailType temp inner join WNS_PO_DETAILS_V (nolock)P on temp.PoNumber=P.PoNumber and temp.ItemCode=P.ItemCode
	inner join WNS_ITEM_MSTER_V (nolock)I on temp.ItemCode=I.ItemCode and P.INVENTORY_ORG=I.INVENTORY_ORG
	inner join WNS_RCV_TRANSACTIONS (nolock) R on temp.PoNumber=R.PoNumber  and temp.ItemCode=R.ItemCode -- added by swati
	 and temp.GRNNumber=R.GRNNumber ----8000049234
	----commented code for Ticket Number --8000049234
	
	--inner join [ufnGetCategoryLocation](@EmplId,@UserId,@RoleID) fC on  fC.MajorCategeory = (case when fC.MajorCategeory='All' then fC.MajorCategeory else temp.MajorCategory end ) 
 --   inner join [ufnGetCategoryLocation](@EmplId,@UserId,@RoleID) fL on fL.Location= (case when fL.Location='All' then  fL.Location else temp.Location end ) 

	 where temp.PoNumber= @PONumber and temp.GRNNumber=@GRNNumber and temp.ItemCode=@ItemCode

	----Added code for Ticket Number --8000049234
	 and temp.MajorCategory in (select case MajorCategeory when 'ALL' then temp.MajorCategory else MajorCategeory end  from [ufnGetCategoryLocation](@EmplId,@UserId,@RoleID))
	 and temp.Location in (select case Location when 'ALL' then temp.Location else Location end  from [ufnGetCategoryLocation](@EmplId,@UserId,@RoleID))
		
		--select * from #InventoryDesktopDetailTemp

		if(exists(select top 1 1 from #InventoryDesktopDetailTemp))
		begin

		        


				update #InventoryDesktopDetailTemp set error=isnull(error,'')+',Enter valid Taggable Type' where TaggableTypeID is null
				update #InventoryDesktopDetailTemp set error=isnull(error,'')+',Enter valid Asset Type' where AssetTypeID is null
				update #InventoryDesktopDetailTemp set error=isnull(error,'')+',Enter valid Exp Type' where ExpTypeID is null
				update #InventoryDesktopDetailTemp set error=isnull(error,'')+',Enter valid Make Desktop' where MakeDesktopID is null
				update #InventoryDesktopDetailTemp set error=isnull(error,'')+',Enter valid Shared Dedicated' where SharedDedicated =0 --Comment
				update #InventoryDesktopDetailTemp set error=isnull(error,'')+',Enter valid Stock Status Desktop' where StockStatusDesktopID =0
				update #InventoryDesktopDetailTemp set error=isnull(error,'')+',Enter valid Allocation Type' where AllocationTypeID =0

				update #InventoryDesktopDetailTemp set error=isnull(error,'')+' ,Warranty Start date Should be mm/dd/yyyy format' where [WarrantyStart] is not null  and convert(nvarchar(50),[WarrantyStart],111)='Jan  1 1900 12:00AM'
				update #InventoryDesktopDetailTemp set error=isnull(error,'')+' ,Warranty End date Should be mm/dd/yyyy format' where [WarrantyEnd] is not null   and convert(nvarchar(50),[WarrantyEnd],111)='Jan  1 1900 12:00AM'

				update #InventoryDesktopDetailTemp set error=isnull(error,'')+',Enter Valid Sub Minor Category' where SubMinorCategory =0	
				update 	#InventoryDesktopDetailTemp set error=(case when isdate( [PoDate])=0 then  isnull(error,'')+',PO Date mm/dd/yyyy format' end )
		        
				--update #InventoryDesktopDetailTemp set error=case --when [WarrantyStart] is null then isnull(error,'')+' ,Warranty Start date Should be mm/dd/yyyy format'
				--                                                  when [WarrantyStart] is not null then (case when ISDATE([WarrantyStart]) =1 and convert(nvarchar(50),[WarrantyStart],111)<>'Jan  1 1900 12:00AM' then null else isnull(error,'')+' ,Warranty Start date Should be mm/dd/yyyy format' end) end  --Date Format	

				--update #InventoryDesktopDetailTemp set error=case --when [WarrantyEnd] is null then isnull(error,'')+' ,Warranty End date Should be mm/dd/yyyy format'
				                                                  --when [WarrantyEnd] is not null then (case when ISDATE([WarrantyEnd]) =1  and convert(nvarchar(50),[WarrantyEnd],111)<>'Jan  1 1900 12:00AM' then null else isnull(error,'')+' ,Warranty End date Should be mm/dd/yyyy format' end) end  --Date Format		
				declare @Innercnt bigint =1
		
				while (@Innercnt<= @qty)
				begin --- inner while start

		----Duplicate Tag Number checking----
		select @TagNumber=TAGNumber from #InventoryDesktopDetailTemp where ID=@Innercnt
		----Duplicate Tag Number checking ----

				print '@ActualInesrtCnt'
				print cast(@ActualInesrtCnt as varchar(100))
				if(@Innercnt <= @ActualInesrtCnt)
				begin 

			
			----Duplicate Tag Number checking----

		if(exists ( select 'X' FROM TD_InventoryCommonDetail WHERE TagNumber= @TagNumber))
			begin
			  update #InventoryDesktopDetailTemp set error='Tag Number already exist' where ID=@Innercnt
			end

         ----Duplicate Tag Number checking---- 

				  print 'row by row insertion'		  
							if(exists(select top 1 1 from #InventoryDesktopDetailTemp where   ID=@Innercnt and error is null))
																																							begin
								print 'without error row procesing'
								insert into TD_Inventory( [PoNumber],[PoId],[PoDate],[GRNNumber],[GRNDate],[ItemCode],[TAGCount],[MajorCategory],[MinorCategory],[MinorSubCategory],[Description],[ManufacturerName],[TaggableTypeID],[AssetTypeID],[ExpTypeID],[InventoryTypeID],RecCreatedBy, RecCreatedDate)
								select [PoNumber],[PoId],[PoDate],[GRNNumber],[GRNDate],[ItemCode],[TAGCount],[MajorCategory],[MinorCategory],[MinorSubCategory],[Description],[ManufacturerName],[TaggableTypeID],[AssetTypeID],[ExpTypeID],1,@EmplId ,GETDATE() 
								 from #InventoryDesktopDetailTemp where   ID=@Innercnt

								set @InventoryIDDesktop=@@IDENTITY

								insert into TD_InventoryDesktopDetail(InventoryID,[DualHostName] ,[DeskID],[IPAddress],[MakeDesktopID],[ModelSize],[Processor],[RAM],[HardDisk],[DomainName],[SharedDedicated],[project],[Location1],[wing],[InstalledOperatingSystem],[PurchasedOS],[MSOffice],[OCSClient],[AcrobatReader],[Winzip],[Antivirus],[OtherSoftware],[WarrantyStart],[WarrantyEnd],[AgeSpend],[PhysicalVerification],[StockStatusDesktopID],[bond],[Hostname],[AllocationTypeID],[SystemAssetID],[SerialNumber],RecCreatedBy,RecCreatedDate,SubLocation,SubMinorCategory)
								select @InventoryIDDesktop,	[DualHostName],[DeskID],[IPAddress],[MakeDesktopID],[ModelSize],[Processor],[RAM],[HardDisk]
										,[DomainName],[SharedDedicated],[project],[Location1],[wing]  ,[InstalledOperatingSystem],[PurchasedOS],[MSOffice],[OCSClient]	,[AcrobatReader],[Winzip],[Antivirus],[OtherSoftware]
										,cast ([WarrantyStart] as datetime) [WarrantyStart],cast ([WarrantyEnd] as datetime) [WarrantyEnd],[AgeSpend],[PhysicalVerification],[StockStatusDesktopID],[bond],[Hostname],[AllocationTypeID],[SystemAssetID]				,[SerialNumber],@EmplId ,GETDATE(), SubLocation,SubMinorCategory
							   from #InventoryDesktopDetailTemp where   ID=@Innercnt

								insert into TD_InventoryCommonDetail([InventoryID] ,	[AssetModule] ,	[TAGNumber],SerialNumber,	[Location],RecCreatedBy,RecCreatedDate ,BOOK_TYPE_CODE,Remark,[PropertyCode],[DateOfAcquisition])
								select @InventoryIDDesktop,'75',TAGNumber,SerialNumber,Location,@EmplId ,GETDATE() ,@AssetBookType ,Remark,[PropertyCode],[DateOfAcquisition] from #InventoryDesktopDetailTemp where   ID=@Innercnt
		
								--set @Msg='Data Save Successfully.'
								set @Msg='File is uploaded successfully.'
					end					
				end
				else
				begin
							 print 'Update error for duplicate'
							 update #InventoryDesktopDetailTemp set error='data already exists' where ID=@Innercnt	
				end

	
				set @Innercnt=@Innercnt+1
				end --- inner while end

		end
		else
		begin

		print 'IN PO, GRN and ITEMCODE error'

		insert into #InventoryDesktopDetailTempE 
		select 	[PoNumber] ,	[GRNNumber] ,	[ItemCode]   from @InventoryDesktopDetailType   where PoNumber= @PONumber and GRNNumber=@GRNNumber and ItemCode=@ItemCode

	--	insert into #InventoryDesktopDetailTemp([PoNumber] ,	[PoId] ,	[PoDate] ,	[GRNNumber] ,	[GRNDate] ,	[ItemCode] ,	[TAGCount] ,	[MajorCategory] ,	[MinorCategory] ,	[MinorSubCategory] ,	[Description] ,	[ManufacturerName] ,	[TaggableTypeID] ,	[AssetTypeID] ,	[ExpTypeID] ,	[DualHostName] ,	[DeskID] ,	[IPAddress] ,	[MakeDesktopID] ,	[ModelSize] ,	[Processor] ,	[RAM] ,	[HardDisk] ,	[DomainName] ,	[SharedDedicated] ,	[project] ,	[Location1] ,	[wing] ,	[InstalledOperatingSystem] ,	[PurchasedOS] ,	[MSOffice] ,	[OCSClient] ,	[AcrobatReader] ,	[Winzip] ,
	--[Antivirus] ,	[OtherSoftware] ,	[WarrantyStart] ,	[WarrantyEnd] ,	[AgeSpend] ,	[PhysicalVerification] ,	[StockStatusDesktopID] ,	[bond] ,	[Hostname] ,	[AllocationTypeID] ,	[SystemAssetID] ,	[SerialNumber] ,	TAGNumber  
	--,Location ) 
	--	select 
	--	[PoNumber] ,	[PoId] ,	[PoDate] ,	[GRNNumber] ,	[GRNDate] ,	[ItemCode] ,	[TAGCount] ,	[MajorCategory] ,	[MinorCategory] ,	[MinorSubCategory] ,	[Description] ,	[ManufacturerName] ,	[TaggableTypeID] ,	[AssetTypeID] ,	[ExpTypeID] ,	[DualHostName] ,	[DeskID] ,	[IPAddress] ,	[MakeDesktopID] ,	[ModelSize] ,	[Processor] ,	[RAM] ,	[HardDisk] ,	[DomainName] ,	[SharedDedicated] ,	[project] ,	[Location1] ,	[wing] ,	[InstalledOperatingSystem] ,	[PurchasedOS] ,	[MSOffice] ,	[OCSClient] ,	[AcrobatReader] ,	[Winzip] ,
	--[Antivirus] ,	[OtherSoftware] ,	[WarrantyStart] ,	[WarrantyEnd] ,	[AgeSpend] ,	[PhysicalVerification] ,	[StockStatusDesktopID] ,	[bond] ,	[Hostname] ,	[AllocationTypeID] ,	[SystemAssetID] ,	[SerialNumber] ,	TAGNumber  	,Location  	
	--  from @InventoryDesktopDetailType   where PoNumber= @PONumber and GRNNumber=@GRNNumber and ItemCode=@ItemCode
		
		
	--	update #InventoryDesktopDetailTemp set error='data not found for PO ,GRN and Item code/PO not mapped to User'  where PoNumber= @PONumber and GRNNumber=@GRNNumber and ItemCode=@ItemCode
		 
		 
		end

set @ct=@ct+1
end


	--insert into #InventoryDesktopDetailTemp([PoNumber] ,	[PoId] ,	[PoDate] ,	[GRNNumber] ,	[GRNDate] ,	[ItemCode] ,	[TAGCount] ,	[MajorCategory] ,	[MinorCategory] ,	[MinorSubCategory] ,	[Description] ,	[ManufacturerName] ,	[TaggableTypeID] ,	[AssetTypeID] ,	[ExpTypeID] ,	[DualHostName] ,	[DeskID] ,	[IPAddress] ,	[MakeDesktopID] ,	[ModelSize] ,	[Processor] ,	[RAM] ,	[HardDisk] ,	[DomainName] ,	[SharedDedicated] ,	[project] ,	[Location1] ,	[wing] ,	[InstalledOperatingSystem] ,	[PurchasedOS] ,	[MSOffice] ,	[OCSClient] ,	[AcrobatReader] ,	[Winzip] ,
	--[Antivirus] ,	[OtherSoftware] ,	[WarrantyStart] ,	[WarrantyEnd] ,	[AgeSpend] ,	[PhysicalVerification] ,	[StockStatusDesktopID] ,	[bond] ,	[Hostname] ,	[AllocationTypeID] ,	[SystemAssetID] ,	[SerialNumber] ,	TAGNumber  
	--,Location,error ) 
	--	select 
	--	a.[PoNumber] ,	[PoId] ,[PoDate] ,	a.[GRNNumber] ,	[GRNDate] ,	a.[ItemCode] ,	[TAGCount] ,	[MajorCategory] ,	[MinorCategory] ,	[MinorSubCategory] ,	[Description] ,	[ManufacturerName] ,	[TaggableTypeID] ,	[AssetTypeID] ,	[ExpTypeID] ,	[DualHostName] ,	[DeskID] ,	[IPAddress] ,	[MakeDesktopID] ,	[ModelSize] ,	[Processor] ,	[RAM] ,	[HardDisk] ,	[DomainName] ,	[SharedDedicated] ,	[project] ,	[Location1] ,	[wing] ,	[InstalledOperatingSystem] ,	[PurchasedOS] ,	[MSOffice] ,	[OCSClient] ,	[AcrobatReader] ,	[Winzip] ,
	--[Antivirus] ,	[OtherSoftware] ,	[WarrantyStart] ,	[WarrantyEnd] ,	[AgeSpend] ,	[PhysicalVerification] ,	[StockStatusDesktopID] ,	[bond] ,	[Hostname] ,	[AllocationTypeID] ,	[SystemAssetID] ,	[SerialNumber] ,	TAGNumber  	,Location  	
	--,'data not found for PO ,GRN and Item code/PO not mapped to User'
	--  from @InventoryDesktopDetailType a inner join #InventoryDesktopDetailTempE b on a.PoNumber= b.PONumber and a.GRNNumber=b.GRNNumber and a.ItemCode=b.ItemCode
		
		
			insert into #InventoryDesktopDetailTemp([PoNumber] ,	[PoId] ,	[PoDate] ,	[GRNNumber] ,	[GRNDate] ,	[ItemCode] ,	[TAGCount] ,	[MajorCategory] ,	[MinorCategory] ,	[MinorSubCategory] ,	[Description] ,	[ManufacturerName] ,	[TaggableTypeID] ,	[AssetTypeID] ,	[ExpTypeID] ,	[DualHostName] ,	[DeskID] ,	[IPAddress] ,	[MakeDesktopID] ,	[ModelSize] ,	[Processor] ,	[RAM] ,	[HardDisk] ,	[DomainName] ,	[SharedDedicated] ,	[project] ,	[Location1] ,	[wing] ,	[InstalledOperatingSystem] ,	[PurchasedOS] ,	[MSOffice] ,	[OCSClient] ,	[AcrobatReader] ,	[Winzip] ,
	[Antivirus] ,	[OtherSoftware] ,	[WarrantyStart] ,	[WarrantyEnd] ,	[AgeSpend] ,	[PhysicalVerification] ,	[StockStatusDesktopID] ,	[bond] ,	[Hostname] ,	[AllocationTypeID] ,	[SystemAssetID] ,	[SerialNumber] ,	TAGNumber  
	,Location,SubLocation,SubMinorCategory,error )
	 
				select 
		a.[PoNumber] ,	[PoId] ,
		--[PoDate] ,
		case when isdate( [PoDate])=0 then convert(nvarchar(100), [PoDate], 101) else [PoDate] end,	
		a.[GRNNumber] ,	[GRNDate] ,	a.[ItemCode] ,	[TAGCount] ,	[MajorCategory] ,	[MinorCategory] ,	[MinorSubCategory] ,	[Description] ,	[ManufacturerName] ,	
		(select top 1 pmval.Parametervalueid from [TM_Parameter](nolock) pm inner join [TM_ParameterValue] pmval 
on pm.parameterid=pmval.parameterid
Where pm.parameterdescr='Taggable Type' and pmval.parametervalue= a.[TaggableTypeID]) [TaggableTypeID] 
		,	(select top 1 pmval.Parametervalueid from [TM_Parameter](nolock) pm inner join [TM_ParameterValue] pmval 
on pm.parameterid=pmval.parameterid
Where pm.parameterdescr='Asset Type' and pmval.parametervalue= a.[AssetTypeID]) as [AssetTypeID] 
		,	(select top 1 pmval.Parametervalueid from [TM_Parameter](nolock) pm inner join [TM_ParameterValue] pmval 
on pm.parameterid=pmval.parameterid
Where pm.parameterdescr='ExpType' and pmval.parametervalue= a.[ExpTypeID]) as [ExpTypeID] ,	[DualHostName] ,	[DeskID] ,	[IPAddress] ,	
(select top 1 pmval.Parametervalueid from [TM_Parameter] (nolock)pm inner join [TM_ParameterValue] pmval 
on pm.parameterid=pmval.parameterid
Where pm.parameterdescr='MakeDesktop' and pmval.parametervalue= a.[MakeDesktopID]) as [MakeDesktopID] ,	[ModelSize] ,	[Processor] ,	[RAM] ,	[HardDisk] ,	[DomainName] ,	
(select top 1 pmval.Parametervalueid from [TM_Parameter](nolock) pm inner join [TM_ParameterValue] pmval on pm.parameterid=pmval.parameterid
Where pm.parameterdescr='SharedDedicatedDesktop' and pmval.parametervalue=a.[SharedDedicated]) as [SharedDedicated] 
,	[project] ,	[Location1] ,	[wing] ,	[InstalledOperatingSystem] ,	[PurchasedOS] ,	[MSOffice] ,	[OCSClient] ,	[AcrobatReader] ,	[Winzip] ,
	[Antivirus] ,	[OtherSoftware] ,	[WarrantyStart] ,	[WarrantyEnd] ,	[AgeSpend] ,	[PhysicalVerification] ,	
	(select top 1 pmval.Parametervalueid from [TM_Parameter] (nolock)pm inner join [TM_ParameterValue] pmval 
                                                                                   on pm.parameterid=pmval.parameterid
                                                                                   Where pm.parameterdescr='stockstatus' and pmval.parametervalue=a.[StockStatusDesktopID]) as [StockStatusDesktopID] 
	,	[bond] ,	[Hostname] ,	
	(select top 1 pmval.Parametervalueid from [TM_Parameter] (nolock)pm inner join [TM_ParameterValue] pmval 
                                                                            on pm.parameterid=pmval.parameterid
                                                                            Where pm.parameterdescr='AllocationType' and pmval.parametervalue=a.[AllocationTypeID]) as [AllocationTypeID] ,	[SystemAssetID] ,	[SerialNumber] ,	TAGNumber  	,Location ,SubLocation,(select id from TM_SubMinorCategory  (nolock) where ltrim(rtrim(name))=ltrim(rtrim(a.SubMinorCategory))) as SubMinorCategory 	
	,'data not found for PO ,GRN and Item code/PO not mapped to User'
	  from @InventoryDesktopDetailType a inner join #InventoryDesktopDetailTempE b on a.PoNumber= b.PONumber and a.GRNNumber=b.GRNNumber and a.ItemCode=b.ItemCode
		 
end

/****************************END: DESKTOP INSERTION ******************************************************************************************************************************************************/



/****************************START: LAPTOP INSERTION ******************************************************************************************************************************************************/
--select * from @InventoryDesktopDetailType
--select * from TD_Inventory 

if(exists(select top 1 1 from  @InventoryLaptopDetailType ))
	begin
		
		print 'Inserting Inventory ... LAPTOP' 

		--select @Count2=count(*) from @InventoryLaptopDetailType

		declare @LaptopCnt int=1,@InventoryIDLaptop bigint=0


			
declare @tempLC table (ID bigint  identity(1,1), [PoNumber]  nvarchar(500), [GRNNumber]   nvarchar(500),[ItemCode]  nvarchar(500),qty bigint)
declare @ctL bigint=1,@actCntL bigint =0,@stdCntL bigint =0,@ActualInesrtCntL bigint =0,@qtyL BIGINT=0
	insert into @tempLC
	select a.[PoNumber],a.[GRNNumber],a.[ItemCode]	,count(a.[PoNumber])from @InventoryLaptopDetailType a group by a.[PoNumber],a.[GRNNumber],a.[ItemCode]

--select * from @tempLC

IF OBJECT_ID('tempdb..#InventoryLaptopDetailTempE') IS NOT NULL                                              
								  BEGIN                                              
									DROP TABLE #InventoryLaptopDetailTempE                                            
								  END

		create  TABLE #InventoryLaptopDetailTempE (	[PoNumber] [nvarchar](100) NULL,	[GRNNumber] [nvarchar](250) NULL,	[ItemCode] [nvarchar](250) NULL)


while (@ctL<= (select count(*) from @tempLC))
	begin	
		-- 3
		select @PoNumber=PoNumber,@GRNNumber=GRNNumber,@ItemCode=ItemCode ,@qtyL=qty from @tempLC where ID=@ctL
		
		--2

		set  @AssetBookType=(select top 1 [BOOK_TYPE_CODE] from [WNS_PO_DETAILS_V] (nolock) where PONumber=@PoNumber)


		IF(EXISTS(select TOP 1 1 from TD_Inventory (nolock) where PoNumber= @PONumber and GRNNumber=@GRNNumber and ItemCode=@ItemCode and  InventoryTypeID=2 group by PoNumber,GRNNumber,ItemCode))
			set @actCntL=(select count(*) from TD_Inventory(nolock)  where PoNumber= @PONumber and GRNNumber=@GRNNumber and ItemCode=@ItemCode and  InventoryTypeID=2 group by PoNumber,GRNNumber,ItemCode)
		

		--set @stdCntL=(select   sum((cast( CAST(LTRIM(RTRIM(QUANTITY)) as decimal) as bigint )) ) from WNS_RCV_TRANSACTIONS (nolock) 
		-- where PONumber= @PoNumber and GRNNumber=@GRNNumber and ItemCode=@ItemCode group by PONumber,GRNNumber,ItemCode)

		  set @stdCntL=(select  sum((cast(tag_count as bigint)* cast(cast(b.QUANTITY as decimal) as bigint)))--(select  sum((cast(tag_count as bigint)* cast(b.QUANTITY as bigint)))
 
			 --sum((cast( CAST(LTRIM(RTRIM(QUANTITY)) as decimal) as bigint )) ) 
 
			from WNS_PO_DETAILS_V(nolock) a inner join WNS_RCV_TRANSACTIONS(nolock) b
			on a.PONumber=b.PONumber and a.ItemCode=b.ItemCode 
			 and a.LineNum=b.PO_LINE_NUM
			inner join WNS_ITEM_MSTER_V (nolock)c on c.ItemCode=a.ItemCode and c.INVENTORY_ORG=a.INVENTORY_ORG
			where 

			a.PONumber=@PoNumber  and ( GRNNumber=@GRNNumber )
			and INV_TYPE='Laptop' 
			 and b.QUANTITY is not null)

		  --print 'count'
		  --print cast(@qty as varchar(100))
		  -- print cast(@actCnt as varchar(100))
		  --  print cast(@stdCnt as varchar(100))

		set @ActualInesrtCntL=@stdCntL-@actCntL

		  -- print cast(@ActualInesrtCnt as varchar(100))
		--Check Duplicate Start

		IF OBJECT_ID('tempdb..#InventoryLaptopDetailTemp') IS NOT NULL                                              
								  BEGIN                                              
									DROP TABLE #InventoryLaptopDetailTemp                                           
								  END





		--Check Duplicate Start
	create  TABLE #InventoryLaptopDetailTemp (
	[ID] [bigint] IDENTITY(1,1) NOT NULL,	
	[PoNumber] [nvarchar](100) NULL,
	[PoId] [nvarchar](250) NULL,
	[PoDate] [datetime] NULL,
	[GRNNumber] [nvarchar](250) NULL,
	[GRNDate] [datetime] NULL,
	[ItemCode] [nvarchar](250) NULL,
	[TAGCount] [nvarchar](250) NULL,
	[MajorCategory] [nvarchar](500) NULL,
	[MinorCategory] [nvarchar](500) NULL,
	[MinorSubCategory] [nvarchar](500) NULL,
	[Description] [nvarchar](3000) NULL,
	[ManufacturerName] [nvarchar](500) NULL,
	[TaggableTypeID] [nvarchar](250) NULL,
	[AssetTypeID] [nvarchar](250) NULL,
	[ExpTypeID] [nvarchar](250) NULL,
	[EmployeeID] [nvarchar](20) NULL,
	[EmployeeName] [nvarchar](100) NULL,
	[Model] [nvarchar](100) NULL,
	[BadgeID] [nvarchar](100) NULL,
	[IssueDate] [datetime] NULL,
	[ExpectedReturnDate] [datetime] NULL,
	[IsReturned] [bit] NULL,
	[Make] [nvarchar](100) NULL,		
	[SerialNumber] [nvarchar](100) NULL,
	TAGNumber  [nvarchar](100) NULL
	,Location [nvarchar](500) NULL
	,IsAdd bit Null,error nvarchar(max) 
	,[SubLocation] [nvarchar](1000)  NULL,
	[SubMinorCategory] [nvarchar](100) NULL,
	[RAM] [nvarchar](100) NULL,
	[WarrantyStart] [nvarchar](100) NULL,
	[WarrantyEnd] [nvarchar](100) NULL,
	[HostName] [nvarchar](100) NULL,
	[AllocationTypeLaptopID] [int] NULL,
	[StockStatusLaptopID] [int] NULL,
	[PropertyCode] [nvarchar](10) NULL,
	[DateOfAcquisition][nvarchar](100) NULL,
	[Remark] [nvarchar](max) NULL
	)

		insert into #InventoryLaptopDetailTemp
		select 
		temp.[PoNumber]
      ,p.[PoId]
      ,cast( POCreationDate  as datetime)[PoDate] --
      ,temp.[GRNNumber]
      ,cast( R.GRNDate as datetime)[GRNDate] --
	   ,P.ItemCode
      ,I.TAG_COUNT
      ,I.MAJOR_CATEGORY
      ,I.MINOR_CATEGORY
      ,[MinorSubCategory]
      ,[Description]L
	  ,P.VendorName
      ,(select top 1 pmval.Parametervalueid from [TM_Parameter](nolock) pm inner join [TM_ParameterValue] pmval 
on pm.parameterid=pmval.parameterid
Where pm.parameterdescr='Taggable Type' and pmval.parametervalue= [TaggableTypeID])
      ,(select top 1 pmval.Parametervalueid from [TM_Parameter](nolock) pm inner join [TM_ParameterValue] pmval 
on pm.parameterid=pmval.parameterid
Where pm.parameterdescr='Asset Type' and pmval.parametervalue= [AssetTypeID]) 
      ,(select top 1 pmval.Parametervalueid from [TM_Parameter](nolock) pm inner join [TM_ParameterValue] pmval 
on pm.parameterid=pmval.parameterid
Where pm.parameterdescr='ExpType' and pmval.parametervalue= [ExpTypeID]) 	 
	  ,[EmployeeID]
      ,[EmployeeName]
      ,[Model]
      ,[BadgeID]
    
	  --,case when ISDATE([IssueDate]) =1 then cast( [IssueDate] as datetime) else null end [IssueDate] --Date Format
   
	  --,case when ISDATE([ExpectedReturnDate]) =1 then cast( [ExpectedReturnDate] as datetime) else null end [ExpectedReturnDate] --Date Format

	   ,case when [IssueDate] ='' then null else case when ISDATE([IssueDate]) =1 then cast( [IssueDate] as datetime) else '1900-01-01' end end [IssueDate] --Date Format
   
	  ,case when [ExpectedReturnDate]='' then null else case when ISDATE([ExpectedReturnDate]) =1 then cast( [ExpectedReturnDate] as datetime) else '1900-01-01' end end [ExpectedReturnDate] --Date Format

      ,case when [IsReturned]='true' then 1 else 0 end as [IsReturned]
      ,[Make]	        
      ,[SerialNumber]
	  ,TAGNumber
	  ,I.INVENTORY_ORG
	  ,NUll,null,[SubLocation],
	--(select id from TM_SubMinorCategory  (nolock) where ltrim(rtrim(name))=ltrim(rtrim(temp.SubMinorCategory)))
		  case when temp.SubMinorCategory is null or temp.SubMinorCategory='' then null 
	        when temp.SubMinorCategory is not null or  temp.SubMinorCategory<>'' then case when (select id from TM_SubMinorCategory  (nolock) where ltrim(rtrim(name))=ltrim(rtrim(temp.SubMinorCategory))) is null then 0 else (select id from TM_SubMinorCategory  (nolock) where ltrim(rtrim(name))=ltrim(rtrim(temp.SubMinorCategory))) end end as SubMinorCategory
			,temp.Remark, temp.RAM,
	temp.WarrantyStart,
	temp.WarrantyEnd ,
	temp.HostName ,
	temp.AllocationTypeLaptopID ,
	temp.StockStatusLaptopID,temp.PropertyCode,temp.DateOfAcquisition
		from @InventoryLaptopDetailType temp inner join WNS_PO_DETAILS_V (nolock)P on temp.PoNumber=P.PoNumber and temp.ItemCode=P.ItemCode
	inner join WNS_ITEM_MSTER_V (nolock)I on temp.ItemCode=I.ItemCode and P.INVENTORY_ORG=I.INVENTORY_ORG
	inner join WNS_RCV_TRANSACTIONS(nolock) R on temp.PoNumber=R.PoNumber  and temp.ItemCode=R.ItemCode -- added by swati
	and temp.GRNNumber=R.GRNNumber ----8000049234

	----commented code for Ticket Number --8000049234
	--inner join [ufnGetCategoryLocation](@EmplId,@UserId,@RoleID) fC on  fC.MajorCategeory = (case when fC.MajorCategeory='All' then fC.MajorCategeory else temp.MajorCategory end ) 
 --   inner join [ufnGetCategoryLocation](@EmplId,@UserId,@RoleID) fL on fL.Location= (case when fL.Location='All' then  fL.Location else temp.Location end ) 
	 where temp.PoNumber= @PONumber and temp.GRNNumber=@GRNNumber and temp.ItemCode=@ItemCode

	  ----Added code for Ticket Number --8000049234
	 and temp.MajorCategory in (select case MajorCategeory when 'ALL' then temp.MajorCategory else MajorCategeory end  from [ufnGetCategoryLocation](@EmplId,@UserId,@RoleID))
	 and temp.Location in (select case Location when 'ALL' then temp.Location else Location end  from [ufnGetCategoryLocation](@EmplId,@UserId,@RoleID))



	 

		update #InventoryLaptopDetailTemp set error=isnull(error,'')+'Enter valid Taggable Type' where TaggableTypeID is null
		update #InventoryLaptopDetailTemp set error=isnull(error,'')+'Enter valid Asset Type' where AssetTypeID is null
		update #InventoryLaptopDetailTemp set error=isnull(error,'')+'Enter valid Exp Type' where ExpTypeID is null
		--update #InventoryLaptopDetailTemp set error=case when ISDATE([IssueDate]) =1 then null else isnull(error,'')+',Issue Date Should be mm/dd/yyyy format' end --Date Format
		--update #InventoryLaptopDetailTemp set error=case when ISDATE([ExpectedReturnDate]) =1 then null else isnull(error,'')+',Expected Date Should be mm/dd/yyyy format' end --Date Format
		update #InventoryLaptopDetailTemp set error=case 
		                                                 when [IssueDate] is null or [IssueDate]=''  then null 
														 else  
														 case when ISDATE([IssueDate]) =1 and convert(nvarchar(50),[IssueDate],111)<>'1900/01/01' then null else isnull(error,'')+',Issue Date Should be mm/dd/yyyy format' end --Date Format
														 end
		
		update #InventoryLaptopDetailTemp set error=case when [ExpectedReturnDate] is null or [ExpectedReturnDate]='' then null else case when ISDATE([ExpectedReturnDate]) =1 and convert(nvarchar(50),[ExpectedReturnDate],111)<>'1900/01/01' then null else isnull(error,'')+',Expected Date Should be mm/dd/yyyy format' end end--Date Format
		update #InventoryLaptopDetailTemp set error=isnull(error,'')+',Enter Valid Sub Minor Category' where SubMinorCategory =0	
		declare @InnercntL bigint =1
		
		if(exists(select top 1 1 from #InventoryLaptopDetailTemp))
		begin
		

					while (@InnercntL<= @qtyL)

		begin

		----Duplicate Tag Number checking----
		
		select @TagNumber=TAGNumber from #InventoryLaptopDetailTemp where ID=@InnercntL
		----Duplicate Tag Number checking ----


		if(@InnercntL <= @ActualInesrtCntL)
		begin

		----Duplicate Tag Number checking----

		if(exists ( select 'X' FROM TD_InventoryCommonDetail WHERE TagNumber= @TagNumber))
			begin
			  update #InventoryLaptopDetailTemp set error='Tag Number already exist' where ID=@InnercntL
			end

         ----Duplicate Tag Number checking----  

		  print 'row by row insertion'	

		  if(exists(select top 1 1 from #InventoryLaptopDetailTemp where   ID=@InnercntL and error is null))
		begin
		print 'without error row procesing'

		insert into TD_Inventory( [PoNumber],[PoId],[PoDate],[GRNNumber],[GRNDate],[ItemCode],[TAGCount],[MajorCategory],[MinorCategory],[MinorSubCategory],[Description],[ManufacturerName],[TaggableTypeID],[AssetTypeID],[ExpTypeID],[InventoryTypeID],RecCreatedBy, RecCreatedDate)
		select [PoNumber],[PoId],[PoDate],[GRNNumber],[GRNDate],[ItemCode],[TAGCount],[MajorCategory],[MinorCategory],[MinorSubCategory],[Description],[ManufacturerName],[TaggableTypeID],[AssetTypeID],[ExpTypeID],2,@EmplId ,GETDATE() 
		 from #InventoryLaptopDetailTemp where   ID=@InnercntL

		set @InventoryIDLaptop=@@IDENTITY

			insert into TD_InventoryLaptopDetail(InventoryID,[EmployeeID]
      ,[EmployeeName]      ,[Model]      ,[BadgeID]      ,[IssueDate]      ,[ExpectedReturnDate]      ,[IsReturned]      ,[Make]      
      ,[SerialNumber],RecCreatedBy,RecCreatedDate,SubLocation,SubMinorCategory, RAM,
	WarrantyStart,
	WarrantyEnd ,
	HostName ,
	AllocationTypeLaptopID ,
	StockStatusLaptopID)		select @InventoryIDLaptop,		[EmployeeID]      ,[EmployeeName]      ,[Model]      ,[BadgeID]      ,[IssueDate]      ,[ExpectedReturnDate]
      ,[IsReturned]      ,[Make]            ,[SerialNumber],@EmplId ,GETDATE(),SubLocation,SubMinorCategory , RAM,
	WarrantyStart,
	WarrantyEnd ,
	HostName ,
	AllocationTypeLaptopID ,
	StockStatusLaptopID from #InventoryLaptopDetailTemp where ID=@InnercntL

		insert into TD_InventoryCommonDetail([InventoryID] ,	[AssetModule] ,	[TAGNumber],SerialNumber,	[Location],RecCreatedBy,RecCreatedDate,BOOK_TYPE_CODE,Remark,[PropertyCode],[DateOfAcquisition] )
		select @InventoryIDLaptop,'75',TAGNumber,SerialNumber,Location,@EmplId ,GETDATE() ,@AssetBookType,Remark,[PropertyCode],[DateOfAcquisition] from #InventoryLaptopDetailTemp where   ID=@InnercntL

		--set @Msg='Data Save Successfully.'
		set @Msg='File is uploaded successfully.'
		end
		

		end
		else
		begin
		 print 'Update error for duplicate'
		 update #InventoryLaptopDetailTemp set error='data already exists' where ID=@InnercntL
	

		end

		set @InnercntL=@InnercntL+1
		end
		end
		else
		begin

		print 'IN PO, GRN and ITEMCODE error'

		insert into #InventoryLaptopDetailTempE 
		select 	[PoNumber] ,	[GRNNumber] ,	[ItemCode]   from  @InventoryLaptopDetailType   where PoNumber= @PONumber and GRNNumber=@GRNNumber and ItemCode=@ItemCode

--		insert into #InventoryLaptopDetailTemp([PoNumber] ,[PoId] ,[PoDate] ,[GRNNumber] ,[GRNDate] ,[ItemCode] ,[TAGCount] ,[MajorCategory] ,[MinorCategory] ,[MinorSubCategory] ,[Description] ,[ManufacturerName] ,[TaggableTypeID] ,
--[AssetTypeID] ,[ExpTypeID] ,[EmployeeID] ,[EmployeeName] ,[Model] ,[BadgeID] ,[IssueDate] ,[ExpectedReturnDate] ,[IsReturned],[Make] ,
--[SerialNumber] ,TAGNumber  ,Location  ) 
--		select 
--		[PoNumber] ,[PoId] ,[PoDate] ,[GRNNumber] ,[GRNDate] ,[ItemCode] ,[TAGCount] ,[MajorCategory] ,[MinorCategory] ,[MinorSubCategory] ,[Description] ,[ManufacturerName] ,[TaggableTypeID] ,
--[AssetTypeID] ,[ExpTypeID] ,[EmployeeID] ,[EmployeeName] ,[Model] ,[BadgeID] ,[IssueDate] ,[ExpectedReturnDate] ,[IsReturned],[Make] ,
--[SerialNumber] ,TAGNumber  ,Location  from @InventoryLaptopDetailType   where PoNumber= @PONumber and GRNNumber=@GRNNumber and ItemCode=@ItemCode
		
--		--select * from #InventoryDesktopDetailTemp
--		update #InventoryLaptopDetailTemp set error='data not found for PO ,GRN and Item code/PO not mapped to User'
		 
		 --	select * from #InventoryDesktopDetailTemp
		end


set @ctL=@ctL+1
end

	insert into #InventoryLaptopDetailTemp([PoNumber] ,[PoId] ,[PoDate] ,[GRNNumber] ,[GRNDate] ,[ItemCode] ,[TAGCount] ,[MajorCategory] ,[MinorCategory] ,[MinorSubCategory] ,[Description] ,[ManufacturerName] ,[TaggableTypeID] ,
[AssetTypeID] ,[ExpTypeID] ,[EmployeeID] ,[EmployeeName] ,[Model] ,[BadgeID] ,[IssueDate] ,[ExpectedReturnDate] ,[IsReturned],[Make] ,
[SerialNumber] ,TAGNumber  ,Location ,error ) 
		select 
		a.[PoNumber] ,[PoId] ,[PoDate] ,a.[GRNNumber] ,[GRNDate] ,a.[ItemCode] ,[TAGCount] ,[MajorCategory] ,[MinorCategory] ,[MinorSubCategory] ,[Description] ,[ManufacturerName] ,[TaggableTypeID] ,
[AssetTypeID] ,[ExpTypeID] ,[EmployeeID] ,[EmployeeName] ,[Model] ,[BadgeID] ,[IssueDate] ,[ExpectedReturnDate] ,[IsReturned],[Make] ,
[SerialNumber] ,TAGNumber  ,Location ,'data not found for PO ,GRN and Item code/PO not mapped to User' from @InventoryLaptopDetailType 
a inner join #InventoryLaptopDetailTempE b on a.PoNumber= b.PONumber and a.GRNNumber=b.GRNNumber and a.ItemCode=b.ItemCode
--   where PoNumber= @PONumber and GRNNumber=@GRNNumber and ItemCode=@ItemCode
		
		
	--	update #InventoryLaptopDetailTemp set error='data not found for PO ,GRN and Item code/PO not mapped to User'




	end

/****************************END: LAPTOP INSERTION ******************************************************************************************************************************************************/






/****************************START: Network INSERTION ******************************************************************************************************************************************************/
--select * from @InventoryDesktopDetailType
--select * from TD_Inventory 

if(exists(select top 1 1 from  @InventoryNetworkDetailType ))
	begin
		
		print 'Inserting Inventory ... Network' 

	--	select @Count3=count(*) from @InventoryNetworkDetailType

		declare @NwCnt int=1,@InventoryIDNw bigint=0



	
declare @tempNC table (ID bigint  identity(1,1), [PoNumber]  nvarchar(500), [GRNNumber]   nvarchar(500),[ItemCode]  nvarchar(500),qty bigint)
declare @ctN bigint=1,@actCntN bigint =0,@stdCntN bigint =0,@ActualInesrtCntN bigint =0,@qtyN BIGINT=0
	insert into @tempNC
	select a.[PoNumber],a.[GRNNumber],a.[ItemCode]	,count(a.[PoNumber])from @InventoryNetworkDetailType a group by a.[PoNumber],a.[GRNNumber],a.[ItemCode]

--select * from @tempNC
IF OBJECT_ID('tempdb..#InventoryNetworkDetailTempE') IS NOT NULL                                              
								  BEGIN                                              
									DROP TABLE #InventoryNetworkDetailTempE                                            
								  END

		create  TABLE #InventoryNetworkDetailTempE (	[PoNumber] [nvarchar](100) NULL,	[GRNNumber] [nvarchar](250) NULL,	[ItemCode] [nvarchar](250) NULL)



while (@ctN<= (select count(*) from @tempNC))
	begin
		select @PoNumber=PoNumber,@GRNNumber=GRNNumber,@ItemCode=ItemCode ,@qtyN=qty from @tempNC where ID=@ctN
		
		--2

		set  @AssetBookType=(select top 1 [BOOK_TYPE_CODE] from [WNS_PO_DETAILS_V] (nolock) where PONumber=@PoNumber)


		if(exists(select top 1 1 from TD_Inventory(nolock)  where PoNumber= @PONumber and GRNNumber=@GRNNumber and ItemCode=@ItemCode and  InventoryTypeID=5 group by PoNumber,GRNNumber,ItemCode))
			set @actCntN=(select count(*) from TD_Inventory (nolock) where PoNumber= @PONumber and GRNNumber=@GRNNumber and ItemCode=@ItemCode and  InventoryTypeID=5 group by PoNumber,GRNNumber,ItemCode)
		
		--7
	
		--if(exists (select   sum((cast( CAST(LTRIM(RTRIM(QUANTITY)) as decimal) as bigint )) ) from WNS_RCV_TRANSACTIONS (nolock) 	 where PONumber= @PoNumber and GRNNumber=@GRNNumber and ItemCode=@ItemCode 		 group by PONumber,GRNNumber,ItemCode)) 
		--set @stdCntN=(select   sum((cast( CAST(LTRIM(RTRIM(QUANTITY)) as decimal) as bigint )) ) from WNS_RCV_TRANSACTIONS (nolock) 	 	 where PONumber= @PoNumber and GRNNumber=@GRNNumber and ItemCode=@ItemCode 			 group by PONumber,GRNNumber,ItemCode)
			 set @stdCntN=(select  sum((cast(tag_count as bigint)* cast(cast(b.QUANTITY as decimal) as bigint)))--(select  sum((cast(tag_count as bigint)* cast(b.QUANTITY as bigint)))
 
			 --sum((cast( CAST(LTRIM(RTRIM(QUANTITY)) as decimal) as bigint )) ) 
 
			from WNS_PO_DETAILS_V(nolock) a inner join WNS_RCV_TRANSACTIONS(nolock) b
			on a.PONumber=b.PONumber and a.ItemCode=b.ItemCode 
			 and a.LineNum=b.PO_LINE_NUM
			inner join WNS_ITEM_MSTER_V (nolock)c on c.ItemCode=a.ItemCode and c.INVENTORY_ORG=a.INVENTORY_ORG
			where 

			a.PONumber=@PoNumber  and ( GRNNumber=@GRNNumber )
			and INV_TYPE='Network' 
			 and b.QUANTITY is not null)



		  --print 'count'
		  --print cast(@qty as varchar(100))
		  -- print cast(@actCnt as varchar(100))
		  --  print cast(@stdCnt as varchar(100))

		set @ActualInesrtCntN=@stdCntN-@actCntN

		  -- print cast(@ActualInesrtCnt as varchar(100))
		--Check Duplicate Start

		IF OBJECT_ID('tempdb..#InventoryNetworkDetailTemp') IS NOT NULL                                              
								  BEGIN                                              
									DROP TABLE #InventoryNetworkDetailTemp                                            
								  END


		--Check Duplicate Start
		create  TABLE #InventoryNetworkDetailTemp (
	[ID] [bigint] IDENTITY(1,1) NOT NULL,	
	[PoNumber] [nvarchar](100) NULL,
	[PoId] [nvarchar](250) NULL,
	[PoDate] [datetime] NULL,
	[GRNNumber] [nvarchar](250) NULL,
	[GRNDate] [datetime] NULL,
	[ItemCode] [nvarchar](250) NULL,
	[TAGCount] [nvarchar](250) NULL,
	[MajorCategory] [nvarchar](500) NULL,
	[MinorCategory] [nvarchar](500) NULL,
	[MinorSubCategory] [nvarchar](500) NULL,
	[Description] [nvarchar](3000) NULL,
	[ManufacturerName] [nvarchar](500) NULL,
	[TaggableTypeID] [nvarchar](250) NULL,
	[AssetTypeID] [nvarchar](250) NULL,
	[ExpTypeID] [nvarchar](250) NULL,
	[MakeNetworkID] [nvarchar](250) NULL,
	[Model] [nvarchar](500) NULL,
	[StockStatusNetworkID] [nvarchar](500) NULL,
	[DeviceLife] [nvarchar](500) NULL,
	[DefineScope] [nvarchar](500) NULL,
	[EndoflifeofdeviceID] [nvarchar](250) NULL,
	[DeviceSupportID] [nvarchar](250) NULL,
	[ModelSize] [nvarchar](500) NULL,
	[Processname] [nvarchar](500) NULL,
	[SharedDedicatedID] [nvarchar](250) NULL,
	[SystemAssetID] [nvarchar](100) NULL,
	[IPAddress] [nvarchar](100) NULL,
	[SiteName] [nvarchar](100) NULL,
	[SerialNumber] [nvarchar](100) NULL,	
	[AssetTypeNetworkID] [nvarchar](250) NULL,
	TAGNumber  [nvarchar](100) NULL
	,Location [nvarchar](500) NULL 
	,IsAdd bit NULL
	,error nvarchar(max)
	,[SubLocation] [nvarchar](1000)  NULL,
	[SubMinorCategory] [nvarchar](100) NULL,
	[PropertyCode] [nvarchar](10) NULL,
	[DateOfAcquisition][nvarchar](100) NULL,
	[Remark] [nvarchar](max) NULL
	)

		insert into #InventoryNetworkDetailTemp		
		select 
		temp.[PoNumber]
      ,p.PoId
      ,cast( POCreationDate as datetime) [PoDate] ---
      ,temp.[GRNNumber]
      ,cast( R.GRNDate as datetime) [GRNDate] ---
      ,P.ItemCode
      ,I.TAG_COUNT
      ,I.MAJOR_CATEGORY
      ,I.MINOR_CATEGORY
      ,[MinorSubCategory]
      ,[Description]
	  ,P.VendorName
      ,(select top 1 pmval.Parametervalueid from [TM_Parameter](nolock) pm inner join [TM_ParameterValue] pmval 
on pm.parameterid=pmval.parameterid
Where pm.parameterdescr='Taggable Type' and pmval.parametervalue= [TaggableTypeID]) ---
      ,(select top 1 pmval.Parametervalueid from [TM_Parameter] (nolock)pm inner join [TM_ParameterValue] pmval 
on pm.parameterid=pmval.parameterid
Where pm.parameterdescr='Asset Type' and pmval.parametervalue= [AssetTypeID])  ---
      ,(select top 1 pmval.Parametervalueid from [TM_Parameter](nolock) pm inner join [TM_ParameterValue] pmval 
on pm.parameterid=pmval.parameterid
Where pm.parameterdescr='ExpType' and pmval.parametervalue= [ExpTypeID])  --
	 
	  ,(select top 1 pmval.Parametervalueid from [TM_Parameter](nolock) pm inner join [TM_ParameterValue] pmval 
on pm.parameterid=pmval.parameterid
Where pm.parameterdescr='MakeNetwork' and pmval.parametervalue= [MakeNetworkID])  --
      ,[Model]


--      ,(select pmval.Parametervalueid from [TM_Parameter] (nolock)pm inner join [TM_ParameterValue] pmval 
--on pm.parameterid=pmval.parameterid
--Where pm.parameterdescr='StockstatusNetwork' and pmval.parametervalue= [StockStatusNetworkID]) --

      , case when [StockStatusNetworkID] is null or  [StockStatusNetworkID]='' then null
	 when [StockStatusNetworkID] is not null or [StockStatusNetworkID]<> '' then case when (select top 1 pmval.Parametervalueid from [TM_Parameter] (nolock)pm inner join [TM_ParameterValue] pmval 
                                                                                            on pm.parameterid=pmval.parameterid
                                                                                            Where pm.parameterdescr='StockstatusNetwork' and pmval.parametervalue= [StockStatusNetworkID]) is null then 0--
																							else (select top 1 pmval.Parametervalueid from [TM_Parameter] (nolock)pm inner join [TM_ParameterValue] pmval 
                                                                                            on pm.parameterid=pmval.parameterid
                                                                                            Where pm.parameterdescr='StockstatusNetwork' and pmval.parametervalue= [StockStatusNetworkID]) end end as StockStatusNetworkID

      ,[DeviceLife]
      ,[DefineScope]

--      ,(select pmval.Parametervalueid from [TM_Parameter](nolock) pm inner join [TM_ParameterValue] pmval 
--on pm.parameterid=pmval.parameterid
--Where pm.parameterdescr='EndoflifeofdeviceNetwork' and pmval.parametervalue= [EndoflifeofdeviceID])  --

      ,case when [EndoflifeofdeviceID] is null or  [EndoflifeofdeviceID]='' then null
	        when [EndoflifeofdeviceID] is not null or [EndoflifeofdeviceID]<> '' then case when (select top 1 pmval.Parametervalueid from [TM_Parameter](nolock) pm inner join [TM_ParameterValue] pmval 
                                                                                                 on pm.parameterid=pmval.parameterid
                                                                                                 Where pm.parameterdescr='EndoflifeofdeviceNetwork' and pmval.parametervalue= [EndoflifeofdeviceID]) is null then 0 --
																								 else (select top 1 pmval.Parametervalueid from [TM_Parameter](nolock) pm inner join [TM_ParameterValue] pmval 
                                                                                                 on pm.parameterid=pmval.parameterid
                                                                                                 Where pm.parameterdescr='EndoflifeofdeviceNetwork' and pmval.parametervalue= [EndoflifeofdeviceID]) end end as EndoflifeofdeviceID


--      ,(select pmval.Parametervalueid from [TM_Parameter](nolock) pm inner join [TM_ParameterValue] pmval 
--on pm.parameterid=pmval.parameterid
--Where pm.parameterdescr='DeviceSupportNetwork' and pmval.parametervalue= [DeviceSupportID])  --


      ,case when [DeviceSupportID] is null or  [DeviceSupportID]='' then null
	 when [DeviceSupportID] is not null or [DeviceSupportID]<> '' then case when (select top 1 pmval.Parametervalueid from [TM_Parameter](nolock) pm inner join [TM_ParameterValue] pmval 
                                                                                  on pm.parameterid=pmval.parameterid
                                                                                  Where pm.parameterdescr='DeviceSupportNetwork' and pmval.parametervalue= [DeviceSupportID]) is null then 0 --
																				  else (select top 1 pmval.Parametervalueid from [TM_Parameter](nolock) pm inner join [TM_ParameterValue] pmval 
                                                                                  on pm.parameterid=pmval.parameterid
                                                                                  Where pm.parameterdescr='DeviceSupportNetwork' and pmval.parametervalue= [DeviceSupportID]) end end as DeviceSupportID


      ,[ModelSize]
      ,[Processname]
   --   ,cast((select pmval.Parametervalueid from [TM_Parameter](nolock) pm inner join [TM_ParameterValue] pmval 
			--on pm.parameterid=pmval.parameterid
			--Where pm.parameterdescr='SharedDedicatedNetwork' and pmval.parametervalue=[SharedDedicatedID]) as int) [SharedDedicatedID]

,case when [SharedDedicatedID] is null or  [SharedDedicatedID]='' then null
when [SharedDedicatedID] is not null or [SharedDedicatedID]<> '' then case when cast((select top 1 pmval.Parametervalueid from [TM_Parameter](nolock) pm inner join [TM_ParameterValue] pmval 
			                                                                     on pm.parameterid=pmval.parameterid
			                                                                     Where pm.parameterdescr='SharedDedicatedNetwork' and pmval.parametervalue=[SharedDedicatedID]) as int) is null then 0
																				 else cast((select top 1 pmval.Parametervalueid from [TM_Parameter](nolock) pm inner join [TM_ParameterValue] pmval 
			                                                                     on pm.parameterid=pmval.parameterid
			                                                                     Where pm.parameterdescr='SharedDedicatedNetwork' and pmval.parametervalue=[SharedDedicatedID]) as int) end end as [SharedDedicatedID]
																				  

      --,cast([SystemAssetID] as int)[SystemAssetID]
	  ,[SystemAssetID]
      ,[IPAddress]
      ,[SiteName] 
	  ,[SerialNumber]     
     -- ,cast([AssetTypeNetworkID] as int)[AssetTypeNetworkID]
	 ,0
	  ,TAGNumber	  
	   ,I.INVENTORY_ORG
	  ,NULL
	  ,NULL,
	  SubLocation,
	  --(select id from TM_SubMinorCategory  (nolock) where ltrim(rtrim(name))=ltrim(rtrim(temp.SubMinorCategory)))
	  
	  case when temp.SubMinorCategory is null or temp.SubMinorCategory='' then null 
	        when temp.SubMinorCategory is not null or  temp.SubMinorCategory<>'' then case when (select id from TM_SubMinorCategory  (nolock) where ltrim(rtrim(name))=ltrim(rtrim(temp.SubMinorCategory))) is null then 0 else (select id from TM_SubMinorCategory  (nolock) where ltrim(rtrim(name))=ltrim(rtrim(temp.SubMinorCategory))) end end as SubMinorCategory
			,temp.[PropertyCode],temp.[DateOfAcquisition],temp.[Remark]
		from @InventoryNetworkDetailType temp inner join WNS_PO_DETAILS_V(nolock) P on temp.PoNumber=P.PoNumber and temp.ItemCode=P.ItemCode
	inner join WNS_ITEM_MSTER_V (nolock)I on temp.ItemCode=I.ItemCode and P.INVENTORY_ORG=I.INVENTORY_ORG
	inner join WNS_RCV_TRANSACTIONS(nolock) R on temp.PoNumber=R.PoNumber  and temp.ItemCode=R.ItemCode -- added by swati
	and temp.GRNNumber=R.GRNNumber ----8000049234

	----commented code for Ticket Number --8000049234
	--inner join [ufnGetCategoryLocation](@EmplId,@UserId,@RoleID) fC on  fC.MajorCategeory = (case when fC.MajorCategeory='All' then fC.MajorCategeory else temp.MajorCategory end ) 
 --  inner join [ufnGetCategoryLocation](@EmplId,@UserId,@RoleID) fL on fL.Location= (case when fL.Location='All' then  fL.Location else temp.Location end )
	 where temp.PoNumber= @PONumber and temp.GRNNumber=@GRNNumber and temp.ItemCode=@ItemCode

	 ----Added code for Ticket Number --8000049234
	 and temp.MajorCategory in (select case MajorCategeory when 'ALL' then temp.MajorCategory else MajorCategeory end  from [ufnGetCategoryLocation](@EmplId,@UserId,@RoleID))
	 and temp.Location in (select case Location when 'ALL' then temp.Location else Location end  from [ufnGetCategoryLocation](@EmplId,@UserId,@RoleID))
	
		

	    update #InventoryNetworkDetailTemp set error=isnull(error,'')+'Enter valid Taggable Type' where TaggableTypeID is null
		update #InventoryNetworkDetailTemp set error=isnull(error,'')+'Enter valid Asset Type' where AssetTypeID is null
		update #InventoryNetworkDetailTemp set error=isnull(error,'')+'Enter valid Exp Type' where ExpTypeID is null
		update #InventoryNetworkDetailTemp set error=isnull(error,'')+'Enter valid Make Network' where MakeNetworkID is null
		update #InventoryNetworkDetailTemp set error=isnull(error,'')+'Enter valid EndofLife Device' where EndoflifeofdeviceID =0
		update #InventoryNetworkDetailTemp set error=isnull(error,'')+'Enter valid Stock Status Network' where StockStatusNetworkID =0
		update #InventoryNetworkDetailTemp set error=isnull(error,'')+'Enter valid Device Support' where DeviceSupportID =0
		update #InventoryNetworkDetailTemp set error=isnull(error,'')+'Enter valid Shared/Dedicated' where SharedDedicatedID =0
		
        update #InventoryNetworkDetailTemp set error=isnull(error,'')+',Enter Valid Sub Minor Category' where SubMinorCategory =0
		declare @InnercntN bigint =1
		

		if(exists(select top 1 1 from #InventoryNetworkDetailTemp))
		begin
				while (@InnercntN<= @qtyN)

		begin

		----Duplicate Tag Number checking----
		select @TagNumber=TAGNumber from #InventoryNetworkDetailTemp where ID=@InnercntN
		----Duplicate Tag Number checking ----

		if(@InnercntN <= @ActualInesrtCntN)
		begin

		----Duplicate Tag Number checking----

		if(exists ( select 'X' FROM TD_InventoryCommonDetail WHERE TagNumber= @TagNumber))
			begin
			  update #InventoryNetworkDetailTemp set error='Tag Number already exist' where ID=@InnercntN
			end

         ----Duplicate Tag Number checking----


		  print 'row by row insertion'		  
		if(exists(select top 1 1 from #InventoryNetworkDetailTemp where   ID=@InnercntN and error is null))
		begin
			--insert into T values (@InnercntN , @TagNumber + '-' + cast (@qtyN as nvarchar(20)))

		print 'without error row procesing'
		insert into TD_Inventory( [PoNumber],[PoId],[PoDate],[GRNNumber],[GRNDate],[ItemCode],[TAGCount],[MajorCategory],[MinorCategory],[MinorSubCategory],[Description],[ManufacturerName],[TaggableTypeID],[AssetTypeID],[ExpTypeID],[InventoryTypeID],RecCreatedBy, RecCreatedDate)
		select [PoNumber],[PoId],[PoDate],[GRNNumber],[GRNDate],[ItemCode],[TAGCount],[MajorCategory],[MinorCategory],[MinorSubCategory],[Description],[ManufacturerName],[TaggableTypeID],[AssetTypeID],[ExpTypeID],5,@EmplId ,GETDATE() 
		 from #InventoryNetworkDetailTemp where   ID=@InnercntN
		

		set @InventoryIDNw=@@IDENTITY

	
		insert into TD_InventoryNetworkDetail(InventoryID,[MakeNetworkID]
      ,[Model]
      ,[StockStatusNetworkID]
      ,[DeviceLife]
      ,[DefineScope]
      ,[EndoflifeofdeviceID]
      ,[DeviceSupportID]
      ,[ModelSize]
      ,[Processname]
      ,[SharedDedicatedID]
      ,[SystemAssetID]
      ,[IPAddress]
      ,[SiteName]  
	  ,[SerialNumber]    
      ,[AssetTypeNetworkID]
	  ,RecCreatedBy,
	   RecCreatedDate,SubLocation,SubMinorCategory)
		select @InventoryIDNw,
		[MakeNetworkID]
      ,[Model]
      ,[StockStatusNetworkID]
      ,[DeviceLife]
      ,[DefineScope]
      ,[EndoflifeofdeviceID]
      ,[DeviceSupportID]
      ,[ModelSize]
      ,[Processname]
      ,[SharedDedicatedID]
      ,[SystemAssetID]
      ,[IPAddress]
      ,[SiteName]
	  ,[SerialNumber]      
      ,[AssetTypeNetworkID]
	  ,@EmplId ,GETDATE(),SubLocation,SubMinorCategory from #InventoryNetworkDetailTemp where   ID=@InnercntN
	--Check Duplicate End

		
		insert into TD_InventoryCommonDetail([InventoryID] ,	[AssetModule] ,	[TAGNumber],SerialNumber,	[Location],RecCreatedBy,RecCreatedDate ,BOOK_TYPE_CODE,Remark,[PropertyCode],[DateOfAcquisition])
		select @InventoryIDNw,'75',TAGNumber,SerialNumber,Location,@EmplId ,GETDATE() ,@AssetBookType,Remark,[PropertyCode],[DateOfAcquisition] from #InventoryNetworkDetailTemp where   ID=@InnercntN

		--set @Msg='Data Save Successfully.'
		set @Msg='File is uploaded successfully.'
		end
		

		end
		else
		begin
		 print 'Update error for duplicate'
		 update #InventoryNetworkDetailTemp set error='data already exists' where ID=@InnercntN
	

		end

	
		set @InnercntN=@InnercntN+1
		end
		end
		else
		begin

		print 'IN PO, GRN and ITEMCODE error'
		--#InventoryNetworkDetailTempE

insert into #InventoryNetworkDetailTempE 
		select 	[PoNumber] ,	[GRNNumber] ,	[ItemCode]   from @InventoryNetworkDetailType   where PoNumber= @PONumber and GRNNumber=@GRNNumber and ItemCode=@ItemCode


--		insert into #InventoryNetworkDetailTemp([PoNumber] ,[PoId] ,[PoDate] ,[GRNNumber] ,[GRNDate] ,[ItemCode] ,[TAGCount] ,[MajorCategory] ,[MinorCategory] ,[MinorSubCategory] ,[Description] ,[ManufacturerName] ,
--[TaggableTypeID] ,[AssetTypeID] ,[ExpTypeID] ,[MakeNetworkID] ,[Model] ,[StockStatusNetworkID] ,[DeviceLife] ,[DefineScope] ,[EndoflifeofdeviceID] ,[DeviceSupportID] ,[ModelSize] ,[Processname] ,[SharedDedicatedID] ,[SystemAssetID] ,[IPAddress] ,[SiteName] ,[SerialNumber] ,
--[AssetTypeNetworkID] ,TAGNumber  ,Location  ) 
--		select 
--		[PoNumber] ,[PoId] ,[PoDate] ,[GRNNumber] ,[GRNDate] ,[ItemCode] ,[TAGCount] ,[MajorCategory] ,[MinorCategory] ,[MinorSubCategory] ,[Description] ,[ManufacturerName] ,
--[TaggableTypeID] ,[AssetTypeID] ,[ExpTypeID] ,[MakeNetworkID] ,[Model] ,[StockStatusNetworkID] ,[DeviceLife] ,[DefineScope] ,[EndoflifeofdeviceID] ,[DeviceSupportID] ,[ModelSize] ,[Processname] ,[SharedDedicatedID] ,[SystemAssetID] ,[IPAddress] ,[SiteName] ,[SerialNumber] ,
--[AssetTypeNetworkID] ,TAGNumber  ,Location  from @InventoryNetworkDetailType   where PoNumber= @PONumber and GRNNumber=@GRNNumber and ItemCode=@ItemCode
		
--		--select * from #InventoryDesktopDetailTemp
--		update #InventoryNetworkDetailTemp set error='data not found for PO ,GRN and Item code/PO not mapped to User'
		 
		 --	select * from #InventoryDesktopDetailTemp
		end




set @ctN=@ctN+1
end


		insert into #InventoryNetworkDetailTemp([PoNumber] ,[PoId] ,[PoDate] ,[GRNNumber] ,[GRNDate] ,[ItemCode] ,[TAGCount] ,[MajorCategory] ,[MinorCategory] ,[MinorSubCategory] ,[Description] ,[ManufacturerName] ,
[TaggableTypeID] ,[AssetTypeID] ,[ExpTypeID] ,[MakeNetworkID] ,[Model] ,[StockStatusNetworkID] ,[DeviceLife] ,[DefineScope] ,[EndoflifeofdeviceID] ,[DeviceSupportID] ,[ModelSize] ,[Processname] ,[SharedDedicatedID] ,[SystemAssetID] ,[IPAddress] ,[SiteName] ,[SerialNumber] ,
[AssetTypeNetworkID] ,TAGNumber  ,Location,error  ) 
		select 
		a.[PoNumber] ,[PoId] ,[PoDate] ,a.[GRNNumber] ,[GRNDate] ,a.[ItemCode] ,[TAGCount] ,[MajorCategory] ,[MinorCategory] ,[MinorSubCategory] ,[Description] ,[ManufacturerName] ,
[TaggableTypeID] ,[AssetTypeID] ,[ExpTypeID] ,[MakeNetworkID] ,[Model] ,[StockStatusNetworkID] ,[DeviceLife] ,[DefineScope] ,[EndoflifeofdeviceID] ,[DeviceSupportID] ,[ModelSize] ,[Processname] ,[SharedDedicatedID] ,[SystemAssetID] ,[IPAddress] ,[SiteName] ,[SerialNumber] ,
[AssetTypeNetworkID] ,TAGNumber  ,Location ,'data not found for PO ,GRN and Item code/PO not mapped to User' from @InventoryNetworkDetailType  
 a inner join #InventoryNetworkDetailTempE b on a.PoNumber= b.PONumber and a.GRNNumber=b.GRNNumber and a.ItemCode=b.ItemCode
-- where PoNumber= @PONumber and GRNNumber=@GRNNumber and ItemCode=@ItemCode
		

end

/****************************END: Network INSERTION ******************************************************************************************************************************************************/





/****************************START: SERVER INSERTION ******************************************************************************************************************************************************/
--select * from @InventoryDesktopDetailType
--select * from TD_Inventory 

if(exists(select top 1 1 from  @InventoryServerDetailType ))
	begin
		
		print 'Inserting Inventory ... Server' 

		--select @Count4=count(*) from @InventoryServerDetailType

		declare @ServerCnt int=1,@InventoryIDServer bigint=0

		--Check Duplicate Start


			
declare @tempSC table (ID bigint  identity(1,1), [PoNumber]  nvarchar(500), [GRNNumber]   nvarchar(500),[ItemCode]  nvarchar(500),qty bigint)
declare @ctS bigint=1,@actCntS bigint =0,@stdCntS bigint =0,@ActualInesrtCntS bigint =0,@qtyS bigint=0
	insert into @tempSC
	select a.[PoNumber],a.[GRNNumber],a.[ItemCode]	,count(a.[PoNumber])from @InventoryServerDetailType a group by a.[PoNumber],a.[GRNNumber],a.[ItemCode]

-- select * from @tempSC
IF OBJECT_ID('tempdb..#InventoryServerDetailTempE') IS NOT NULL                                              
								  BEGIN                                              
									DROP TABLE #InventoryServerDetailTempE                                            
								  END

		create  TABLE #InventoryServerDetailTempE (	[PoNumber] [nvarchar](100) NULL,	[GRNNumber] [nvarchar](250) NULL,	[ItemCode] [nvarchar](250) NULL)


while (@ctS<= (select count(*) from @tempSC))
	begin	


	select @PoNumber=PoNumber,@GRNNumber=GRNNumber,@ItemCode=ItemCode ,@qtyS=qty from @tempSC where ID=@ctS
		
		--2
		set  @AssetBookType=(select top 1 [BOOK_TYPE_CODE] from [WNS_PO_DETAILS_V] (nolock) where PONumber=@PoNumber)


		if(exists(select top 1 1 from TD_Inventory  (nolock)where PoNumber= @PONumber and GRNNumber=@GRNNumber and ItemCode=@ItemCode and  InventoryTypeID=4 group by PoNumber,GRNNumber,ItemCode))
			set @actCntS=(select count(*) from TD_Inventory (nolock) where PoNumber= @PONumber and GRNNumber=@GRNNumber and ItemCode=@ItemCode and  InventoryTypeID=4 group by PoNumber,GRNNumber,ItemCode)
		

		--set @stdCntS=(select   sum((cast( CAST(LTRIM(RTRIM(QUANTITY)) as decimal) as bigint )) ) from WNS_RCV_TRANSACTIONS (nolock) 
		-- 	 where PONumber= @PoNumber and GRNNumber=@GRNNumber and ItemCode=@ItemCode 	
		--  group by PONumber,GRNNumber,ItemCode)

		   set @stdCntS=(select  sum((cast(tag_count as bigint)* isnull(cast(cast (b.QUANTITY as decimal) as bigint),1)))--(select  sum((cast(tag_count as bigint)* isnull(cast(b.QUANTITY as bigint),1)))
 
			from WNS_PO_DETAILS_V(nolock) a inner join WNS_RCV_TRANSACTIONS(nolock) b
			on a.PONumber=b.PONumber and a.ItemCode=b.ItemCode 
			 and a.LineNum=b.PO_LINE_NUM
			inner join WNS_ITEM_MSTER_V (nolock)c on c.ItemCode=a.ItemCode and c.INVENTORY_ORG=a.INVENTORY_ORG
			where 

			a.PONumber=@PoNumber  and ( GRNNumber=@GRNNumber )
			and INV_TYPE='Server' 
			 and b.QUANTITY is not null)





		set @ActualInesrtCntS=@stdCntS-@actCntS

		  -- print cast(@ActualInesrtCnt as varchar(100))
		--Check Duplicate Start

		IF OBJECT_ID('tempdb..#InventoryServerDetailTemp') IS NOT NULL                                              
								  BEGIN                                              
									DROP TABLE #InventoryServerDetailTemp                                            
								  END




		create  TABLE #InventoryServerDetailTemp (
	[ID] [bigint] IDENTITY(1,1) NOT NULL,	
	[PoNumber] [nvarchar](100) NULL,
	[PoId] [nvarchar](250) NULL,
	[PoDate] [datetime] NULL,
	[GRNNumber] [nvarchar](250) NULL,
	[GRNDate] [datetime] NULL,
	[ItemCode] [nvarchar](250) NULL,
	[TAGCount] [nvarchar](250) NULL,
	[MajorCategory] [nvarchar](500) NULL,
	[MinorCategory] [nvarchar](500) NULL,
	[MinorSubCategory] [nvarchar](500) NULL,
	[Description] [nvarchar](3000) NULL,
	[ManufacturerName] [nvarchar](500) NULL,
	[TaggableTypeID] [nvarchar](250) NULL,
	[AssetTypeID] [nvarchar](250) NULL,
	[ExpTypeID] [nvarchar](250) NULL,
	[ServerName] [nvarchar](100) NULL,
	[ServerUsage] [nvarchar](100) NULL,
	[ServerDomain] [nvarchar](100) NULL,
	[ServerRole] [nvarchar](100) NULL,
	--[AcquistionDate] [datetime] NULL,
	[Asset] [nvarchar](100) NULL,
	[AssetNo] [nvarchar](100) NULL,
	[Environment] [nvarchar](100) NULL,
	[ServerStatusID] [nvarchar](250) NULL,
	[Product] [nvarchar](100) NULL,
	[Type] [nvarchar](100) NULL,
	[TypeNo] [nvarchar](100) NULL,
	[OSType] [nvarchar](100) NULL,
	[OS] [nvarchar](100) NULL,
	[NoOfProcessor] [nvarchar](100) NULL,			
	[SerialNumber] [nvarchar](100) NULL,
	TAGNumber  [nvarchar](100) NULL
	,Location [nvarchar](500) NULL
	,IsAdd bit NULL
	,error nvarchar(max),[SubLocation] [nvarchar](1000)  NULL,
	[SubMinorCategory] [nvarchar](100) NULL,
	[PropertyCode] [nvarchar](10) NULL,
	[DateOfAcquisition][nvarchar](100) NULL,
	[Remark] [nvarchar](max) NULL
	)

		insert into #InventoryServerDetailTemp
		select 
temp.[PoNumber]
      ,p.PoId
      ,cast( POCreationDate as datetime) [PoDate] ---
      ,temp.[GRNNumber]
      ,cast( R.GRNDate as datetime) [GRNDate] ---
      ,P.ItemCode
      ,I.TAG_COUNT
      ,I.MAJOR_CATEGORY
      ,I.MINOR_CATEGORY
      ,[MinorSubCategory]
      ,[Description]
	   ,P.VendorName
      ,(select top 1 pmval.Parametervalueid from [TM_Parameter] (nolock)pm inner join [TM_ParameterValue] pmval 
on pm.parameterid=pmval.parameterid
Where pm.parameterdescr='Taggable Type' and pmval.parametervalue= [TaggableTypeID]) ---
      ,(select top 1 pmval.Parametervalueid from [TM_Parameter] (nolock)pm inner join [TM_ParameterValue] pmval 
on pm.parameterid=pmval.parameterid
Where pm.parameterdescr='Asset Type' and pmval.parametervalue= [AssetTypeID]) 
      ,(select top 1 pmval.Parametervalueid from [TM_Parameter](nolock) pm inner join [TM_ParameterValue] pmval 
on pm.parameterid=pmval.parameterid
Where pm.parameterdescr='ExpType' and pmval.parametervalue= [ExpTypeID])	 
	   ,[ServerName]
      ,[ServerUsage]
      ,[ServerDomain]
      ,[ServerRole]
	  --,case when ISDATE([AcquistionDate]) =1 then cast( [AcquistionDate] as datetime) else null end [AcquistionDate] --Date Format
	  --,case when AcquistionDate='' then null else case when ISDATE([AcquistionDate]) =1 then cast( [AcquistionDate] as datetime) else null end end [AcquistionDate] --Date Format
	  --,case when [DateOfAcquisition] ='' then null else case when ISDATE([DateOfAcquisition]) =1 then cast( [DateOfAcquisition] as datetime) else '1900-01-01' end end [DateOfAcquisition] --Date Format
      ,[Asset]
      ,[AssetNo]
      ,[Environment]
--      ,(select pmval.Parametervalueid from [TM_Parameter](nolock) pm inner join [TM_ParameterValue] pmval 
--on pm.parameterid=pmval.parameterid
--Where pm.parameterdescr='StatusServer' and pmval.parametervalue= [ServerStatusID]) 

      ,case when [ServerStatusID] is null or  [ServerStatusID]='' then null
	   when [ServerStatusID] is not null or [ServerStatusID]<> '' then case when (select top 1 pmval.Parametervalueid from [TM_Parameter](nolock) pm inner join [TM_ParameterValue] pmval 
                                                                                  on pm.parameterid=pmval.parameterid
                                                                                  Where pm.parameterdescr='StatusServer' and pmval.parametervalue= [ServerStatusID]) is null then 0
																				  else 
																				  (select top 1 pmval.Parametervalueid from [TM_Parameter](nolock) pm inner join [TM_ParameterValue] pmval 
                                                                                  on pm.parameterid=pmval.parameterid
                                                                                  Where pm.parameterdescr='StatusServer' and pmval.parametervalue= [ServerStatusID]) end end as ServerStatusID
      ,[Product]
      ,[Type]
      ,[TypeNo]
      ,[OSType]
      ,[OS]
      ,[NoOfProcessor]	        
      ,[SerialNumber]
	  ,TAGNumber
	 ,I.INVENTORY_ORG
	 ,NULL
	  ,NULL
	  ,SubLocation
	  --,(select id from TM_SubMinorCategory  (nolock) where ltrim(rtrim(name))=ltrim(rtrim(temp.SubMinorCategory)))
	  	  ,case when temp.SubMinorCategory is null or temp.SubMinorCategory='' then null 
	        when temp.SubMinorCategory is not null or  temp.SubMinorCategory<>'' then case when (select id from TM_SubMinorCategory  (nolock) where ltrim(rtrim(name))=ltrim(rtrim(temp.SubMinorCategory))) is null then 0 else (select id from TM_SubMinorCategory  (nolock) where ltrim(rtrim(name))=ltrim(rtrim(temp.SubMinorCategory))) end end as SubMinorCategory
			,temp.[PropertyCode],temp.[DateOfAcquisition],temp.[Remark]
		from @InventoryServerDetailType temp inner join WNS_PO_DETAILS_V(nolock) P on temp.PoNumber=P.PoNumber and temp.ItemCode=P.ItemCode
	inner join WNS_ITEM_MSTER_V (nolock)I on temp.ItemCode=I.ItemCode and P.INVENTORY_ORG=I.INVENTORY_ORG
	inner join WNS_RCV_TRANSACTIONS(nolock) R on temp.PoNumber=R.PoNumber  and temp.ItemCode=R.ItemCode -- added by swati
	and temp.GRNNumber=R.GRNNumber ----8000049234
		----commented code for Ticket Number --8000049234
	--inner join [ufnGetCategoryLocation](@EmplId,@UserId,@RoleID) fC on  fC.MajorCategeory = (case when fC.MajorCategeory='All' then fC.MajorCategeory else temp.MajorCategory end ) 
 --   inner join [ufnGetCategoryLocation](@EmplId,@UserId,@RoleID) fL on fL.Location= (case when fL.Location='All' then  fL.Location else temp.Location end )
	 where temp.PoNumber= @PONumber and temp.GRNNumber=@GRNNumber and temp.ItemCode=@ItemCode
	  ----Added code for Ticket Number --8000049234
	 and temp.MajorCategory in (select case MajorCategeory when 'ALL' then temp.MajorCategory else MajorCategeory end  from [ufnGetCategoryLocation](@EmplId,@UserId,@RoleID))
	 and temp.Location in (select case Location when 'ALL' then temp.Location else Location end  from [ufnGetCategoryLocation](@EmplId,@UserId,@RoleID))
	
	
	
		update #InventoryServerDetailTemp set error=isnull(error,'')+'Enter valid Taggable Type' where TaggableTypeID is null
		update #InventoryServerDetailTemp set error=isnull(error,'')+'Enter valid Asset Type' where AssetTypeID is null
		update #InventoryServerDetailTemp set error=isnull(error,'')+'Enter valid Exp Type' where ExpTypeID is null
		update #InventoryServerDetailTemp set error=isnull(error,'')+'Enter valid Server Status' where ServerStatusID =0
		--update #InventoryServerDetailTemp set error=case when ISDATE([AcquistionDate]) =1 then null else isnull(error,'')+',Acquistion Date Should be mm/dd/yyyy format' end --Date Format
		update #InventoryServerDetailTemp set error=case 
		                                            when [DateOfAcquisition] is null or [DateOfAcquisition]='' then null 
													else  
													case when ISDATE([DateOfAcquisition]) =1 and convert(nvarchar(50),[DateOfAcquisition],111)<>'1900/01/01' then null else isnull(error,'')+',DateOfAcquisition be mm/dd/yyyy format' end --Date Format
													end
		update #InventoryServerDetailTemp set error=isnull(error,'')+',Enter Valid Sub Minor Category' where SubMinorCategory =0
			declare @InnercntS bigint =1
		if(exists(select top 1 1 from #InventoryServerDetailTemp))
		begin
				while (@InnercntS<= @qtyS)

		begin

		----Duplicate Tag Number checking----
		select @TagNumber=TAGNumber from #InventoryServerDetailTemp where ID=@InnercntS
		----Duplicate Tag Number checking ----

		if(@InnercntS <= @ActualInesrtCntS)
		begin

		
		----Duplicate Tag Number checking----

		if(exists ( select 'X' FROM TD_InventoryCommonDetail WHERE TagNumber= @TagNumber))
			begin
			  update #InventoryServerDetailTemp set error='Tag Number already exist' where ID=@InnercntS
			end

         ----Duplicate Tag Number checking----

		  print 'row by row insertion'		  
		if(exists(select top 1 1 from #InventoryServerDetailTemp where   ID=@InnercntS and error is null))
		begin

		print 'without error row procesing'
		insert into TD_Inventory( [PoNumber],[PoId],[PoDate],[GRNNumber],[GRNDate],[ItemCode],[TAGCount],[MajorCategory],[MinorCategory],[MinorSubCategory],[Description],[ManufacturerName],[TaggableTypeID],[AssetTypeID],[ExpTypeID],[InventoryTypeID],RecCreatedBy, RecCreatedDate)
		select [PoNumber],[PoId],[PoDate],[GRNNumber],[GRNDate],[ItemCode],[TAGCount],[MajorCategory],[MinorCategory],[MinorSubCategory],[Description],[ManufacturerName],[TaggableTypeID],[AssetTypeID],[ExpTypeID],4,@EmplId ,GETDATE() 
		 from #InventoryServerDetailTemp where   ID=@InnercntS


		set @InventoryIDServer=@@IDENTITY

		insert into TD_InventoryServerDetail(InventoryID,[ServerName]
      ,[ServerUsage]
      ,[ServerDomain]
      ,[ServerRole]
      ,[AcquistionDate]
      ,[Asset]
      ,[AssetNo]
      ,[Environment]
      ,[ServerStatusID]
      ,[Product]
      ,[Type]
      ,[TypeNo]
      ,[OSType]
      ,[OS]
      ,[NoOfProcessor]
	  ,[SerialNumber],RecCreatedBy,RecCreatedDate,SubLocation,SubMinorCategory)
		select @InventoryIDServer,
		[ServerName]
      ,[ServerUsage]
      ,[ServerDomain]
      ,[ServerRole]
      --,[AcquistionDate]
	  ,[DateOfAcquisition] as 'AcquistionDate'
      ,[Asset]
      ,[AssetNo]
      ,[Environment]
      ,[ServerStatusID]
      ,[Product]
      ,[Type]
      ,[TypeNo]
      ,[OSType]
      ,[OS]
      ,[NoOfProcessor]
	  ,[SerialNumber],@EmplId ,GETDATE(),SubLocation,SubMinorCategory from #InventoryServerDetailTemp where ID=@InnercntS

		insert into TD_InventoryCommonDetail([InventoryID] ,	[AssetModule] ,	[TAGNumber],	SerialNumber,[Location] ,RecCreatedBy,RecCreatedDate,BOOK_TYPE_CODE,Remark,[PropertyCode],[DateOfAcquisition])
		select @InventoryIDServer,'75',TAGNumber,SerialNumber,Location,@EmplId ,GETDATE(),@AssetBookType,Remark,[PropertyCode],[DateOfAcquisition] from #InventoryServerDetailTemp where ID=@InnercntS

		--set @Msg='Data Save Successfully.'
		set @Msg='File is uploaded successfully.'
		end
		

		end
		else
		begin
		 print 'Update error for duplicate'
		 update #InventoryServerDetailTemp set error='data already exists' where ID=@InnercntS
	

		end

	
		set @InnercntS=@InnercntS+1
		end
		end
		else
		begin

		print 'IN PO, GRN and ITEMCODE error'

		--#InventoryServerDetailTempE

		insert into #InventoryServerDetailTempE 
		select 	[PoNumber] ,	[GRNNumber] ,	[ItemCode]   from @InventoryServerDetailType   where PoNumber= @PONumber and GRNNumber=@GRNNumber and ItemCode=@ItemCode



		--insert into #InventoryServerDetailTemp([PoNumber] ,[PoId] ,[PoDate] ,[GRNNumber] ,[GRNDate] ,[ItemCode] ,[TAGCount] ,[MajorCategory] ,[MinorCategory] ,[MinorSubCategory] ,[Description] ,[ManufacturerName] ,
		--[TaggableTypeID] ,[AssetTypeID] ,[ExpTypeID] ,[ServerName] ,[ServerUsage] ,[ServerDomain] ,[ServerRole] ,[AcquistionDate] ,[Asset] ,[AssetNo] ,[Environment] ,[ServerStatusID] ,[Product] ,[Type] ,[TypeNo] ,[OSType] ,[OS] ,[NoOfProcessor] ,[SerialNumber] ,TAGNumber  ,Location ) 
		--select [PoNumber] ,[PoId] ,[PoDate] ,[GRNNumber] ,[GRNDate] ,[ItemCode] ,[TAGCount] ,[MajorCategory] ,[MinorCategory] ,[MinorSubCategory] ,[Description] ,[ManufacturerName] ,[TaggableTypeID] ,[AssetTypeID] ,[ExpTypeID] ,[ServerName] ,[ServerUsage] ,[ServerDomain] ,
		--[ServerRole] ,[AcquistionDate] ,[Asset] ,[AssetNo] ,[Environment] ,[ServerStatusID] ,[Product] ,[Type] ,[TypeNo] ,[OSType] ,[OS] ,[NoOfProcessor] ,[SerialNumber] ,TAGNumber  ,Location 
		--from @InventoryServerDetailType   where PoNumber= @PONumber and GRNNumber=@GRNNumber and ItemCode=@ItemCode
		
		
		--update #InventoryServerDetailTemp set error='data not found for PO ,GRN and Item code/PO not mapped to User'
		 
		end



set @ctS=@ctS+1
end


		insert into #InventoryServerDetailTemp([PoNumber] ,[PoId] ,[PoDate] ,[GRNNumber] ,[GRNDate] ,[ItemCode] ,[TAGCount] ,[MajorCategory] ,[MinorCategory] ,[MinorSubCategory] ,[Description] ,[ManufacturerName] ,
		[TaggableTypeID] ,[AssetTypeID] ,[ExpTypeID] ,[ServerName] ,[ServerUsage] ,[ServerDomain] ,[ServerRole] ,[DateOfAcquisition] ,[Asset] ,[AssetNo] ,[Environment] ,[ServerStatusID] ,[Product] ,[Type] ,[TypeNo] ,[OSType] ,[OS] ,[NoOfProcessor] ,[SerialNumber] ,TAGNumber  ,Location,error  ) 
		select a.[PoNumber] ,[PoId] ,[PoDate] ,a.[GRNNumber] ,[GRNDate] ,a.[ItemCode] ,[TAGCount] ,[MajorCategory] ,[MinorCategory] ,[MinorSubCategory] ,[Description] ,[ManufacturerName] ,[TaggableTypeID] ,[AssetTypeID] ,[ExpTypeID] ,[ServerName] ,[ServerUsage] ,[ServerDomain] ,
		[ServerRole] ,[DateOfAcquisition] ,[Asset] ,[AssetNo] ,[Environment] ,[ServerStatusID] ,[Product] ,[Type] ,[TypeNo] ,[OSType] ,[OS] ,[NoOfProcessor] ,[SerialNumber] ,TAGNumber  ,Location ,'data not found for PO ,GRN and Item code/PO not mapped to User'
		from @InventoryServerDetailType  -- where PoNumber= @PONumber and GRNNumber=@GRNNumber and ItemCode=@ItemCode
		a inner join #InventoryServerDetailTempE b on a.PoNumber= b.PONumber and a.GRNNumber=b.GRNNumber and a.ItemCode=b.ItemCode
		
		

	end

/****************************END: server INSERTION ******************************************************************************************************************************************************/




/****************************START: Telecom INSERTION ******************************************************************************************************************************************************/
--select * from @InventoryDesktopDetailType
--select * from TD_Inventory 

if(exists(select top 1 1 from  @InventoryTelecomDetailType ))
	begin
		
		print 'Inserting Inventory ... Telecom' 


		--select @Count5=count(*) from @InventoryTelecomDetailType

		declare @TelCnt int=1,@InventoryIDTel bigint=0
	


		
declare @tempTC table (ID bigint  identity(1,1), [PoNumber]  nvarchar(500), [GRNNumber]   nvarchar(500),[ItemCode]  nvarchar(500),qty bigint)
declare @ctT bigint=1,@actCntT bigint =0,@stdCntT bigint =0,@ActualInesrtCntT bigint =0,@qtyT BIGINT=0
	insert into @tempTC
	select a.[PoNumber],a.[GRNNumber],a.[ItemCode]	,count(a.[PoNumber])from @InventoryTelecomDetailType a group by a.[PoNumber],a.[GRNNumber],a.[ItemCode]

--select * from @tempTC

IF OBJECT_ID('tempdb..#InventoryTelecomDetailTempE') IS NOT NULL                                              
								  BEGIN                                              
									DROP TABLE #InventoryTelecomDetailTempE                                            
								  END

		create  TABLE #InventoryTelecomDetailTempE (	[PoNumber] [nvarchar](100) NULL,	[GRNNumber] [nvarchar](250) NULL,	[ItemCode] [nvarchar](250) NULL)


while (@ctT<= (select count(*) from @tempTC))
	begin	


	select @PoNumber=PoNumber,@GRNNumber=GRNNumber,@ItemCode=ItemCode ,@qtyT=qty from @tempTC where ID=@ctT
		
		--2
		set  @AssetBookType=(select top 1 [BOOK_TYPE_CODE] from [WNS_PO_DETAILS_V] (nolock) where PONumber=@PoNumber)


		if(exists(select top 1 1 from TD_Inventory (nolock) where PoNumber= @PONumber and GRNNumber=@GRNNumber and ItemCode=@ItemCode and  InventoryTypeID=3 group by PoNumber,GRNNumber,ItemCode))
			set @actCntT=(select count(*) from TD_Inventory(nolock)  where PoNumber= @PONumber and GRNNumber=@GRNNumber and ItemCode=@ItemCode and  InventoryTypeID=3 group by PoNumber,GRNNumber,ItemCode)
		
		--7
		

		--set @stdCntT=(select   sum((cast( CAST(LTRIM(RTRIM(QUANTITY)) as decimal) as bigint )) ) from WNS_RCV_TRANSACTIONS (nolock) 
		-- where PONumber= @PoNumber and GRNNumber=@GRNNumber and ItemCode=@ItemCode 	group by PONumber,GRNNumber,ItemCode)
		set @stdCntT=(select  sum((cast(tag_count as bigint)* isnull(cast(cast(b.QUANTITY as decimal) as bigint),1)))--(select  sum((cast(tag_count as bigint)* isnull(cast(b.QUANTITY as bigint),1)))
 
			from WNS_PO_DETAILS_V(nolock) a inner join WNS_RCV_TRANSACTIONS(nolock) b
			on a.PONumber=b.PONumber and a.ItemCode=b.ItemCode 
			 and a.LineNum=b.PO_LINE_NUM
			inner join WNS_ITEM_MSTER_V (nolock)c on c.ItemCode=a.ItemCode and c.INVENTORY_ORG=a.INVENTORY_ORG
			where 

			a.PONumber=@PoNumber  and ( GRNNumber=@GRNNumber )
			and INV_TYPE=LTRIM(RTRIM('TELECOM ')) 
			 and b.QUANTITY is not null)

		  --print 'count'
		  --print cast(@qty as varchar(100))
		  -- print cast(@actCnt as varchar(100))
		  --  print cast(@stdCnt as varchar(100))

		set @ActualInesrtCntT=@stdCntT-@actCntT

		  -- print cast(@ActualInesrtCnt as varchar(100))
		--Check Duplicate Start

		IF OBJECT_ID('tempdb..#InventoryTelecomDetailTemp') IS NOT NULL                                              
								  BEGIN                                              
									DROP TABLE #InventoryTelecomDetailTemp                                            
								  END



	create  TABLE #InventoryTelecomDetailTemp (
	[ID] [bigint] IDENTITY(1,1) NOT NULL,	
	[PoNumber] [nvarchar](100) NULL,
	[PoId] [nvarchar](250) NULL,
	[PoDate] [datetime] NULL,
	[GRNNumber] [nvarchar](250) NULL,
	[GRNDate] [datetime] NULL,
	[ItemCode] [nvarchar](250) NULL,
	[TAGCount] [nvarchar](250) NULL,
	[MajorCategory] [nvarchar](500) NULL,
	[MinorCategory] [nvarchar](500) NULL,
	[MinorSubCategory] [nvarchar](500) NULL,
	[Description] [nvarchar](3000) NULL,
	[ManufacturerName] [nvarchar](500) NULL,
	[TaggableTypeID] [nvarchar](250) NULL,
	[AssetTypeID] [nvarchar](250) NULL,
	[ExpTypeID] [nvarchar](250) NULL,
	[HostName] [nvarchar](100) NULL,
	[MakeTelecomID] [nvarchar](250) NULL,
	[ModelTelecom] [nvarchar](250) NULL,
	[DeviceLifeTelecomID] [nvarchar](250) NULL,
	[StockStatusTelecomID] [nvarchar](250) NULL,
	[AssetTypeTelecomID] [nvarchar](250) NULL,			
	[SerialNumber] [nvarchar](100) NULL,
	TAGNumber  [nvarchar](100) NULL
	,Location [nvarchar](500) NULL
	,IsAdd bit NULL 
	,error nvarchar(max)
	,[SubLocation] [nvarchar](1000)  NULL,
	[SubMinorCategory] [nvarchar](100) NULL,
	[PropertyCode] [nvarchar](10) NULL,
	[DateOfAcquisition][nvarchar](100) NULL,
	[Remark] [nvarchar](max) NULL
	)

		insert into #InventoryTelecomDetailTemp
		select 
		temp.[PoNumber]
      ,p.PoId
      ,cast( POCreationDate as datetime) [PoDate] ---
      ,temp.[GRNNumber]
      ,cast( R.GRNDate as datetime) [GRNDate] ---
      ,P.ItemCode
      ,I.TAG_COUNT
      ,I.MAJOR_CATEGORY
      ,I.MINOR_CATEGORY
      ,[MinorSubCategory]
      ,[Description]
            ,P.VendorName
      ,(select top 1 pmval.Parametervalueid from [TM_Parameter](nolock) pm inner join [TM_ParameterValue] pmval 
on pm.parameterid=pmval.parameterid
Where pm.parameterdescr='Taggable Type' and pmval.parametervalue= [TaggableTypeID]) ---
      ,(select top 1 pmval.Parametervalueid from [TM_Parameter] (nolock)pm inner join [TM_ParameterValue] pmval 
on pm.parameterid=pmval.parameterid
Where pm.parameterdescr='Asset Type' and pmval.parametervalue= [AssetTypeID])  ---
      ,(select top 1 pmval.Parametervalueid from [TM_Parameter] (nolock)pm inner join [TM_ParameterValue] pmval 
on pm.parameterid=pmval.parameterid
Where pm.parameterdescr='ExpType' and pmval.parametervalue= [ExpTypeID])  --
	 
	  ,[HostName]
      ,(select top 1 pmval.Parametervalueid from [TM_Parameter] (nolock)pm inner join [TM_ParameterValue] pmval 
on pm.parameterid=pmval.parameterid
Where pm.parameterdescr='MakeTelecom' and pmval.parametervalue= [MakeTelecomID]) 
      ,(select top 1 pmval.Parametervalueid from [TM_Parameter] (nolock)pm inner join [TM_ParameterValue] pmval 
on pm.parameterid=pmval.parameterid
Where pm.parameterdescr='ModelTelecom' and pmval.parametervalue= [ModelTelecom])  
 
--      ,(select pmval.Parametervalueid from [TM_Parameter] (nolock)pm inner join [TM_ParameterValue] pmval 
--on pm.parameterid=pmval.parameterid
--Where pm.parameterdescr='DevicelifeTelecom' and pmval.parametervalue= [DeviceLifeTelecomID])

      ,case when DeviceLifeTelecomID is null or  DeviceLifeTelecomID='' then null
	 when DeviceLifeTelecomID is not null or DeviceLifeTelecomID<> '' then case when (select top 1 pmval.Parametervalueid from [TM_Parameter] (nolock)pm inner join [TM_ParameterValue] pmval 
                                                                                      on pm.parameterid=pmval.parameterid
                                                                                      Where pm.parameterdescr='DevicelifeTelecom' and pmval.parametervalue= [DeviceLifeTelecomID]) is null then 0
																					  else   (select top 1 pmval.Parametervalueid from [TM_Parameter] (nolock)pm inner join [TM_ParameterValue] pmval 
                                                                                      on pm.parameterid=pmval.parameterid
                                                                                      Where pm.parameterdescr='DevicelifeTelecom' and pmval.parametervalue= [DeviceLifeTelecomID]) end end as DeviceLifeTelecomID

--      ,(select pmval.Parametervalueid from [TM_Parameter](nolock) pm inner join [TM_ParameterValue] pmval 
--on pm.parameterid=pmval.parameterid
--Where pm.parameterdescr='StockStatusTelecom' and pmval.parametervalue= [StockStatusTelecomID]) 

      ,case when StockStatusTelecomID is null or  StockStatusTelecomID='' then null
	   when StockStatusTelecomID is not null or StockStatusTelecomID<> '' then case when (select top 1 pmval.Parametervalueid from [TM_Parameter](nolock) pm inner join [TM_ParameterValue] pmval 
                                                                                          on pm.parameterid=pmval.parameterid
                                                                                          Where pm.parameterdescr='StockStatusTelecom' and pmval.parametervalue= [StockStatusTelecomID]) is null then 0
																						  else (select top 1 pmval.Parametervalueid from [TM_Parameter](nolock) pm inner join [TM_ParameterValue] pmval 
                                                                                          on pm.parameterid=pmval.parameterid
                                                                                          Where pm.parameterdescr='StockStatusTelecom' and pmval.parametervalue= [StockStatusTelecomID]) end end as StockStatusTelecomID

     -- ,cast([AssetTypeTelecomID]as int) [AssetTypeTelecomID]
	 ,0 --As Per Manual Inventory
	        
      ,[SerialNumber]
	  ,TAGNumber
	 ,I.INVENTORY_ORG
	 ,NULL,NULL,SubLocation,
	 --(select id from TM_SubMinorCategory  (nolock) where ltrim(rtrim(name))=ltrim(rtrim(temp.SubMinorCategory)))
	 case when temp.SubMinorCategory is null or temp.SubMinorCategory='' then null 
	        when temp.SubMinorCategory is not null or  temp.SubMinorCategory<>'' then case when (select id from TM_SubMinorCategory  (nolock) where ltrim(rtrim(name))=ltrim(rtrim(temp.SubMinorCategory))) is null then 0 else (select id from TM_SubMinorCategory  (nolock) where ltrim(rtrim(name))=ltrim(rtrim(temp.SubMinorCategory))) end end as SubMinorCategory
	  ,temp.[PropertyCode],temp.[DateOfAcquisition],temp.[Remark]
		from @InventoryTelecomDetailType temp inner join WNS_PO_DETAILS_V (nolock)P on temp.PoNumber=P.PoNumber and temp.ItemCode=P.ItemCode
	inner join WNS_ITEM_MSTER_V (nolock)I on temp.ItemCode=I.ItemCode and P.INVENTORY_ORG=I.INVENTORY_ORG
	inner join WNS_RCV_TRANSACTIONS (nolock)R on temp.PoNumber=R.PoNumber  and temp.ItemCode=R.ItemCode -- added by swati
	and temp.GRNNumber=R.GRNNumber ----8000049234
	----commented code for Ticket Number --8000049234
	--inner join [ufnGetCategoryLocation](@EmplId,@UserId,@RoleID) fC on  fC.MajorCategeory = (case when fC.MajorCategeory='All' then fC.MajorCategeory else temp.MajorCategory end ) 
 --  inner join [ufnGetCategoryLocation](@EmplId,@UserId,@RoleID) fL on fL.Location= (case when fL.Location='All' then  fL.Location else temp.Location end ) 
	 where temp.PoNumber= @PONumber and temp.GRNNumber=@GRNNumber and temp.ItemCode=@ItemCode
	  ----Added code for Ticket Number --8000049234
	 and temp.MajorCategory in (select case MajorCategeory when 'ALL' then temp.MajorCategory else MajorCategeory end  from [ufnGetCategoryLocation](@EmplId,@UserId,@RoleID))
	 and temp.Location in (select case Location when 'ALL' then temp.Location else Location end  from [ufnGetCategoryLocation](@EmplId,@UserId,@RoleID))

	 

	 update #InventoryTelecomDetailTemp set error=isnull(error,'')+'Enter valid Taggable Type' where TaggableTypeID is null
		update #InventoryTelecomDetailTemp set error=isnull(error,'')+'Enter valid Asset Type' where AssetTypeID is null
		update #InventoryTelecomDetailTemp set error=isnull(error,'')+'Enter valid Exp Type' where ExpTypeID is null
		update #InventoryTelecomDetailTemp set error=isnull(error,'')+'Enter valid Make Telecom' where MakeTelecomID is null
		update #InventoryTelecomDetailTemp set error=isnull(error,'')+'Enter valid Model Telecom' where ModelTelecom is null
		update #InventoryTelecomDetailTemp set error=isnull(error,'')+'Enter valid DeviceLife Telecom' where DeviceLifeTelecomID =0
		update #InventoryTelecomDetailTemp set error=isnull(error,'')+'Enter valid StockStatus Telecom' where StockStatusTelecomID =0
		update #InventoryTelecomDetailTemp set error=isnull(error,'')+',Enter Valid Sub Minor Category' where SubMinorCategory =0

		declare @InnercntT bigint =1
		if(exists(select top 1 1 from #InventoryTelecomDetailTemp))
		begin

				while (@InnercntT<= @qtyT)

		begin

		----Duplicate Tag Number checking----
		select @TagNumber=TAGNumber from #InventoryTelecomDetailTemp where ID=@InnercntT
		----Duplicate Tag Number checking ----

		if(@InnercntT <= @ActualInesrtCntT)
		begin

		----Duplicate Tag Number checking----

		if(exists ( select 'X' FROM TD_InventoryCommonDetail WHERE TagNumber= @TagNumber))
			begin
			  update #InventoryTelecomDetailTemp set error='Tag Number already exist' where ID=@InnercntT
			end

         ----Duplicate Tag Number checking---- 

		  print 'row by row insertion'		  
		if(exists(select top 1 1 from #InventoryTelecomDetailTemp where   ID=@InnercntT and error is null))
		begin
		print 'without error row procesing'
		insert into TD_Inventory( [PoNumber],[PoId],[PoDate],[GRNNumber],[GRNDate],[ItemCode],[TAGCount],[MajorCategory],[MinorCategory],[MinorSubCategory],[Description],[ManufacturerName],[TaggableTypeID],[AssetTypeID],[ExpTypeID],[InventoryTypeID],RecCreatedBy, RecCreatedDate)
		select [PoNumber],[PoId],[PoDate],[GRNNumber],[GRNDate],[ItemCode],[TAGCount],[MajorCategory],[MinorCategory],[MinorSubCategory],[Description],[ManufacturerName],[TaggableTypeID],[AssetTypeID],[ExpTypeID],3,@EmplId ,GETDATE() 
		 from #InventoryTelecomDetailTemp where   ID=@InnercntT



		 set @InventoryIDTel=@@IDENTITY

		insert into TD_InventoryTelecomDetail(InventoryID,[HostName]
      ,[MakeTelecomID]
      ,[ModelTelecom]
      ,[DeviceLifeTelecomID]
      ,[StockStatusTelecomID]
      ,[AssetTypeTelecomID]
	  ,[SerialNumber],RecCreatedBy,RecCreatedDate,SubLocation,SubMinorCategory)
		select @InventoryIDTel,
		[HostName]
      ,[MakeTelecomID]
      ,[ModelTelecom]
      ,[DeviceLifeTelecomID]
      ,[StockStatusTelecomID]
      ,[AssetTypeTelecomID]
	  ,[SerialNumber],@EmplId ,GETDATE(),SubLocation,SubMinorCategory  from #InventoryTelecomDetailTemp where   ID=@InnercntT

		insert into TD_InventoryCommonDetail([InventoryID] ,	[AssetModule] ,	[TAGNumber],SerialNumber,	[Location],RecCreatedBy,RecCreatedDate ,BOOK_TYPE_CODE,Remark,[PropertyCode],[DateOfAcquisition])
		select @InventoryIDTel,'75',TAGNumber,SerialNumber,Location,@EmplId ,GETDATE(),@AssetBookType ,Remark,[PropertyCode],[DateOfAcquisition] from #InventoryTelecomDetailTemp where   ID=@InnercntT

		--set @Msg='Data Save Successfully.'
		set @Msg='File is uploaded successfully.'
		
		end
		

		end
		else
		begin
		 print 'Update error for duplicate'
		 update #InventoryTelecomDetailTemp set error='data already exists' where ID=@InnercntT
	

		end

	
		set @InnercntT=@InnercntT+1
		end
		end
		else
		begin

		print 'IN PO, GRN and ITEMCODE error'
		--  #InventoryTelecomDetailTempE
		insert into #InventoryTelecomDetailTempE 
		select 	[PoNumber] ,	[GRNNumber] ,	[ItemCode]   from @InventoryTelecomDetailType   where PoNumber= @PONumber and GRNNumber=@GRNNumber and ItemCode=@ItemCode



		--insert into #InventoryTelecomDetailTemp([PoNumber] ,[PoId] ,[PoDate] ,[GRNNumber] ,[GRNDate] ,[ItemCode] ,[TAGCount] ,[MajorCategory] ,[MinorCategory] ,[MinorSubCategory] ,[Description] ,[ManufacturerName] ,[TaggableTypeID] ,[AssetTypeID] ,
		--[ExpTypeID] ,[HostName] ,[MakeTelecomID] ,[ModelTelecom] ,[DeviceLifeTelecomID] ,[StockStatusTelecomID] ,[AssetTypeTelecomID] ,[SerialNumber] ,TAGNumber  ,Location ) 
		--select [PoNumber] ,[PoId] ,[PoDate] ,[GRNNumber] ,[GRNDate] ,[ItemCode] ,[TAGCount] ,[MajorCategory] ,[MinorCategory] ,[MinorSubCategory] ,[Description] ,[ManufacturerName] ,[TaggableTypeID] ,[AssetTypeID] ,
		--[ExpTypeID] ,[HostName] ,[MakeTelecomID] ,[ModelTelecom] ,[DeviceLifeTelecomID] ,[StockStatusTelecomID] ,[AssetTypeTelecomID] ,[SerialNumber] ,TAGNumber  ,Location
		-- from @InventoryTelecomDetailType   where PoNumber= @PONumber and GRNNumber=@GRNNumber and ItemCode=@ItemCode
		
		
		--update #InventoryTelecomDetailTemp set error='data not found for PO ,GRN and Item code/PO not mapped to User'
		 
		 --	select * from #InventoryDesktopDetailTemp
		end



set @ctT=@ctT+1
end	
	
		insert into #InventoryTelecomDetailTemp([PoNumber] ,[PoId] ,[PoDate] ,[GRNNumber] ,[GRNDate] ,[ItemCode] ,[TAGCount] ,[MajorCategory] ,[MinorCategory] ,[MinorSubCategory] ,[Description] ,[ManufacturerName] ,[TaggableTypeID] ,[AssetTypeID] ,
		[ExpTypeID] ,[HostName] ,[MakeTelecomID] ,[ModelTelecom] ,[DeviceLifeTelecomID] ,[StockStatusTelecomID] ,[AssetTypeTelecomID] ,[SerialNumber] ,TAGNumber  ,Location,error ) 
		select a.[PoNumber] ,[PoId] ,[PoDate] ,a.[GRNNumber] ,[GRNDate] ,a.[ItemCode] ,[TAGCount] ,[MajorCategory] ,[MinorCategory] ,[MinorSubCategory] ,[Description] ,[ManufacturerName] ,[TaggableTypeID] ,[AssetTypeID] ,
		[ExpTypeID] ,[HostName] ,[MakeTelecomID] ,[ModelTelecom] ,[DeviceLifeTelecomID] ,[StockStatusTelecomID] ,[AssetTypeTelecomID] ,[SerialNumber] ,TAGNumber  ,Location,'data not found for PO ,GRN and Item code/PO not mapped to User'
		 from @InventoryTelecomDetailType  a inner join #InventoryTelecomDetailTempE b on a.PoNumber= b.PONumber and a.GRNNumber=b.GRNNumber and a.ItemCode=b.ItemCode-- where PoNumber= @PONumber and GRNNumber=@GRNNumber and ItemCode=@ItemCode
		
		

	end

/****************************END: Telecom INSERTION ******************************************************************************************************************************************************/



/****************************START:Inventory P2 Changes Infra INSERTION ******************************************************************************************************************************************************/
if(exists(select top 1 1 from  @InventoryInfraDetailType ))
	begin
		
		print 'Inserting Inventory ... Infra' 

		declare @InfraCnt int=1,@InventoryIDInfra bigint=0

			
declare @tempINF table (ID bigint  identity(1,1), [PoNumber]  nvarchar(500), [GRNNumber]   nvarchar(500),[ItemCode]  nvarchar(500),qty bigint)
declare @ctI bigint=1,@actCntI bigint =0,@stdCntI bigint =0,@ActualInesrtCntI bigint =0,@qtyI bigint=0
	insert into @tempINF
	select a.[PoNumber],a.[GRNNumber],a.[ItemCode]	,count(a.[PoNumber])from @InventoryInfraDetailType a group by a.[PoNumber],a.[GRNNumber],a.[ItemCode]

 ----select '@tempINF',* from @tempINF


IF OBJECT_ID('tempdb..#InventoryInfraDetailTempE') IS NOT NULL                                              
								  BEGIN                                              
									DROP TABLE #InventoryInfraDetailTempE                                            
								  END

		create  TABLE #InventoryInfraDetailTempE (	[PoNumber] [nvarchar](100) NULL,	[GRNNumber] [nvarchar](250) NULL,	[ItemCode] [nvarchar](250) NULL)


while (@ctI<= (select count(*) from @tempINF))
	begin	


	select @PoNumber=PoNumber,@GRNNumber=GRNNumber,@ItemCode=ItemCode ,@qtyI=qty from @tempINF where ID=@ctI
		set  @AssetBookType=(select top 1 [BOOK_TYPE_CODE] from [WNS_PO_DETAILS_V] (nolock) where PONumber=@PoNumber)

		--2
		if(exists(select top 1 1 from TD_Inventory  (nolock)where PoNumber= @PONumber and GRNNumber=@GRNNumber and ItemCode=@ItemCode and  InventoryTypeID=6 group by PoNumber,GRNNumber,ItemCode))
			set @actCntI=(select count(*) from TD_Inventory (nolock) where PoNumber= @PONumber and GRNNumber=@GRNNumber and ItemCode=@ItemCode and  InventoryTypeID=6 group by PoNumber,GRNNumber,ItemCode)
		

		--set @stdCntI=(select   sum((cast( CAST(LTRIM(RTRIM(QUANTITY)) as decimal) as bigint )) ) from WNS_RCV_TRANSACTIONS (nolock) 
		-- 	 where PONumber= @PoNumber and GRNNumber=@GRNNumber and ItemCode=@ItemCode 	
		--  group by PONumber,GRNNumber,ItemCode)

set @stdCntI=(select  sum((cast(tag_count as bigint)* isnull(cast( cast (b.QUANTITY as decimal) as bigint),1)))--(select  sum((cast(tag_count as bigint)* isnull(cast(b.QUANTITY as bigint),1)))
 
			from WNS_PO_DETAILS_V(nolock) a inner join WNS_RCV_TRANSACTIONS(nolock) b
			on a.PONumber=b.PONumber and a.ItemCode=b.ItemCode 
			 and a.LineNum=b.PO_LINE_NUM
			inner join WNS_ITEM_MSTER_V (nolock)c on c.ItemCode=a.ItemCode and c.INVENTORY_ORG=a.INVENTORY_ORG
			where 

			a.PONumber=@PoNumber  and ( GRNNumber=@GRNNumber )
			and INV_TYPE='Infra' 
			 and b.QUANTITY is not null)


		set @ActualInesrtCntI=@stdCntI-@actCntI

		  -- print cast(@@ActualInesrtCntI as varchar(100))
		--Check Duplicate Start

		IF OBJECT_ID('tempdb..#InventoryInfraDetailTemp') IS NOT NULL                                              
								  BEGIN                                              
									DROP TABLE #InventoryInfraDetailTemp                                            
								  END




		create  TABLE #InventoryInfraDetailTemp (
	[ID] [bigint] IDENTITY(1,1) NOT NULL,	
	[PoNumber] [nvarchar](100) NULL,
	[PoId] [nvarchar](250) NULL,
	[PoDate] [datetime] NULL,
	[GRNNumber] [nvarchar](250) NULL,
	[GRNDate] [datetime] NULL,
	[ItemCode] [nvarchar](250) NULL,
	[TAGCount] [nvarchar](250) NULL,
	[MajorCategory] [nvarchar](500) NULL,
	[MinorCategory] [nvarchar](500) NULL,
	[MinorSubCategory] [nvarchar](500) NULL,
	[Description] [nvarchar](3000) NULL,
	[ManufacturerName] [nvarchar](500) NULL,
	[TaggableTypeID] [nvarchar](250) NULL,
	[AssetTypeID] [nvarchar](250) NULL,
	[ExpTypeID] [nvarchar](250) NULL,

	[SiteName] [nvarchar](100) NULL,
	[InventoryAssetType] [nvarchar](100) NULL,
	[HostName] [nvarchar](100) NULL,
	[ProcessName] [nvarchar](100) NULL,
	[IPAddress] [nvarchar] (100) NULL,
	[Make] [nvarchar](100) NULL,
	[Model] [nvarchar](100) NULL,
	[SharedDedicated] [nvarchar](100) NULL,
	[DefineScope] [nvarchar](250) NULL,
	[DeviceSupport] [nvarchar](100) NULL,
	[StockStatus] [nvarchar](100) NULL,
	[SerialNumber] [nvarchar](100) NULL,
	[TAGNumber]  [nvarchar](100) NULL,
	[Location] [nvarchar](500) NULL,
	IsAdd bit NULL,
	error nvarchar(max),
	[SubLocation] [nvarchar](1000)  NULL,
	[SubMinorCategory] [nvarchar](100) NULL ,
	[PropertyCode] [nvarchar](10) NULL,
	[DateOfAcquisition][nvarchar](100) NULL,
	[Remark] [nvarchar](max) NULL
	)

		insert into #InventoryInfraDetailTemp
		select 
       temp.[PoNumber]
      ,p.PoId
      ,cast( POCreationDate as datetime) [PoDate] ---
      ,temp.[GRNNumber]
      ,cast( R.GRNDate as datetime) [GRNDate] ---
      ,P.ItemCode
      ,I.TAG_COUNT
      ,I.MAJOR_CATEGORY
      ,I.MINOR_CATEGORY
      ,[MinorSubCategory]
      ,[Description]
	   ,P.VendorName
      ,(select top 1 pmval.Parametervalueid from [TM_Parameter] (nolock)pm inner join [TM_ParameterValue] pmval 
on pm.parameterid=pmval.parameterid
Where pm.parameterdescr='Taggable Type' and pmval.parametervalue= [TaggableTypeID]) ---
      ,(select top 1 pmval.Parametervalueid from [TM_Parameter] (nolock)pm inner join [TM_ParameterValue] pmval 
on pm.parameterid=pmval.parameterid
Where pm.parameterdescr='Asset Type' and pmval.parametervalue= [AssetTypeID]) 
      ,(select top 1 pmval.Parametervalueid from [TM_Parameter](nolock) pm inner join [TM_ParameterValue] pmval 
on pm.parameterid=pmval.parameterid
Where pm.parameterdescr='ExpType' and pmval.parametervalue= [ExpTypeID])
	 
	  ,[SiteName]

	  --InventoryAssetTypeInfra
      ,case when InventoryAssetType is null or InventoryAssetType='' then null
	  when InventoryAssetType is not null or InventoryAssetType<> '' then case when (select TOP 1 pmval.Parametervalueid from [TM_Parameter](nolock) pm inner join [TM_ParameterValue] pmval 
		                                                                             on pm.parameterid=pmval.parameterid
		                                                                              Where pm.parameterdescr='InventoryAssetTypeInfra' and LTRIM(RTRIM(pmval.parametervalue))= LTRIM(RTRIM([InventoryAssetType]))) is null then 0
																					  else (select TOP 1 pmval.Parametervalueid from [TM_Parameter](nolock) pm inner join [TM_ParameterValue] pmval 
		                                                                             on pm.parameterid=pmval.parameterid
		                                                                              Where pm.parameterdescr='InventoryAssetTypeInfra' and LTRIM(RTRIM(pmval.parametervalue))= LTRIM(RTRIM([InventoryAssetType]))) end  end as InventoryAssetType


    ----HostName
      ,
	  case when HostName is null or HostName='' then null
	  when HostName is not null or HostName<> '' then case when (select TOP 1 pmval.Parametervalueid from [TM_Parameter](nolock) pm inner join [TM_ParameterValue](nolock) pmval 
		                                                         on pm.parameterid=pmval.parameterid
		                                                         Where pm.parameterdescr='HostNameInfra' and LTRIM(RTRIM(pmval.parametervalue))= LTRIM(RTRIM([HostName]))) is null then 0
																 else (select TOP 1 pmval.Parametervalueid from [TM_Parameter](nolock) pm inner join [TM_ParameterValue](nolock) pmval 
		                                                         on pm.parameterid=pmval.parameterid
		                                                         Where pm.parameterdescr='HostNameInfra' and LTRIM(RTRIM(pmval.parametervalue))= LTRIM(RTRIM([HostName]))) end end as HostName

      ,[ProcessName]
	  ,[IPAddress] 

      ,(select TOP 1 pmval.Parametervalueid from [TM_Parameter](nolock) pm inner join [TM_ParameterValue](nolock) pmval 
		on pm.parameterid=pmval.parameterid
		Where pm.parameterdescr='MakeInfra' and LTRIM(RTRIM(pmval.parametervalue))= LTRIM(RTRIM([Make])))

      ,(select TOP 1 pmval.Parametervalueid from [TM_Parameter](nolock) pm inner join [TM_ParameterValue](nolock) pmval 
		on pm.parameterid=pmval.parameterid
		Where pm.parameterdescr='ModelInfra' and LTRIM(RTRIM(pmval.parametervalue))= LTRIM(RTRIM([Model])))

		---Shared Dedicate
      ,case when SharedDedicated is null or SharedDedicated='' then null
	       when SharedDedicated is not null or SharedDedicated<> '' then case when (select TOP 1 pmval.Parametervalueid from [TM_Parameter](nolock) pm inner join [TM_ParameterValue](nolock) pmval 
		                                                                   on pm.parameterid=pmval.parameterid
		                                                                   Where pm.parameterdescr='SharedDedicatedInfra' and LTRIM(RTRIM(pmval.parametervalue))= LTRIM(RTRIM([SharedDedicated]))) is null then 0 

																		   else  (select TOP 1 pmval.Parametervalueid from [TM_Parameter](nolock) pm inner join [TM_ParameterValue](nolock) pmval 
		                                                                   on pm.parameterid=pmval.parameterid
		                                                                   Where pm.parameterdescr='SharedDedicatedInfra' and LTRIM(RTRIM(pmval.parametervalue))= LTRIM(RTRIM([SharedDedicated]))) end end as SharedDedicated

      ,[DefineScope]
 
       --DeviceSupportInfra
      ,case when DeviceSupport is null or  DeviceSupport='' then null
	  when DeviceSupport is not null or DeviceSupport<> '' then case when (select TOP 1 pmval.Parametervalueid from [TM_Parameter](nolock) pm inner join [TM_ParameterValue](nolock) pmval 
		                                                             on pm.parameterid=pmval.parameterid
		                                                              Where pm.parameterdescr='DeviceSupportInfra' and LTRIM(RTRIM(pmval.parametervalue))= LTRIM(RTRIM([DeviceSupport]))) is null then 0

																	  else (select TOP 1 pmval.Parametervalueid from [TM_Parameter](nolock) pm inner join [TM_ParameterValue](nolock) pmval 
		                                                               on pm.parameterid=pmval.parameterid
		                                                              Where pm.parameterdescr='DeviceSupportInfra' and LTRIM(RTRIM(pmval.parametervalue))= LTRIM(RTRIM([DeviceSupport]))) end end as DeviceSupport

   --StockStatus
      ,case when [StockStatus] is null or  [StockStatus]='' then null
	  when [StockStatus] is not null or [StockStatus]<> '' then case when (select TOP 1 pmval.Parametervalueid from [TM_Parameter](nolock) pm inner join [TM_ParameterValue](nolock) pmval 
		                                                                   on pm.parameterid=pmval.parameterid
		                                                                   Where pm.parameterdescr='StockStatusInfra' and LTRIM(RTRIM(pmval.parametervalue))= LTRIM(RTRIM([StockStatus]))) is null then 0

																		   else (select TOP 1 pmval.Parametervalueid from [TM_Parameter](nolock) pm inner join [TM_ParameterValue](nolock) pmval 
		                                                                   on pm.parameterid=pmval.parameterid
		                                                                   Where pm.parameterdescr='StockStatusInfra' and LTRIM(RTRIM(pmval.parametervalue))= LTRIM(RTRIM([StockStatus]))) end end as StockStatus

      ,[SerialNumber]
	  ,[TAGNumber]
	  ,I.INVENTORY_ORG
	  ,NULL
	  ,NULL
	  ,SubLocation

	  ,case when temp.SubMinorCategory is null or temp.SubMinorCategory='' then null 
	        when temp.SubMinorCategory is not null or  temp.SubMinorCategory<>'' then case when (select id from TM_SubMinorCategory  (nolock) where ltrim(rtrim(name))=ltrim(rtrim(temp.SubMinorCategory))) is null then 0 else (select id from TM_SubMinorCategory  (nolock) where ltrim(rtrim(name))=ltrim(rtrim(temp.SubMinorCategory))) end end as SubMinorCategory
	 ,temp.[PropertyCode],temp.[DateOfAcquisition],temp.[Remark]
		from @InventoryInfraDetailType temp inner join WNS_PO_DETAILS_V(nolock) P on temp.PoNumber=P.PoNumber and temp.ItemCode=P.ItemCode
	inner join WNS_ITEM_MSTER_V (nolock)I on temp.ItemCode=I.ItemCode and P.INVENTORY_ORG=I.INVENTORY_ORG
	inner join WNS_RCV_TRANSACTIONS(nolock) R on temp.PoNumber=R.PoNumber  and temp.ItemCode=R.ItemCode -- added by swati
	and temp.GRNNumber=R.GRNNumber ----8000049234
	----commented code for Ticket Number --8000049234
	--inner join [ufnGetCategoryLocation](@EmplId,@UserId,@RoleID) fC on  fC.MajorCategeory = (case when fC.MajorCategeory='All' then fC.MajorCategeory else temp.MajorCategory end ) 
 --   inner join [ufnGetCategoryLocation](@EmplId,@UserId,@RoleID) fL on fL.Location= (case when fL.Location='All' then  fL.Location else temp.Location end )
	 where temp.PoNumber= @PONumber and temp.GRNNumber=@GRNNumber and temp.ItemCode=@ItemCode


	 ----Added code for Ticket Number --8000049234
	 and temp.MajorCategory in (select case MajorCategeory when 'ALL' then temp.MajorCategory else MajorCategeory end  from [ufnGetCategoryLocation](@EmplId,@UserId,@RoleID))
	 and temp.Location in (select case Location when 'ALL' then temp.Location else Location end  from [ufnGetCategoryLocation](@EmplId,@UserId,@RoleID))
	
	
	----select '#After InventoryInfraDetailTemp', * from #InventoryInfraDetailTemp

	
		update #InventoryInfraDetailTemp set error=isnull(error,'')+'Enter valid Taggable Type ,' where TaggableTypeID is null
		update #InventoryInfraDetailTemp set error=isnull(error,'')+'Enter valid Asset Type ,' where AssetTypeID is null
		update #InventoryInfraDetailTemp set error=isnull(error,'')+'Enter valid Exp Type ,' where ExpTypeID is null
		update #InventoryInfraDetailTemp set error=isnull(error,'')+'Enter valid Make ,' where Make is null
		update #InventoryInfraDetailTemp set error=isnull(error,'')+'Enter valid Model ,' where Model is null
		update #InventoryInfraDetailTemp set error=isnull(error,'')+'Enter valid Shared Dedicated ,' where SharedDedicated =0
		update #InventoryInfraDetailTemp set error=isnull(error,'')+'Enter valid Device Support ,' where DeviceSupport =0
		update #InventoryInfraDetailTemp set error=isnull(error,'')+'Enter valid Stock Status ,' where StockStatus =0
		update #InventoryInfraDetailTemp set error=isnull(error,'')+'Enter valid Inventory Asset Type ,' where InventoryAssetType =0
		update #InventoryInfraDetailTemp set error=isnull(error,'')+'Enter valid Host Name ,' where HostName =0
		update #InventoryInfraDetailTemp set error=isnull(error,'')+'Enter Valid Sub Minor Category' where SubMinorCategory =0

		
			declare @InnercntI bigint =1
		if(exists(select top 1 1 from #InventoryInfraDetailTemp))
		begin
				while (@InnercntI<= @qtyI)

		begin

		

		----Duplicate Tag Number checking----
		select @TagNumber=TAGNumber from #InventoryInfraDetailTemp where ID=@InnercntI
		----Duplicate Tag Number checking ----

		if(@InnercntI <= @ActualInesrtCntI)
		begin
		----select @InnercntI as '@InnercntI',@qtyI as '@qtyI',@ActualInesrtCntI as '@ActualInesrtCntI'

		----Duplicate Tag Number checking----

		if(exists ( select 'X' FROM TD_InventoryCommonDetail WHERE TagNumber= @TagNumber))
			begin
			  update #InventoryInfraDetailTemp set error='Tag Number already exist' where ID=@InnercntI
			end

         ----Duplicate Tag Number checking----   

		  print 'row by row insertion'		  
		if(exists(select top 1 1 from #InventoryInfraDetailTemp where   ID=@InnercntI and error is null))
		begin

		print 'without error row procesing'
		insert into TD_Inventory( [PoNumber],[PoId],[PoDate],[GRNNumber],[GRNDate],[ItemCode],[TAGCount],[MajorCategory],[MinorCategory],[MinorSubCategory],[Description],[ManufacturerName],[TaggableTypeID],[AssetTypeID],[ExpTypeID],[InventoryTypeID],RecCreatedBy, RecCreatedDate)
		select [PoNumber],[PoId],[PoDate],[GRNNumber],[GRNDate],[ItemCode],[TAGCount],[MajorCategory],[MinorCategory],[MinorSubCategory],[Description],[ManufacturerName],[TaggableTypeID],[AssetTypeID],[ExpTypeID],6,@EmplId ,GETDATE() 
		 from #InventoryInfraDetailTemp where   ID=@InnercntI


		set @InventoryIDInfra=@@IDENTITY

		insert into TD_InventoryInfraDetail(
	   [InventoryID]
	  ,[SiteName]
      ,[InventoryAssetType]
      ,[HostName]
      ,[ProcessName]
      ,[IPAddress]
      ,[Make]
      ,[Model]
      ,[SharedDedicated]
      ,[DefineScope]
      ,[DeviceSupport]
      ,[StockStatus]
	  ,[SubLocation]
	  ,[SerialNumber]
	  ,[SubMinorCategory]
	  ,[RecCreatedBy]
	  ,[RecCreatedDate]
	  )
		select 
	   @InventoryIDInfra,
	   [SiteName]
      ,[InventoryAssetType]
      ,[HostName]
      ,[ProcessName]
      ,[IPAddress]
      ,[Make]
      ,[Model]
      ,[SharedDedicated]
      ,[DefineScope]
      ,[DeviceSupport]
      ,[StockStatus]
      ,[SubLocation]
      ,[SerialNumber]
      ,[SubMinorCategory]
      ,@EmplId 
	  ,GETDATE()
	  from #InventoryInfraDetailTemp where ID=@InnercntI

		insert into TD_InventoryCommonDetail([InventoryID] ,	[AssetModule] ,	[TAGNumber],	SerialNumber,[Location] ,RecCreatedBy,RecCreatedDate,BOOK_TYPE_CODE,Remark,[PropertyCode],[DateOfAcquisition])
		select @InventoryIDInfra,'75',TAGNumber,SerialNumber,Location,@EmplId ,GETDATE(),@AssetBookType,Remark,[PropertyCode],[DateOfAcquisition] from #InventoryInfraDetailTemp where ID=@InnercntI

		--set @Msg='Data Save Successfully.'
		set @Msg='File is uploaded successfully.'
		end
		

		end
		else
		begin
		 print 'Update error for duplicate'
		 update #InventoryInfraDetailTemp set error='data already exists' where ID=@InnercntI
	

		end

	
		set @InnercntI=@InnercntI+1
		end
		end
		else
		begin

		print 'IN PO, GRN and ITEMCODE error'

		--#InventoryInfraDetailTempE

		insert into #InventoryInfraDetailTempE 
		select 	[PoNumber] ,	[GRNNumber] ,	[ItemCode]   from @InventoryInfraDetailType   where PoNumber= @PONumber and GRNNumber=@GRNNumber and ItemCode=@ItemCode

		 
		end



set @ctI=@ctI+1
end


		insert into #InventoryInfraDetailTemp([PoNumber] ,[PoId] ,[PoDate] ,[GRNNumber] ,[GRNDate] ,[ItemCode] ,[TAGCount] ,[MajorCategory] ,[MinorCategory] ,[MinorSubCategory] ,[Description] ,[ManufacturerName] ,
		[TaggableTypeID] ,[AssetTypeID] ,[ExpTypeID] ,[SiteName] ,[InventoryAssetType] ,[HostName] ,[ProcessName] ,[IPAddress] ,[Make] ,[Model] ,[SharedDedicated] ,[DefineScope]  ,[DeviceSupport] ,[StockStatus] ,[SerialNumber] ,[TAGNumber]  ,[Location],[error]  ) 
		select  a.[PoNumber] ,[PoId] ,[PoDate] ,a.[GRNNumber] ,[GRNDate] ,a.[ItemCode] ,[TAGCount] ,[MajorCategory] ,[MinorCategory] ,[MinorSubCategory] ,[Description] ,[ManufacturerName] 
		,[TaggableTypeID] ,[AssetTypeID] ,[ExpTypeID] ,[SiteName] ,[InventoryAssetType] ,[HostName] ,
		[ProcessName] ,[IPAddress] ,[Make] ,[Model] ,[SharedDedicated] ,[DefineScope] ,[DeviceSupport] ,[StockStatus] ,[SerialNumber] ,[TAGNumber]  ,[Location] ,'data not found for PO ,GRN and Item code/PO not mapped to User'
		from @InventoryInfraDetailType 
		a inner join #InventoryInfraDetailTempE b on a.PoNumber= b.PONumber and a.GRNNumber=b.GRNNumber and a.ItemCode=b.ItemCode
		
		

	end
/****************************END: Inventory P2 Changes Infra INSERTION ******************************************************************************************************************************************************/
	
end -- flag end

else
begin
set @Msg='Please check data TAG is void or invalida data entry.'

end

--set @Msg='error'
SELECT @Msg 


IF OBJECT_ID('tempdb..#InventoryDesktopDetailTemp') IS NOT NULL 
begin
   --    select DISTINCT [PoNumber],CONVERT(VARCHAR(10), [PoDate], 101)[PoDate],[GRNNumber], CONVERT(VARCHAR(10), [GRNDate], 101)[GRNDate] ,ItemCode,[MajorCategory],[MinorCategory],[ManufacturerName],[TaggableTypeID], [AssetTypeID] ,[ExpTypeID]  
	  --,[DualHostName],[DeskID],[IPAddress], [MakeDesktopID] ,[ModelSize],[Processor],[RAM],[HardDisk],[DomainName],[SharedDedicated],[project],[Location1],[wing]
   --   ,[InstalledOperatingSystem],[PurchasedOS],[MSOffice],[OCSClient],[AcrobatReader],[Winzip],[Antivirus],[OtherSoftware],[WarrantyStart],[WarrantyEnd],[AgeSpend],[PhysicalVerification],[StockStatusDesktopID] ,[bond],[Hostname],[AllocationTypeID]	  ,SystemAssetID,[SerialNumber]
	  --,TAGNumber	  ,Location	  ,[SubLocation], [SubMinorCategory],error
	  -- from #InventoryDesktopDetailTemp (nolock) where error is not null

	     declare @IDESK table ([ID] [bigint] IDENTITY(1,1) NOT NULL,PoNumber nvarchar (100),GRNNumber nvarchar(100),ItemCode nvarchar(100),WarrantyStart nvarchar(50),WarrantyEnd nvarchar(50))
		 insert into @IDESK (PoNumber,GRNNumber,ItemCode,WarrantyStart,WarrantyEnd)
		 select PoNumber,GRNNumber,ItemCode,WarrantyStart,WarrantyEnd FROM @InventoryDesktopDetailType


	   select DISTINCT #InventoryDesktopDetailTemp.[PoNumber],CONVERT(VARCHAR(10), [PoDate], 101)[PoDate],#InventoryDesktopDetailTemp.[GRNNumber], CONVERT(VARCHAR(10), [GRNDate], 101)[GRNDate] ,#InventoryDesktopDetailTemp.ItemCode,[MajorCategory],[MinorCategory],[ManufacturerName],
	  (select top 1 ParameterValue from TM_ParameterValue(nolock) where ParameterValueID =TaggableTypeID) [TaggableTypeID], (select top 1 ParameterValue from TM_ParameterValue(nolock) where ParameterValueID =AssetTypeID) [AssetTypeID] , (select top 1 ParameterValue from TM_ParameterValue(nolock) where ParameterValueID =ExpTypeID) [ExpTypeID]  
	  ,[DualHostName],[DeskID],[IPAddress], (select top 1 ParameterValue from TM_ParameterValue(nolock) where ParameterValueID =MakeDesktopID) [MakeDesktopID] ,[ModelSize],[Processor],[RAM],[HardDisk],[DomainName],(select top 1 ParameterValue from TM_ParameterValue(nolock) where ParameterValueID =SharedDedicated) [SharedDedicated],[project],[Location1],[wing]
      ,[InstalledOperatingSystem],[PurchasedOS],[MSOffice],[OCSClient],[AcrobatReader],[Winzip],[Antivirus],[OtherSoftware],
	   desk.[WarrantyStart],desk.[WarrantyEnd]

	 --  (select top 1 WarrantyStart from @IDESK  where PoNumber=#InventoryDesktopDetailTemp.PoNumber and GRNNumber=#InventoryDesktopDetailTemp.GRNNumber and  ItemCode=#InventoryDesktopDetailTemp.ItemCode and ID=#InventoryDesktopDetailTemp.ID) [WarrantyStart] ,
		--(select top 1 WarrantyEnd from @IDESK  where PoNumber=#InventoryDesktopDetailTemp.PoNumber and GRNNumber=#InventoryDesktopDetailTemp.GRNNumber and  ItemCode=#InventoryDesktopDetailTemp.ItemCode  and ID=#InventoryDesktopDetailTemp.ID) [WarrantyEnd]

	  ,[AgeSpend],[PhysicalVerification],(select top 1 ParameterValue from TM_ParameterValue(nolock) where ParameterValueID =StockStatusDesktopID) [StockStatusDesktopID] ,[bond],[Hostname],(select top 1 ParameterValue from TM_ParameterValue(nolock) where ParameterValueID =AllocationTypeID) [AllocationTypeID],SystemAssetID,[SerialNumber]
	  ,TAGNumber,Location	  ,[SubLocation], 
	  (select top 1 Name from TM_SubMinorCategory(nolock) where id =SubMinorCategory) [SubMinorCategory],error
	   from #InventoryDesktopDetailTemp (nolock) join @IDESK  desk 
	   on #InventoryDesktopDetailTemp.PoNumber=desk.PoNumber and #InventoryDesktopDetailTemp.GRNNumber=desk.GRNNumber and #InventoryDesktopDetailTemp.ItemCode =desk.ItemCode and #InventoryDesktopDetailTemp.ID=desk.ID
	    where error is not null
end
else
begin
select * from @InventoryDesktopDetailType 
end


IF OBJECT_ID('tempdb..#InventoryLaptopDetailTemp') IS NOT NULL   
begin                                           								
	
		--SELECT DISTINCT [PoNumber] ,[PoId] ,CONVERT(VARCHAR(10), [PoDate], 101)[PoDate] ,[GRNNumber] ,CONVERT(VARCHAR(10), [GRNDate], 101)[GRNDate] ,[ItemCode] ,[TAGCount] ,[MajorCategory] ,[MinorCategory] ,[MinorSubCategory] ,[Description] ,[ManufacturerName] ,[TaggableTypeID] ,
		--[AssetTypeID] ,[ExpTypeID] ,[EmployeeID] ,[EmployeeName] ,[Model] ,[BadgeID] ,[IssueDate] ,[ExpectedReturnDate] ,[IsReturned],[Make] ,
		--[SerialNumber] ,TAGNumber  ,Location ,[SubLocation], [SubMinorCategory], error
		--FROM #InventoryLaptopDetailTemp (nolock) where error is not null

		 declare @ILP table ([ID] [bigint] IDENTITY(1,1) NOT NULL,IssueDate nvarchar(50),ExpectedReturnDate nvarchar(50))
		 insert into @ILP (IssueDate,ExpectedReturnDate)
		 select IssueDate,ExpectedReturnDate FROM @InventoryLaptopDetailType

		SELECT DISTINCT [PoNumber] ,[PoId] ,CONVERT(VARCHAR(10), [PoDate], 101)[PoDate] ,[GRNNumber] ,CONVERT(VARCHAR(10), [GRNDate], 101)[GRNDate] ,[ItemCode] ,[TAGCount] ,[MajorCategory] ,[MinorCategory] ,[MinorSubCategory] ,[Description] ,[ManufacturerName] ,(select top 1 ParameterValue from TM_ParameterValue(nolock) where ParameterValueID =TaggableTypeID) [TaggableTypeID] ,
		(select top 1 ParameterValue from TM_ParameterValue(nolock) where ParameterValueID =AssetTypeID) [AssetTypeID] ,(select top 1 ParameterValue from TM_ParameterValue(nolock) where ParameterValueID =ExpTypeID) [ExpTypeID] ,[EmployeeID] ,[EmployeeName] ,[Model] ,[BadgeID] ,
		--[IssueDate] ,[ExpectedReturnDate], 
		(select top 1 IssueDate from @ILP  where PoNumber=#InventoryLaptopDetailTemp.PoNumber and GRNNumber=#InventoryLaptopDetailTemp.GRNNumber and  ItemCode=#InventoryLaptopDetailTemp.ItemCode and ID=#InventoryLaptopDetailTemp.ID) [IssueDate] ,
		(select top 1 ExpectedReturnDate from @ILP  where PoNumber=#InventoryLaptopDetailTemp.PoNumber and GRNNumber=#InventoryLaptopDetailTemp.GRNNumber and  ItemCode=#InventoryLaptopDetailTemp.ItemCode  and ID=#InventoryLaptopDetailTemp.ID) [ExpectedReturnDate] ,
		case when [IsReturned]=1 then 'true' else 'false' end as [IsReturned],[Make] ,
		[SerialNumber] ,TAGNumber  ,Location ,[SubLocation], 
		 (select top 1 Name from TM_SubMinorCategory(nolock) where id =SubMinorCategory) [SubMinorCategory], error
		FROM #InventoryLaptopDetailTemp (nolock) where error is not null
end
else
begin
select * from @InventoryLaptopDetailType
end

IF OBJECT_ID('tempdb..#InventoryNetworkDetailTemp') IS NOT NULL 
begin
	  
	 -- 	SELECT DISTINCT   [PoNumber] ,[PoId] ,CONVERT(VARCHAR(10), [PoDate], 101)[PoDate] ,[GRNNumber] ,CONVERT(VARCHAR(10), [GRNDate], 101)[GRNDate] ,[ItemCode] ,[TAGCount] ,[MajorCategory] ,[MinorCategory] ,[MinorSubCategory] ,[Description] ,[ManufacturerName] ,
		--[TaggableTypeID] ,[AssetTypeID] ,[ExpTypeID] ,[MakeNetworkID] ,[Model] ,[StockStatusNetworkID] ,[DeviceLife] ,[DefineScope] ,[EndoflifeofdeviceID] ,[DeviceSupportID] ,[ModelSize] ,[Processname] ,[SharedDedicatedID] ,[SystemAssetID] ,[IPAddress] ,[SiteName] ,[SerialNumber] ,
		--[AssetTypeNetworkID] ,TAGNumber  ,Location,[SubLocation], [SubMinorCategory],error  
		--FROM	 #InventoryNetworkDetailTemp (nolock)  where error is not null

		SELECT DISTINCT   [PoNumber] ,[PoId] ,CONVERT(VARCHAR(10), [PoDate], 101)[PoDate] ,[GRNNumber] ,CONVERT(VARCHAR(10), [GRNDate], 101)[GRNDate] ,[ItemCode] ,[TAGCount] ,[MajorCategory] ,[MinorCategory] ,[MinorSubCategory] ,[Description] ,[ManufacturerName] ,
		 (select top 1 ParameterValue from TM_ParameterValue(nolock) where ParameterValueID =TaggableTypeID) [TaggableTypeID] ,(select top 1 ParameterValue from TM_ParameterValue(nolock) where ParameterValueID =AssetTypeID) [AssetTypeID] ,(select top 1 ParameterValue from TM_ParameterValue(nolock) where ParameterValueID =ExpTypeID) [ExpTypeID] 
		 ,(select top 1 ParameterValue from TM_ParameterValue(nolock) where ParameterValueID =MakeNetworkID) [MakeNetworkID] ,[Model] ,
		 (select top 1 ParameterValue from TM_ParameterValue(nolock) where ParameterValueID =StockStatusNetworkID) [StockStatusNetworkID] ,[DeviceLife] ,[DefineScope] ,
		 (select top 1 ParameterValue from TM_ParameterValue(nolock) where ParameterValueID =EndoflifeofdeviceID) [EndoflifeofdeviceID] ,(select top 1 ParameterValue from TM_ParameterValue(nolock) where ParameterValueID =DeviceSupportID) [DeviceSupportID] ,[ModelSize] ,[Processname] ,
		 (select top 1 ParameterValue from TM_ParameterValue(nolock) where ParameterValueID =SharedDedicatedID) [SharedDedicatedID] ,[SystemAssetID] ,[IPAddress] ,[SiteName] ,[SerialNumber] ,
		[AssetTypeNetworkID] ,TAGNumber  ,Location,[SubLocation], 
		(select top 1 Name from TM_SubMinorCategory(nolock) where id =SubMinorCategory) [SubMinorCategory],error  
		FROM	 #InventoryNetworkDetailTemp (nolock)  where error is not null
end
else
begin
select * from @InventoryNetworkDetailType 
end



IF OBJECT_ID('tempdb..#InventoryServerDetailTemp') IS NOT NULL 
begin
	
  --      SELECT DISTINCT [PoNumber] ,[PoId] ,CONVERT(VARCHAR(10), [PoDate], 101)[PoDate] ,[GRNNumber] ,CONVERT(VARCHAR(10), [GRNDate], 101)[GRNDate] ,[ItemCode] ,[TAGCount] ,[MajorCategory] ,[MinorCategory] ,[MinorSubCategory] ,[Description] ,[ManufacturerName] ,
		--[TaggableTypeID] ,[AssetTypeID] ,[ExpTypeID] ,[ServerName] ,[ServerUsage] ,[ServerDomain] ,[ServerRole] ,[AcquistionDate] ,[Asset] ,[AssetNo] ,[Environment] ,[ServerStatusID] ,[Product] ,[Type] ,[TypeNo] ,[OSType] ,[OS] ,[NoOfProcessor] ,[SerialNumber] ,TAGNumber  ,Location,[SubLocation], [SubMinorCategory],error
		--FROM #InventoryServerDetailTemp (nolock) where error is not null

        SELECT DISTINCT [PoNumber] ,[PoId] ,CONVERT(VARCHAR(10), [PoDate], 101)[PoDate] ,[GRNNumber] ,CONVERT(VARCHAR(10), [GRNDate], 101)[GRNDate] ,[ItemCode] ,[TAGCount] ,[MajorCategory] ,[MinorCategory] ,[MinorSubCategory] ,[Description] ,[ManufacturerName] ,
	    (select top 1 ParameterValue from TM_ParameterValue(nolock) where ParameterValueID =TaggableTypeID)	[TaggableTypeID] ,(select top 1 ParameterValue from TM_ParameterValue(nolock) where ParameterValueID =AssetTypeID) [AssetTypeID] ,(select top 1 ParameterValue from TM_ParameterValue(nolock) where ParameterValueID =ExpTypeID) [ExpTypeID] ,[ServerName] ,[ServerUsage] ,[ServerDomain] ,[ServerRole] ,[DateOfAcquisition] ,[Asset] ,[AssetNo] ,[Environment] ,
		(select top 1 ParameterValue from TM_ParameterValue(nolock) where ParameterValueID =ServerStatusID) [ServerStatusID] ,[Product] ,[Type] ,[TypeNo] ,[OSType] ,[OS] ,[NoOfProcessor] ,[SerialNumber] ,TAGNumber  ,Location,[SubLocation],
		(select top 1 Name from TM_SubMinorCategory(nolock) where id =SubMinorCategory) [SubMinorCategory],error
		FROM #InventoryServerDetailTemp (nolock) where error is not null
end
else
begin
select * from @InventoryServerDetailType  
end

IF OBJECT_ID('tempdb..#InventoryTelecomDetailTemp') IS NOT NULL 
begin
	   
	 --  SELECT DISTINCT [PoNumber] ,[PoId] ,CONVERT(VARCHAR(10), [PoDate], 101)[PoDate] ,[GRNNumber] ,CONVERT(VARCHAR(10), [GRNDate], 101)[GRNDate] ,[ItemCode] ,[TAGCount] ,[MajorCategory] ,[MinorCategory] ,[MinorSubCategory] ,[Description] ,[ManufacturerName] ,[TaggableTypeID] ,[AssetTypeID] ,
		--[ExpTypeID] ,[HostName] ,[MakeTelecomID] ,[ModelTelecom] ,[DeviceLifeTelecomID] ,[StockStatusTelecomID] ,[AssetTypeTelecomID] ,[SerialNumber] ,TAGNumber  ,Location,[SubLocation], [SubMinorCategory],error
		--FROM  #InventoryTelecomDetailTemp (nolock) where error is not null

		SELECT DISTINCT [PoNumber] ,[PoId] ,CONVERT(VARCHAR(10), [PoDate], 101)[PoDate] ,[GRNNumber] ,CONVERT(VARCHAR(10), [GRNDate], 101)[GRNDate] ,[ItemCode] ,[TAGCount] ,[MajorCategory] ,[MinorCategory] ,[MinorSubCategory] ,[Description] ,[ManufacturerName] 
		,(select top 1 ParameterValue from TM_ParameterValue(nolock) where ParameterValueID =TaggableTypeID) [TaggableTypeID] ,(select top 1 ParameterValue from TM_ParameterValue(nolock) where ParameterValueID =AssetTypeID) [AssetTypeID] ,
	   (select top 1 ParameterValue from TM_ParameterValue(nolock) where ParameterValueID =ExpTypeID)	[ExpTypeID] ,[HostName] ,(select top 1 ParameterValue from TM_ParameterValue(nolock) where ParameterValueID =MakeTelecomID) [MakeTelecomID] ,(select top 1 ParameterValue from TM_ParameterValue(nolock) where ParameterValueID =ModelTelecom) [ModelTelecom] 
	   ,(select top 1 ParameterValue from TM_ParameterValue(nolock) where ParameterValueID =DeviceLifeTelecomID) [DeviceLifeTelecomID] ,(select top 1 ParameterValue from TM_ParameterValue(nolock) where ParameterValueID =StockStatusTelecomID) [StockStatusTelecomID] ,[AssetTypeTelecomID] ,[SerialNumber] ,TAGNumber  ,Location,[SubLocation], 
	   (select top 1 Name from TM_SubMinorCategory(nolock) where id =SubMinorCategory) [SubMinorCategory],error
		FROM  #InventoryTelecomDetailTemp (nolock) where error is not null
end
else
begin
select * from @InventoryTelecomDetailType   
end

----Start - Infra Inventory P2 Changes----
IF OBJECT_ID('tempdb..#InventoryInfraDetailTemp') IS NOT NULL 
begin
	   
	   SELECT DISTINCT [PoNumber] ,[PoId] ,CONVERT(VARCHAR(10), [PoDate], 101)[PoDate] ,[GRNNumber] ,CONVERT(VARCHAR(10), [GRNDate], 101)[GRNDate] ,[ItemCode] ,[TAGCount] ,[MajorCategory] ,[MinorCategory] ,[MinorSubCategory] ,[Description] ,[ManufacturerName] ,
	   (select top 1 ParameterValue from TM_ParameterValue(nolock) where ParameterValueID =TaggableTypeID) [TaggableTypeID] ,(select top 1 ParameterValue from TM_ParameterValue(nolock) where ParameterValueID =AssetTypeID) [AssetTypeID] ,
	   (select top 1 ParameterValue from TM_ParameterValue(nolock) where ParameterValueID =ExpTypeID)	[ExpTypeID] ,[SiteName] ,(select top 1 ParameterValue from TM_ParameterValue(nolock) where ParameterValueID =InventoryAssetType) [InventoryAssetType] ,(select top 1 ParameterValue from TM_ParameterValue(nolock) where ParameterValueID =HostName) [HostName] ,[ProcessName] ,[IPAddress] ,(select top 1 ParameterValue from TM_ParameterValue(nolock) where ParameterValueID =Make) [Make],(select top 1 ParameterValue from TM_ParameterValue(nolock) where ParameterValueID =Model) [Model] 
	   ,(select top 1 ParameterValue from TM_ParameterValue(nolock) where ParameterValueID =SharedDedicated)  [SharedDedicated],[DefineScope], (select top 1 ParameterValue from TM_ParameterValue(nolock) where ParameterValueID =DeviceSupport) [DeviceSupport]
	   ,(select top 1 ParameterValue from TM_ParameterValue(nolock) where ParameterValueID =StockStatus) [StockStatus],[SerialNumber],[TAGNumber] ,[Location],[SubLocation],
	   (select top 1 Name from TM_SubMinorCategory(nolock) where id =SubMinorCategory) [SubMinorCategory],[error]
		FROM  #InventoryInfraDetailTemp (nolock) where error is not null
end
else
begin
select * from @InventoryInfraDetailType   
end
----End - Infra Inventory P2 Changes----

END TRY

BEGIN CATCH
    SELECT 
        ERROR_NUMBER() AS ErrorNumber
        ,ERROR_SEVERITY() AS ErrorSeverity
        ,ERROR_STATE() AS ErrorState
        ,ERROR_PROCEDURE() AS ErrorProcedure
        ,ERROR_LINE() AS ErrorLine
        ,ERROR_MESSAGE() AS ErrorMessage;

    IF @@TRANCOUNT > 0
        ROLLBACK TRANSACTION;
END CATCH

IF @@TRANCOUNT > 0
    COMMIT TRANSACTION

End





