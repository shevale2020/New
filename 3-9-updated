  public static bool DeleteExecRecord(int MonthsToKeep)
        {
            try
            {
                Globals.DBLogger.Info("DeleteExecRecord : Cleaning All Table...");
                using (GatewayDBContext dbContext = new GatewayDBContext())
                {
                    Dictionary<string, InboundProcessingSummary> SuccessIPS = new Dictionary<string, InboundProcessingSummary>();
                    Dictionary<string, InboundProcessingSummary> FailIPS = new Dictionary<string, InboundProcessingSummary>();
                    Dictionary<string, OutboundFilesSummary> SuccessOFS = new Dictionary<string, OutboundFilesSummary>();
                    Dictionary<string, OutboundFilesSummary> FailOFS = new Dictionary<string, OutboundFilesSummary>();
                    Dictionary<string, OutboundProcessingSummary> SuccessOPS = new Dictionary<string, OutboundProcessingSummary>();
                    Dictionary<string, OutboundProcessingSummary> FailOPS = new Dictionary<string, OutboundProcessingSummary>();
                    //get date before 3 month
                    DateTime date = DateTime.Now.AddMonths(-MonthsToKeep);
                    SFTPHelper SFTPHelper = new SFTPHelper();
                    bool IsSFTPFileStatus;
                    int i = 0;
                    //get records from InboundProcessingSummaries
                    var infoListForIPS = dbContext.InboundProcessingSummaries
                               .Where(x => x.ProcessingStartedTime < date).ToList();
                    if (infoListForIPS.Count != 0)
                    {
                        foreach (var infoIPS in infoListForIPS)
                        {
                            var ForRemoveinfoIPS = infoIPS;
                            try
                            {
                                if (infoIPS.LocalSourceFilePath != "" && infoIPS.LocalSourceFilePath != null)
                                {
                                    var LocalSourceFileName = Path.GetFileName(infoIPS.LocalSourceFilePath);
                                    var LocalSourceFilePath = Path.GetDirectoryName(infoIPS.LocalSourceFilePath);
                                    try
                                    {
                                        //get related files from Local Directory
                                        string[] AllLocalSourceFiles = System.IO.Directory.GetFiles(LocalSourceFilePath, LocalSourceFileName + ".*");
                                        foreach (string f in AllLocalSourceFiles)
                                        {
                                            //delete file on Local Directory
                                            infoIPS.LocalSourceFilePath = f;
                                            System.IO.File.Delete(f);
                                            SuccessIPS.Add("LocalSourceFilePath" + i, infoIPS);
                                            i++;
                                        }
                                    }
                                    catch
                                    {
                                        FailIPS.Add("LocalSourceFilePath" + i, infoIPS);
                                        i++;
                                    }
                                }
                                if (infoIPS.SFTPSourceFilePath != "" && infoIPS.SFTPSourceFilePath != null)
                                {
                                    //delete that file on SFTP Directory
                                    IsSFTPFileStatus = SFTPHelper.DeleteSFTPFile(infoIPS.SFTPSourceFilePath);
                                    if (IsSFTPFileStatus == true)
                                        SuccessIPS.Add("SFTPSourceFilePath" + i, infoIPS);
                                    else
                                    {
                                        FailIPS.Add("SFTPSourceFilePath" + i, infoIPS);
                                    }
                                    i++;
                                }
                                if (infoIPS.LocalSuccessFilePath != "" && infoIPS.LocalSuccessFilePath != null)
                                {
                                    var LocalSuccessFileName = Path.GetFileName(infoIPS.LocalSuccessFilePath);
                                    var LocalSuccessFilePath = Path.GetDirectoryName(infoIPS.LocalSuccessFilePath);
                                    try
                                    {
                                        //get related files from Local Directory
                                        string[] AllLocalSuccessFiles = System.IO.Directory.GetFiles(LocalSuccessFilePath, LocalSuccessFileName + ".*");
                                        foreach (string f in AllLocalSuccessFiles)
                                        {
                                            //delete file on Local Directory
                                            infoIPS.LocalSuccessFilePath = f;
                                            System.IO.File.Delete(f);
                                            SuccessIPS.Add("LocalSuccessFilePath" + i, infoIPS);
                                            i++;
                                        }
                                    }
                                    catch
                                    {
                                        FailIPS.Add("LocalSuccessFilePath" + i, infoIPS);
                                        i++;
                                    }
                                }
                                if (infoIPS.SFTPSuccessFilePath != "" && infoIPS.SFTPSuccessFilePath != null)
                                {
                                    //delete that file on SFTP Directory
                                    IsSFTPFileStatus = SFTPHelper.DeleteSFTPFile(infoIPS.SFTPSuccessFilePath);
                                    if (IsSFTPFileStatus == true)
                                        SuccessIPS.Add("SFTPSuccessFilePath" + i, infoIPS);
                                    else
                                    {
                                        FailIPS.Add("SFTPSuccessFilePath" + i, infoIPS);
                                    }
                                    i++;
                                }
                                if (infoIPS.LocalFailedFilePath != "" && infoIPS.LocalFailedFilePath != null)
                                {
                                    var LocalFailedFileName = Path.GetFileName(infoIPS.LocalFailedFilePath);
                                    var LocalFailedFilePath = Path.GetDirectoryName(infoIPS.LocalFailedFilePath);
                                    try
                                    {
                                        //get related files from Local Directory
                                        string[] AllLocalFailedFiles = System.IO.Directory.GetFiles(LocalFailedFilePath, LocalFailedFileName + ".*");
                                        foreach (string f in AllLocalFailedFiles)
                                        {
                                            //delete file on Local Directory
                                            infoIPS.LocalFailedFilePath = f;
                                            System.IO.File.Delete(f);
                                            SuccessIPS.Add("LocalFailedFilePath" + i, infoIPS);
                                            i++;
                                        }
                                    }
                                    catch
                                    {
                                        FailIPS.Add("LocalFailedFilePath" + i, infoIPS);
                                        i++;
                                    }
                                }
                                if (infoIPS.SFTPFailedFilePath != "" && infoIPS.SFTPFailedFilePath != null)
                                {
                                    //delete  file on SFTP Directory
                                    IsSFTPFileStatus = SFTPHelper.DeleteSFTPFile(infoIPS.SFTPFailedFilePath);
                                    if (IsSFTPFileStatus == true)
                                        SuccessIPS.Add("SFTPFailedFilePath" + i, infoIPS);
                                    else
                                    {
                                        FailIPS.Add("SFTPFailedFilePath" + i, infoIPS);
                                    }
                                    i++;
                                }
                                //delete recordData from database
                                dbContext.InboundProcessingSummaries.Remove(ForRemoveinfoIPS);
                                dbContext.SaveChanges();
                            }
                            catch (Exception ex)
                            {
                                Globals.DBLogger.Error(String.Format("DeleteExecRecord: Error while executing : {0}", ex.Message), ex);
                                return false;
                            }
                        }
                    }
                    //get records from OutboundFilesSummaries
                    var infoListForOFS = dbContext.OutboundFilesSummaries.Join(
                                                 dbContext.OutboundProcessingSummaries,
                                                ofs => new { ofs.OutboundFileName },
                                                ops => new { ops.OutboundFileName },
                                                (ofs, ops) => new { ofs, ops })
                                                .Where(o => o.ofs.OutboundFileName == o.ops.OutboundFileName
                                                            && o.ops.ProcessingStartedTime < date).Select(o => new { o.ofs.LocalFilePath, o.ofs.SFTPFilePath });

                    GatewayDBContext contextDB = new GatewayDBContext();
                    if (infoListForOFS.ToList().Count != 0)
                    {
                        foreach (var infoOFS in infoListForOFS)
                        {
                            var infoList = contextDB.OutboundFilesSummaries.Where(x => x.LocalFilePath == infoOFS.LocalFilePath && x.SFTPFilePath == infoOFS.SFTPFilePath).FirstOrDefault();
                            var ForRemoveinfoOFS = infoList;
                            try
                            {
                                if (infoOFS.LocalFilePath != "" && infoOFS.LocalFilePath != null)
                                {
                                    var LocalFileName = Path.GetFileName(infoOFS.LocalFilePath);
                                    var LocalFilePath = Path.GetDirectoryName(infoOFS.LocalFilePath);
                                    try
                                    {
                                        //get related files from Local Directory
                                        string[] AllLocalFiles = System.IO.Directory.GetFiles(LocalFilePath, LocalFileName + ".*");
                                        foreach (string f in AllLocalFiles)
                                        {
                                            infoList.LocalFilePath = f;
                                            System.IO.File.Delete(f);
                                            SuccessOFS.Add("LocalFilePath" + i, infoList);
                                            i++;
                                        }
                                    }
                                    catch
                                    {
                                        FailOFS.Add("LocalFilePath" + i, infoList);
                                        i++;
                                    }
                                }
                                if (infoOFS.SFTPFilePath != "" && infoOFS.SFTPFilePath != null)
                                {
                                    //delete file on SFTP Directory
                                    IsSFTPFileStatus = SFTPHelper.DeleteSFTPFile(infoOFS.SFTPFilePath);
                                    if (IsSFTPFileStatus == true)
                                        SuccessOFS.Add("SFTPFilePath" + i, infoList);
                                    else
                                    {
                                        FailOFS.Add("SFTPFilePath" + i, infoList);
                                    }
                                    i++;
                                }
                                //delete recordData From Database
                                contextDB.OutboundFilesSummaries.Remove(ForRemoveinfoOFS);
                                contextDB.SaveChanges();
                            }
                            catch (Exception ex)
                            {
                                Globals.DBLogger.Error(String.Format("DeleteExecRecord: Error while executing : {0}", ex.Message), ex);
                                return false;
                            }
                        }
                    }
                    //get records from OutboundProcessingSummaries
                    var infoListForOPS = dbContext.OutboundProcessingSummaries
                       .Where(x => x.ProcessingStartedTime < date).ToList();
                    if (infoListForOPS.Count != 0)
                    {
                        foreach (var infoOPS in infoListForOPS)
                        {
                            var ForRemoveinfoOPS = infoOPS;
                            try
                            {
                                if (infoOPS.LocalFilePath != "" && infoOPS.LocalFilePath != null)
                                {
                                    var LocalFileName = Path.GetFileName(infoOPS.LocalFilePath);
                                    var LocalFilePath = Path.GetDirectoryName(infoOPS.LocalFilePath);
                                    try
                                    {
                                        //get related files from Local Directory
                                        string[] AllLocalFiles = System.IO.Directory.GetFiles(LocalFilePath, LocalFileName + ".*");
                                        foreach (string f in AllLocalFiles)
                                        {
                                            infoOPS.LocalFilePath = f;
                                            System.IO.File.Delete(f);
                                            SuccessOPS.Add("LocalFilePath" + i, infoOPS);
                                            i++;
                                        }
                                    }
                                    catch
                                    {
                                        FailOPS.Add("LocalFilePath" + i, infoOPS);
                                        i++;
                                    }
                                }
                                if (infoOPS.SFTPFilePath != "" && infoOPS.SFTPFilePath != null)
                                {
                                    //delete  file on SFTP Directory
                                    IsSFTPFileStatus = SFTPHelper.DeleteSFTPFile(infoOPS.SFTPFilePath);
                                    if (IsSFTPFileStatus == true)
                                        SuccessOPS.Add("SFTPFilePath" + i, infoOPS);
                                    else
                                    {
                                        FailOPS.Add("SFTPFilePath" + i, infoOPS);
                                    }
                                    i++;
                                }
                                //delete recordData From Database
                                dbContext.OutboundProcessingSummaries.Remove(ForRemoveinfoOPS);
                                dbContext.SaveChanges();
                            }
                            catch (Exception ex)
                            {
                                Globals.DBLogger.Error(String.Format("DeleteExecRecord: Error while executing : {0}", ex.Message), ex);
                                return false;
                            }
                        }
                    }
                    EmailGenerator emailGen = new EmailGenerator();
                    emailGen.DeleteProcessingSummaryMessage(SuccessIPS, FailIPS, SuccessOFS, FailOFS, SuccessOPS, FailOPS);
                }
                return true;
            }
            catch (Exception ex)
            {
                Globals.DBLogger.Error(String.Format("DeleteExecRecord: Error while executing : {0}", ex.Message), ex);
                return false;
            }
            finally
            {
                Globals.FlushLogBuffers();
            }
        }
        
        
        
        public bool DeleteProcessingSummaryMessage(Dictionary<string, InboundProcessingSummary> IPSSuccess, Dictionary<string, InboundProcessingSummary> IPSFail, Dictionary<string, OutboundFilesSummary> OFSSuccess, Dictionary<string, OutboundFilesSummary> OFSFail, Dictionary<string, OutboundProcessingSummary> OPSSuccess, Dictionary<string, OutboundProcessingSummary> OPSFail)
        {
            try
            {
                lock (mailLock)
                {
                    using (GatewayDBContext dbContext = new EFLibrary.GatewayDBContext())
                    {
                        //Create email body
                        _sbBody.AppendLine("<p>Dear <strong>Team</strong>,</p>");
                        _sbBody.AppendLine("<p>Following is Delete summary of Inbound, Outbound and Outbound File</p>");

                        //Inbound 
                        _sbBody.AppendLine("<br>");
                        _sbBody.AppendLine("<p><strong>Inbound File Processing  Summary</strong>:</p>");
                        _sbBody.AppendLine("<table>");
                        var Entitys = string.Join(",<br>", IPSSuccess.Select(x => x.Value.EntityID).Distinct());
                        List<string> sccessFile = new List<string>();
                        sccessFile.AddRange(IPSSuccess.Where(x => x.Key.Contains("LocalSourceFilePath")).Select(x => x.Value.LocalSourceFilePath).Distinct());
                        sccessFile.AddRange(IPSSuccess.Where(x => x.Key.Contains("LocalSuccessFilePath")).Select(x => x.Value.LocalSuccessFilePath).Distinct());
                        sccessFile.AddRange(IPSSuccess.Where(x => x.Key.Contains("LocalFailedFilePath")).Select(x => x.Value.LocalFailedFilePath).Distinct());
                        sccessFile.AddRange(IPSSuccess.Where(x => x.Key.Contains("SFTPSourceFilePath")).Select(x => x.Value.SFTPSourceFilePath).Distinct());
                        sccessFile.AddRange(IPSSuccess.Where(x => x.Key.Contains("SFTPSuccessFilePath")).Select(x => x.Value.SFTPSuccessFilePath).Distinct());
                        sccessFile.AddRange(IPSSuccess.Where(x => x.Key.Contains("SFTPFailedFilePath")).Select(x => x.Value.SFTPFailedFilePath).Distinct());
                        var sccessFileList = string.Join(",<br>", sccessFile);

                        List<string> FailFiles = new List<string>();
                        FailFiles.AddRange(IPSFail.Where(x => x.Key.Contains("LocalSourceFilePath")).Select(x => x.Value.LocalSourceFilePath).Distinct());
                        FailFiles.AddRange(IPSFail.Where(x => x.Key.Contains("LocalSuccessFilePath")).Select(x => x.Value.LocalSuccessFilePath).Distinct());
                        FailFiles.AddRange(IPSFail.Where(x => x.Key.Contains("LocalFailedFilePath")).Select(x => x.Value.LocalFailedFilePath).Distinct());
                        FailFiles.AddRange(IPSFail.Where(x => x.Key.Contains("SFTPSourceFilePath")).Select(x => x.Value.SFTPSourceFilePath).Distinct());
                        FailFiles.AddRange(IPSFail.Where(x => x.Key.Contains("SFTPSuccessFilePath")).Select(x => x.Value.SFTPSuccessFilePath).Distinct());
                        FailFiles.AddRange(IPSFail.Where(x => x.Key.Contains("SFTPFailedFilePath")).Select(x => x.Value.SFTPFailedFilePath).Distinct());

                        var failFileList = string.Join(",<br>", FailFiles);

                        _sbBody.AppendLine("<tr><th>Entity</th><th>No of Files Delete</th><th>No of Files Problem Delete</th><th>Successfully Deleted  FileName</th><th>Failed In deleting FileName</th></tr>");
                        _sbBody.AppendFormat("<tr><td>{0}<td>", Entitys);
                        _sbBody.AppendFormat("<td>{0}</td>", OFSSuccess.Count.ToString());
                        _sbBody.AppendFormat("<td>{0}</td>", OFSFail.Count.ToString());
                        _sbBody.AppendFormat("<td>{0}", sccessFileList);
                        _sbBody.AppendFormat("<td>{0}", failFileList);
                        _sbBody.AppendLine("</tr>");
                        _sbBody.AppendLine("</table>");
                        _sbBody.AppendLine("<br>");

                        //Outbound File 
                        _sbBody.AppendLine("<br>");
                        _sbBody.AppendLine("<p><strong>Outbound File Processing Summary</strong>:</p>");
                        _sbBody.AppendLine("<table>");
                        _sbBody.AppendLine("<tr><th>Entity</th><th>No of Files Delete</th><th>No of Files Problem Delete</th><th>Successfully Deleted Local FileName</th><th>Failed In deleting Local FileName</th><th>Successfully Deleted SFTP FileName</th><th>Failed In deleting SFTP FileName</th></tr>");
                        _sbBody.AppendFormat("<tr><td>{0}<td>", string.Join(",<br>", OFSSuccess.Select(x => x.Value.EntityID).Distinct()));
                        _sbBody.AppendFormat("<td>{0}</td>", OFSSuccess.Count.ToString());
                        _sbBody.AppendFormat("<td>{0}</td>", OFSFail.Count.ToString());
                        _sbBody.AppendFormat("<td>{0}", string.Join(",<br>", OFSSuccess.Where(x => x.Key.Contains("LocalFilePath")).Select(x => x.Value.LocalFilePath).Distinct()));
                        _sbBody.AppendFormat("<td>{0}", string.Join(",<br>", OFSFail.Where(x => x.Key.Contains("LocalFilePath")).Select(x => x.Value.LocalFilePath).Distinct()));
                        _sbBody.AppendFormat("<td>{0}", string.Join(",<br>", OFSSuccess.Where(x => x.Key.Contains("SFTPFilePath")).Select(x => x.Value.SFTPFilePath).Distinct()));
                        _sbBody.AppendFormat("<td>{0}", string.Join(",<br>", OFSFail.Where(x => x.Key.Contains("SFTPFilePath")).Select(x => x.Value.SFTPFilePath).Distinct()));
                        _sbBody.AppendLine("</tr>");
                        _sbBody.AppendLine("</table>");
                        _sbBody.AppendLine("<br>");

                        //Outbound 
                        _sbBody.AppendLine("<br>");
                        _sbBody.AppendLine("<p><strong>Outbound File Processing Summary</strong>:</p>");
                        _sbBody.AppendLine("<table>");
                        _sbBody.AppendLine("<tr><th>Entity</th><th>No of Files Delete</th><th>No of Files Problem Delete</th><th>Successfully Deleted Local FileName</th><th>Failed In deleting Local FileName</th><th>Successfully Deleted SFTP FileName</th><th>Failed In deleting SFTP FileName</th></tr>");
                        _sbBody.AppendFormat("<tr><td>{0}<td>", string.Join(",<br>", OPSSuccess.Select(x => x.Value.EntityID).Distinct()));
                        _sbBody.AppendFormat("<td>{0}</td>", OPSSuccess.Count.ToString());
                        _sbBody.AppendFormat("<td>{0}</td>", OPSFail.Count.ToString());
                        _sbBody.AppendFormat("<td>{0}", string.Join(",<br>", OPSSuccess.Where(x => x.Key.Contains("LocalFilePath")).Select(x => x.Value.LocalFilePath).Distinct()));
                        _sbBody.AppendFormat("<td>{0}", string.Join(",<br>", OPSFail.Where(x => x.Key.Contains("LocalFilePath")).Select(x => x.Value.LocalFilePath).Distinct()));
                        _sbBody.AppendFormat("<td>{0}", string.Join(",<br>", OFSSuccess.Where(x => x.Key.Contains("SFTPFilePath")).Select(x => x.Value.SFTPFilePath).Distinct()));
                        _sbBody.AppendFormat("<td>{0}", string.Join(",<br>", OFSFail.Where(x => x.Key.Contains("SFTPFilePath")).Select(x => x.Value.SFTPFilePath).Distinct()));
                        _sbBody.AppendLine("</tr>");
                        _sbBody.AppendLine("</table>");
                        _sbBody.AppendLine("<br>");

                        //Total Count
                        _sbBody.AppendLine(_emailFooter);
                        _message.Subject = $"Delete Processing summary Date:{DateTime.Now:MM/dd/yyyy} , Inbound Success:{IPSSuccess.Count} ,Inbound Fail:{IPSFail.Count} , Outbound File Success:{OFSSuccess.Count},Outbound File Fail:{OFSFail.Count}, Outbound Success:{OPSSuccess.Count}, Outbound Fail:{OPSFail.Count}";

                        //Set message field values                   
                        _message.BodyText = _sbBody.ToString();
                        _message.EmailType = "SummaryEmail";
                        //_message.EmailSubType = summaryType;
                        _message.CreatedBy = "Gateway Monitor";
                        //Save message
                        dbContext.SEEmailMessages.Add(_message);
                        dbContext.SaveChanges();
                        _message.To = string.Format("{0}", Globals.MailToInfo);

                        return true;
                    }
                }
            }
            catch (Exception ex)
            {
                Globals.DBLogger.Error(string.Format("DeleteProcessingSummaryMessage: Error while Sendmail {0}", ex.Message), ex);
                return false;
            }
        }
