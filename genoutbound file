using System;
using System.Collections.Generic;
using System.Linq;
using System.Configuration;
using System.Data.SqlClient;
using System.Data;
using System.IO;
using System.Reflection;
using DNAPGateway.EFLibrary;
using System.Text;
using System.Globalization;

namespace DNAPGateway.OutboundProcessing
{
    public class GenerateOutboundFile
    {
        DateTime _processStartTime, _lastExportTime, _currentExportTill;
        string _outboundFilename = string.Empty;
        int _rowsCount;
        string _preProcessingInvStatus = Globals.PreGenerateInvoiceStatus;
        string _postProcessingInvStatus = Globals.PostGenerateInvoiceStatus;
        string _outboundFilePath = string.Empty;
        string _fieldSep = "^";

        public GenerateOutboundFile()
        {
            _processStartTime = DateTime.Now;
            _lastExportTime = DateTime.MinValue;
            //Calculate time till previous minute for export
            _currentExportTill = DateTime.Now.AddMinutes(-1);
            _currentExportTill = new DateTime(_currentExportTill.Year, _currentExportTill.Month, _currentExportTill.Day,
                            _currentExportTill.Hour, _currentExportTill.Minute, 0);
        }

        public bool ExtractAndGenerateFile(OutboundEntity outEntity, out OutboundProcessingSummary outSummary)
        {
            int iRows = 0;
            List<string> registrationNumbers = new List<string>();
            SqlCommand sqlCommand = new SqlCommand();
            outSummary = null;

            try
            {
                ///Assign Failure and Success output folders
                Globals.VerifyLocalOutboundFolders(outEntity.EntityID);
                //Set variables
                _outboundFilename = $"{outEntity.EntityID}_{_currentExportTill.ToString("yyyyMMdd_HHmmss")}.csv";
                _outboundFilePath = Path.Combine(Globals.LocalOutboundRootFolder, outEntity.EntityID, _outboundFilename);
                _fieldSep = outEntity.CSVFieldSeparator;
                using (SqlConnection sqlConn = new SqlConnection(Globals.WNSTracDBConn))
                {
                    Globals.DBLogger.Info($"ExtractAndGenerateFile:Outbound Query -- {outEntity.DataExtractionScript}");
                    sqlCommand = new SqlCommand(outEntity.DataExtractionScript, sqlConn);
                    sqlCommand.CommandTimeout = Globals.SQLCommandTimeoutOutbound;
                    //if (outEntity.EntityID.Equals("APOSPost", StringComparison.OrdinalIgnoreCase))
                    //{
                    //    if (outEntity.DataExtractionScript.Contains("@preInvoiceProcessingStatus"))
                    //        sqlCommand.Parameters.AddWithValue("@preInvoiceProcessingStatus", _preProcessingInvStatus);
                    //}

                    #region Code using DataReader
                    Globals.DBLogger.Info("ExtractAndGenerateFile:Start of Code using DataReader");
                    sqlCommand.Connection = sqlConn;
                    if (sqlCommand.Connection.State != ConnectionState.Open)
                        sqlCommand.Connection.Open();
                    Globals.DBLogger.Info("ExtractAndGenerateFile:Creating outbound file...");
                    using (StreamWriter sw = new StreamWriter(_outboundFilePath, false, Encoding.UTF8))
                    using (SqlDataReader dr = sqlCommand.ExecuteReader(CommandBehavior.SingleResult))
                    {
                        int colCount = dr.FieldCount;
                        bool firstColumn = true;
                        //Output the header to CSV file
                        for (int i = 0; i < colCount; i++)
                        {
                            sw.Write((firstColumn ? "" : _fieldSep));
                            sw.Write(dr.GetName(i));
                            firstColumn = false;
                        }
                        //Get the data and dump it into CSV file
                        object[] objValues = new object[colCount];
                        while (dr.Read())
                        {
                            sw.WriteLine();
                            colCount = dr.GetValues(objValues);
                            firstColumn = true;
                            foreach (var val in objValues)
                            {
                                sw.Write((firstColumn ? "" : _fieldSep));
                                //string strVal = val.ToString();
                                //sw.Write(strVal.Trim(' ', '\t', '\n', '\v', '\f', '\r'));
                                sw.Write(Globals.CleanControlChars(val));
                                firstColumn = false;
                            }
                            iRows++;
                        }
                    }
                    Globals.DBLogger.Info("ExtractAndGenerateFile:End of Code using DataReader");
                    #endregion

                    if (iRows > 0)
                    {
                        sqlCommand.Parameters.Clear();
                        sqlCommand.CommandText = outEntity.PostProcessingScript;
                        sqlCommand.CommandTimeout = Globals.SQLCommandTimeoutOutbound;
                        //if (outEntity.EntityID.Equals("APOSPost", StringComparison.OrdinalIgnoreCase))
                        //{
                        //    if (outEntity.DataExtractionScript.Contains("@postInvoiceProcessingstStatus"))
                        //        sqlCommand.Parameters.AddWithValue("@postInvoiceProcessingstStatus", _postProcessingInvStatus);
                        //}
                        if (sqlCommand.Connection.State != ConnectionState.Open)
                            sqlCommand.Connection.Open();
                        sqlCommand.ExecuteNonQuery();
                    }
                    //end Update invoicdheadeprocessing status coloumn
                    _rowsCount = iRows;

                    // Maintain OutboundProcessingSummary for csv
                    using (GatewayDBContext dbContext = new GatewayDBContext())
                    {
                        outSummary = new OutboundProcessingSummary();
                        outSummary.EntityID = outEntity.EntityID;
                        outSummary.OutboundFileName = Globals.FileNameWOExt(_outboundFilename);
                        outSummary.LocalFilePath = _outboundFilePath;
                        outSummary.ExportedTillTime = _currentExportTill;
                        outSummary.TotalRows = _rowsCount;
                        outSummary.ProcessingStartedTime = _processStartTime;
                        outSummary.ProcessingCompletedTime = DateTime.Now;
                        outSummary.ProcessingWorkstation = Environment.MachineName;
                        dbContext.OutboundProcessingSummaries.Add(outSummary);
                        dbContext.SaveChanges();
                    }

                    //Generate email message for all processed files
                    EmailGenerator emailGen = new EmailGenerator();
                    emailGen.GenerateOutboundSummaryMessage(outEntity.EntityID, Globals.FileNameWOExt(_outboundFilename));
                    // summary end 
                    return true;
                }
            }
            catch (Exception ex)
            {
                Globals.DBLogger.Error($"Exception in ExtractAndGenerateFile : {ex.Message}", ex);
                //Generate email message for Exception
                EmailGenerator emailGen = new EmailGenerator();
                emailGen.GenerateExceptionMessage($"Exception in ExtractAndGenerateFile : {ex.Message}", ex);
                return false;
            }
            finally
            {
                if (sqlCommand.Connection != null)
                {
                    if (sqlCommand.Connection.State == ConnectionState.Open)
                        sqlCommand.Connection.Close();
                }
            }
        }
    }
}








