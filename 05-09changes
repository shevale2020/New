
 public class InboundPurgeData
    {
        FileInfo _fileInfo;
        public List<Dictionary<InboundProcessingSummary, List<string>>> PurgeInboundData(List<InboundProcessingSummary> infoListForIPS)
        {
            List<Dictionary<InboundProcessingSummary, List<string>>> successFailList = new List<Dictionary<InboundProcessingSummary, List<string>>>();
            try
            {
                Globals.DBLogger.Info("DeleteExecRecord : Cleaning InboundProcessingSummary Table...");
                using (GatewayDBContext dbContext = new GatewayDBContext())
                {
                    Dictionary<InboundProcessingSummary, List<string>> successListIPS = new Dictionary<InboundProcessingSummary, List<string>>();
                    Dictionary<InboundProcessingSummary, List<string>> failListIPS = new Dictionary<InboundProcessingSummary, List<string>>();
                    List<string> fileInfo = new List<string>();
                    var fileName = "";
                    var fileDirectory = "";
                    bool IsSFTPFileStatus;
                    string[] allExtnFiles;
                    SFTPHelper sftpHelper = new SFTPHelper();
                    if (infoListForIPS.Count != 0)
                    {
                        foreach (var infoIPS in infoListForIPS)
                        {
                            
                            try
                            {
                                if (string.IsNullOrWhiteSpace(infoIPS.LocalSourceFilePath))
                                {
                                    _fileInfo = new FileInfo(infoIPS.LocalSourceFilePath);
                                    fileName = Globals.FileNameWOExt(infoIPS.LocalSourceFilePath);
                                    fileDirectory = _fileInfo.DirectoryName;
                                    try
                                    {
                                        allExtnFiles = System.IO.Directory.GetFiles(fileName, $"{fileDirectory}.* ");
                                        foreach (string f in allExtnFiles)
                                        {
                                            System.IO.File.Delete(f);
                                            fileInfo.Add(f);
                                            successListIPS.Add(infoIPS, fileInfo);
                                        }
                                    }
                                    catch
                                    {
                                        failListIPS.Add(infoIPS, fileInfo);
                                    }
                                }
                                if (string.IsNullOrWhiteSpace(infoIPS.SFTPSourceFilePath))
                                {
                                    _fileInfo = new FileInfo(infoIPS.SFTPSourceFilePath);
                                    fileName = Globals.FileNameWOExt(infoIPS.SFTPSourceFilePath);
                                    fileDirectory = _fileInfo.DirectoryName;
                                    //delete that file on SFTP Directory
                                    allExtnFiles = System.IO.Directory.GetFiles(fileName, $"{fileDirectory}.* ");
                                    foreach (string f in allExtnFiles)
                                    {
                                        IsSFTPFileStatus = sftpHelper.DeleteSFTPFile(f, true);
                                        if (IsSFTPFileStatus == true)
                                        {
                                            fileInfo.Add(f);
                                            successListIPS.Add(infoIPS, fileInfo);
                                        }
                                        else
                                        {
                                            fileInfo.Add(f);
                                            failListIPS.Add(infoIPS, fileInfo);
                                        }
                                    }
                                }

                                if (string.IsNullOrWhiteSpace(infoIPS.LocalSuccessFilePath))
                                {
                                    _fileInfo = new FileInfo(infoIPS.LocalSuccessFilePath);
                                    fileName = Globals.FileNameWOExt(infoIPS.LocalSuccessFilePath);
                                    fileDirectory = _fileInfo.DirectoryName;
                                    try
                                    {
                                        allExtnFiles = System.IO.Directory.GetFiles(fileName, $"{fileDirectory}.* ");
                                        foreach (string f in allExtnFiles)
                                        {
                                            System.IO.File.Delete(f);
                                            fileInfo.Add(f);
                                            successListIPS.Add(infoIPS, fileInfo);
                                        }
                                    }
                                    catch
                                    {
                                        failListIPS.Add(infoIPS, fileInfo);
                                    }
                                }
                                if (string.IsNullOrWhiteSpace(infoIPS.SFTPSuccessFilePath))
                                {
                                    _fileInfo = new FileInfo(infoIPS.SFTPSuccessFilePath);
                                    fileName = Globals.FileNameWOExt(infoIPS.SFTPSuccessFilePath);
                                    fileDirectory = _fileInfo.DirectoryName;
                                    //delete that file on SFTP Directory
                                    allExtnFiles = System.IO.Directory.GetFiles(fileName, $"{fileDirectory}.* ");
                                    foreach (string f in allExtnFiles)
                                    {
                                        IsSFTPFileStatus = sftpHelper.DeleteSFTPFile(f, true);
                                        if (IsSFTPFileStatus == true)
                                        {
                                            fileInfo.Add(f);
                                            successListIPS.Add(infoIPS, fileInfo);
                                        }
                                        else
                                        {
                                            fileInfo.Add(f);
                                            failListIPS.Add(infoIPS, fileInfo);
                                        }
                                    }
                                }
                                if (string.IsNullOrWhiteSpace(infoIPS.LocalFailedFilePath))
                                {
                                    _fileInfo = new FileInfo(infoIPS.LocalFailedFilePath);
                                    fileName = Globals.FileNameWOExt(infoIPS.LocalFailedFilePath);
                                    fileDirectory = _fileInfo.DirectoryName;
                                    try
                                    {
                                        allExtnFiles = System.IO.Directory.GetFiles(fileName, $"{fileDirectory}.* ");
                                        foreach (string f in allExtnFiles)
                                        {
                                            System.IO.File.Delete(f);
                                            fileInfo.Add(f);
                                            successListIPS.Add(infoIPS, fileInfo);
                                        }
                                    }
                                    catch
                                    {
                                        failListIPS.Add(infoIPS, fileInfo);
                                    }
                                }
                                if (string.IsNullOrWhiteSpace(infoIPS.SFTPFailedFilePath))
                                {
                                    _fileInfo = new FileInfo(infoIPS.SFTPFailedFilePath);
                                    fileName = Globals.FileNameWOExt(infoIPS.SFTPFailedFilePath);
                                    fileDirectory = _fileInfo.DirectoryName;
                                    //delete that file on SFTP Directory
                                    allExtnFiles = System.IO.Directory.GetFiles(fileName, $"{fileDirectory}.* ");
                                    foreach (string f in allExtnFiles)
                                    {
                                        IsSFTPFileStatus = sftpHelper.DeleteSFTPFile(f, true);
                                        if (IsSFTPFileStatus == true)
                                        {
                                            fileInfo.Add(f);
                                            successListIPS.Add(infoIPS, fileInfo);
                                        }
                                        else
                                        {
                                            fileInfo.Add(f);
                                            failListIPS.Add(infoIPS, fileInfo);
                                        }
                                    }
                                }
                                //delete recordData from database
                                dbContext.InboundProcessingSummaries.Remove(infoIPS);
                                dbContext.SaveChanges();
                            }
                            catch (Exception ex)
                            {
                                Globals.DBLogger.Error(String.Format("DeleteExecRecord: Error while executing : {0}", ex.Message), ex);

                            }
                        }
                    }
                    successFailList.Add(successListIPS);
                    successFailList.Add(failListIPS);
                    return successFailList;

                }
            }
            catch (Exception ex)
            {
                Globals.DBLogger.Error(String.Format("DeleteExecRecord: Error while executing : {0}", ex.Message), ex);
                return successFailList;
            }
            finally
            {
                Globals.FlushLogBuffers();
            }
        }

    }
    
    
 
    
     public class OutboundPurgeData
    {
        FileInfo _fileInfo;
        public List<Dictionary<OutboundProcessingSummary, List<string>>> PurgeOutboundData(List<OutboundProcessingSummary> infoListForOPS)
        {
            List<Dictionary<OutboundProcessingSummary, List<string>>> successFailList = new List<Dictionary<OutboundProcessingSummary, List<string>>>();
            try
            {
                Globals.DBLogger.Info("DeleteExecRecord : Cleaning OutboundProcessingSummary Table...");
                using (GatewayDBContext dbContext = new GatewayDBContext())
                {
                    Dictionary<OutboundProcessingSummary, List<string>> successListOPS = new Dictionary<OutboundProcessingSummary, List<string>>();
                    Dictionary<OutboundProcessingSummary, List<string>> failListOPS = new Dictionary<OutboundProcessingSummary, List<string>>();
                   
                    var fileName = "";
                    var fileDirectory = "";
                    bool IsSFTPFileStatus;
                    string[] allExtnFiles;
                    SFTPHelper sftpHelper = new SFTPHelper();
                    if (infoListForOPS.Count != 0)
                    {
                        foreach (var infoOPS in infoListForOPS)
                        {
                            List<string> fileSccessInfo = new List<string>();
                                     List<string> fileFailInfo = new List<string>();

                            try
                            {
                                if (string.IsNullOrWhiteSpace(infoOPS.LocalFilePath))
                                {
                                     
                                    _fileInfo = new FileInfo(infoOPS.LocalFilePath);
                                    fileName = Globals.FileNameWOExt(infoOPS.LocalFilePath);
                                    fileDirectory = _fileInfo.DirectoryName;
                                    try
                                    {
                                        allExtnFiles = System.IO.Directory.GetFiles(fileName, $"{fileDirectory}.* ");
                                        foreach (string f in allExtnFiles)
                                        {
                                            System.IO.File.Delete(f);
                                            fileSccessInfo.Add(f);
                                        }
                                    }
                                    catch
                                    {
                                        fileFailInfo.Add(f);
                                    }
                                }
                                if (string.IsNullOrWhiteSpace(infoOPS.SFTPFilePath))
                                {
                                    _fileInfo = new FileInfo(infoOPS.SFTPFilePath);
                                    fileName = Globals.FileNameWOExt(infoOPS.SFTPFilePath);
                                    fileDirectory = _fileInfo.DirectoryName;
                                    //delete that file on SFTP Directory
                                    allExtnFiles = System.IO.Directory.GetFiles(fileName, $"{fileDirectory}.* ");
                                    foreach (string f in allExtnFiles)
                                    {
                                        IsSFTPFileStatus = sftpHelper.DeleteSFTPFile(f, true);
                                        if (IsSFTPFileStatus == true)
                                        {
                                            fileSccessInfo.Add(f);
                                        }
                                        else
                                        {
                                              fileFailInfo.Add(f);
                                        }
                                    }
                                }

                                //delete recordData from database
                                dbContext.OutboundProcessingSummaries.Remove(infoOPS);
                                dbContext.SaveChanges();
                            }
                            catch (Exception ex)
                            {
                                Globals.DBLogger.Error(String.Format("DeleteExecRecord: Error while executing : {0}", ex.Message), ex);

                            }
                            if(fileSccessInfo.Count() >0)
                              successListOPS.Add(infoOPS,fileSccessInfo);
                              if(fileFailInfo.Count() >0)
                              failListOPS.Add(infoOPS,fileFailInfo);
                        }
                    }
                    successFailList.Add(successListOPS);
                    successFailList.Add(failListOPS);
                    return successFailList;

                }
            }
            catch (Exception ex)
            {
                Globals.DBLogger.Error(String.Format("DeleteExecRecord: Error while executing : {0}", ex.Message), ex);
                return successFailList;
            }
            finally
            {
                Globals.FlushLogBuffers();
            }
        }

        public List<Dictionary<OutboundFilesSummary, List<string>>> PurgeOutboundFileData(Dictionary<string,string> infoListForOFS)
        {
            List<Dictionary<OutboundFilesSummary, List<string>>> successFailList = new List<Dictionary<OutboundFilesSummary, List<string>>>();
            try
            {
                Globals.DBLogger.Info("DeleteExecRecord : Cleaning OutboundFilesSummary Table...");
                using (GatewayDBContext dbContext = new GatewayDBContext())
                {
                    Dictionary<OutboundFilesSummary, List<string>> successListOPS = new Dictionary<OutboundFilesSummary, List<string>>();
                    Dictionary<OutboundFilesSummary, List<string>> failListOPS = new Dictionary<OutboundFilesSummary, List<string>>();
                    List<string> fileInfo = new List<string>();
                    var fileName = "";
                    var fileDirectory = "";
                    bool IsSFTPFileStatus;
                    string[] allExtnFiles;
                    GatewayDBContext contextDB = new GatewayDBContext();
                    SFTPHelper sftpHelper = new SFTPHelper();
                    if (infoListForOFS.ToList().Count != 0)
                    {
                        foreach (var infoOFS in infoListForOFS)
                        {
                              List<string> fileSccessInfo = new List<string>();
                              List<string> fileFailInfo = new List<string>();
                            var listinfoOFS = contextDB.OutboundFilesSummaries.Where(x => x.LocalFilePath == infoOFS.LocalFilePath && x.SFTPFilePath == infoOFS.SFTPFilePath).FirstOrDefault();
                            try
                            {
                                if (string.IsNullOrWhiteSpace(infoOFS.Key))
                                {
                                    _fileInfo = new FileInfo(infoOFS.Key);
                                    fileName = Globals.FileNameWOExt(infoOFS.Key);
                                    fileDirectory = _fileInfo.DirectoryName;
                                    try
                                    {
                                        allExtnFiles = System.IO.Directory.GetFiles(fileName, $"{fileDirectory}.* ");
                                        foreach (string f in allExtnFiles)
                                        {
                                             System.IO.File.Delete(f);
                                            fileSccessInfo.Add(f);
                                        }
                                    }
                                    catch
                                    {
                                         fileFailInfo.Add(f);
                                    }
                                }
                                if (string.IsNullOrWhiteSpace(infoOFS.Value))
                                {
                                    _fileInfo = new FileInfo(infoOFS.Value);
                                    fileName = Globals.FileNameWOExt(infoOFS.Value);
                                    fileDirectory = _fileInfo.DirectoryName;
                                    //delete that file on SFTP Directory
                                    allExtnFiles = System.IO.Directory.GetFiles(fileName, $"{fileDirectory}.* ");
                                    foreach (string f in allExtnFiles)
                                    {
                                        IsSFTPFileStatus = sftpHelper.DeleteSFTPFile(f, true);
                                        if (IsSFTPFileStatus == true)
                                        {
                                           fileSccessInfo.Add(f);
                                        }
                                        else
                                        {
                                             fileFailInfo.Add(f);
                                        }
                                    }
                                }

                                //delete recordData from database
                                contextDB.OutboundFilesSummaries.Remove(listinfoOFS);
                                contextDB.SaveChanges();
                            }
                            catch (Exception ex)
                            {
                                Globals.DBLogger.Error(String.Format("DeleteExecRecord: Error while executing : {0}", ex.Message), ex);

                            }
                              if(fileSccessInfo.Count() >0)
                              successListOPS.Add(infoOPS,fileSccessInfo);
                              if(fileFailInfo.Count() >0)
                              failListOPS.Add(infoOPS,fileFailInfo);
                        }
                    }
                    successFailList.Add(successListOPS);
                    successFailList.Add(failListOPS);
                    return successFailList;

                }
            }
            catch (Exception ex)
            {
                Globals.DBLogger.Error(String.Format("DeleteExecRecord: Error while executing : {0}", ex.Message), ex);
                return successFailList;
            }
            finally
            {
                Globals.FlushLogBuffers();
            }
        }
    }
    
