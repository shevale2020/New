using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using DNAPGateway.EFLibrary;
using System.Data.SqlClient;
using System.Data;
using System.IO;
using System.Globalization;
using System.Configuration;

namespace DNAPGateway.InboundProcessing
{
    public class ProcessInboundFile
    {
        private InboundEntity _inEntity = null;
        private List<InboundEntityField> _inEntityFields = null;
        private InboundProcessingSummary _inProcessSummary = null;
        private List<InboundProcessingSummary> _summaryList = null;
        private EntityDBTable _entityDBTable = null;
        private string _entityFilePath = string.Empty;
        private string _fileName = string.Empty;
        private string _entitySuccessPath = string.Empty;
        private string _entityFailurePath = string.Empty;
        private string _csvHeader = string.Empty;
        private string _tableName = string.Empty;
        private char _fieldSep = '~';
        private DateTime? _ProcessStartTime;
        private DateTime? _ProcessEndTime;

        public ProcessInboundFile()
        {
            _inEntity = null;
            _inEntityFields = null;
            _entityDBTable = null;
        }

        private void ResetFileCounters()
        {
            _ProcessStartTime = null;
            _ProcessEndTime = null;
        }

        private void SetEntityAndFolderVars(string entityID)
        {
            try
            {
                Globals.DBLogger.InfoFormat("ProcessInboundFile.SetEntityAndFolderVars: Fetching Entity Data from SyncEnginDB for entityID {0}", entityID);
                using (GatewayDBContext dbContext = new GatewayDBContext())
                {
                    //Set variables
                    _inEntity = dbContext.InboundEntities.AsNoTracking().Where(x =>
                            x.EntityID.Equals(entityID, StringComparison.OrdinalIgnoreCase)).FirstOrDefault();
                    _inEntityFields = dbContext.InboundEntityFields.AsNoTracking().Where(x =>
                            x.EntityID.Equals(entityID, StringComparison.OrdinalIgnoreCase))
                                    .OrderBy(x => x.CSVColumnSequence).ToList();
                }
                ///Assign Failure and Success output folders
                Globals.VerifyLocalInboundFolders(_inEntity.EntityID);
                DirectoryInfo entityDir = new DirectoryInfo(Path.Combine(Globals.LocalInboundRootFolder, _inEntity.EntityID));
                //Assign directories
                _fieldSep = Convert.ToChar(string.IsNullOrWhiteSpace(_inEntity.CSVFieldSeparator) ? "|" : _inEntity.CSVFieldSeparator);
                _entityFilePath = entityDir.FullName;
                _entitySuccessPath = Path.Combine(entityDir.FullName, "Success");
                _entityFailurePath = Path.Combine(entityDir.FullName, "Failure");
            }
            catch (Exception ex)
            {
                Globals.DBLogger.Error(string.Format("ProcessInboundFile.SetEntityAndFolderVars: Exception in CreateSQLInsertCommand for entityID {0} with Error:{1}", entityID, ex.Message), ex);
                throw;
            }
        }

        public bool ProcessAllFiles()
        {
            try
            {
                bool bResult = false;
                List<InboundEntity> syncEntities;
                Globals.DBLogger.Info("ProcessInboundFile.ProcessAllFiles: Process All Files without EntityID.");
                using (GatewayDBContext dbContext = new GatewayDBContext())
                {
                    syncEntities = dbContext.InboundEntities.AsNoTracking()
                        .Where(x => x.IsEntitySyncEnabled == true)
                        .OrderBy(y => y.ProcessingPriority).ThenBy(z => z.EntityID).ToList();
                }

                foreach (InboundEntity entity in syncEntities)
                {
                    bResult = this.ProcessAllFiles(entity.EntityID);
                }
                return bResult;
            }
            catch (Exception ex)
            {
                Globals.DBLogger.Error(string.Format("ProcessInboundFile.ProcessAllFiles: Error while ProcessAllFiles without any Entity with Error: {0}", ex.Message), ex);
                return false;
            }
        }
        public bool ProcessAllFiles(string entityID)
        {
            try
            {
                bool bResult = false;
                //Set entity and folder variables
                this.SetEntityAndFolderVars(entityID);
                //Incorrect entity will lead to not setting entity
                if (_inEntity == null) return false;
                bResult = CheckNAddSummaryRowsForLocalFiles();
                //Find out unprocessed files
                List<InboundProcessingSummary> localSummaryList = null;
                using (GatewayDBContext dbContext = new GatewayDBContext())
                {
                    localSummaryList = dbContext.InboundProcessingSummaries.AsNoTracking()
                        .Where(s => (s.EntityID.Equals(entityID, StringComparison.OrdinalIgnoreCase))
                            && (!s.IsProcessed)
                            && s.ProcessingWorkstation == Environment.MachineName)
                        .OrderBy(o => o.FileGeneratedTime).ToList();
                }

                if (localSummaryList.Count == 0)
                {
                    Globals.DBLogger.InfoFormat("ProcessInboundFile.ProcessAllFiles: Entity: {0} No files to process...", entityID);
                    return true;
                }
                //Create commands ONLY IF any files are present 2018-01-04
                //Switch to new code for processing using Intermediate Tables 2018-03-30
                //_entityDBCommands = new EntityDBCommands(_syncEntity.EntityID);
                _entityDBTable = new EntityDBTable(_inEntity.EntityID);
                //Process all the files
                _summaryList = new List<InboundProcessingSummary>();
                foreach (InboundProcessingSummary inSummary in localSummaryList)
                {
                    _inProcessSummary = null;
                    _ProcessStartTime = DateTime.Now;
                    //Switch to new code for processing using Intermediate Tables 2018-03-30
                    //bResult = ProcessFileDBCommands(inSummary.EntityID, inSummary.LocalSourceFilePath);
                    bResult = ProcessFileDBTable(inSummary);
                    if (_inProcessSummary != null)
                        _summaryList.Add(_inProcessSummary);
                    //Reset class variables
                    this.ResetFileCounters();
                }
                //Send out consolidated email
                if (_summaryList.Count > 0)
                {
                    //Generate email message for all processed files
                    EmailGenerator emailGen = new EmailGenerator();
                    bResult = emailGen.GenerateInboundProcessingSummaryMessage(_summaryList);
                }
                return bResult;
            }
            catch (Exception ex)
            {
                Globals.DBLogger.Error(string.Format("ProcessInboundFile.ProcessAllFiles: Error while ProcessAllFiles with Entity: {0} with Error: {1}", entityID, ex.Message), ex);
                return false;
            }
            finally
            {
                _inEntity = null;
                _inEntityFields = null;
                _summaryList = null;
                //_entityDBCommands = null;
                _entityDBTable = null;
            }
        }

        private bool CheckNAddSummaryRowsForLocalFiles()
        {
            try
            {
                //Select all files for processing
                string[] files = Directory.GetFiles(_entityFilePath,
                    $"{_inEntity.EntityID}_*.{_inEntity.FileInputType}{(_inEntity.IsEncrypted ? Globals.CryptoFileExtension : string.Empty)}",
                    SearchOption.TopDirectoryOnly);
                if (files.Length > 0)
                {
                    FileInfo fi;
                    string fnWOExt;
                    InboundProcessingSummary inSummary;
                    foreach (string filePath in files)
                    {
                        //----------------------------------------
                        fi = new FileInfo(filePath);
                        fnWOExt = Globals.FileNameWOExt(fi);
                        using (GatewayDBContext dbContext = new GatewayDBContext())
                        {
                            //Search if file is already present
                            inSummary = dbContext.InboundProcessingSummaries
                                    .Where(s => (s.EntityID.Equals(_inEntity.EntityID, StringComparison.OrdinalIgnoreCase))
                                     && (s.InboundFileName.Equals(fnWOExt, StringComparison.OrdinalIgnoreCase)))
                                     .FirstOrDefault<InboundProcessingSummary>();

                            //Add record if one is not present
                            if (inSummary == null)
                            {
                                //Add record in summary 
                                inSummary = new InboundProcessingSummary();
                                inSummary.EntityID = _inEntity.EntityID;
                                inSummary.InboundFileName = fnWOExt;
                                //Set other attributes
                                inSummary.InboundFileSource = "LocalFolder";
                                inSummary.LocalSourceFilePath = fi.FullName;
                                inSummary.SFTPSourceFilePath = "";
                                inSummary.FileGeneratedTime = Globals.GetTimestampFromInboundFilename(fnWOExt, fi.LastWriteTime);
                                inSummary.SFTPDownloadTime = null;
                                inSummary.ProcessingWorkstation = Environment.MachineName;
                                inSummary.IsProcessed = false;
                                inSummary.IsResultUploadedToSFTP = false;
                                inSummary.IsReadyForArchival = false;
                                inSummary.IsArchived = false;
                                dbContext.InboundProcessingSummaries.Add(inSummary);
                                dbContext.SaveChanges();
                            }
                        }
                    }
                }
                return true;
            }
            catch (Exception)
            {
                //Ignore errors and this is fallback mechanism
                return false;
            }
        }

        private bool ProcessFileDBTable(InboundProcessingSummary summary)
        {
            try
            {
                bool bResult = true;
                _ProcessStartTime = DateTime.Now;
                StringBuilder sbErrorLine = new StringBuilder(100);
                SortedList<string, int> errorList = new SortedList<string, int>();
                SortedList<string, int> alertList = new SortedList<string, int>();
                Globals.DBLogger.InfoFormat("ProcessInboundFile.ProcessFileDBTable: CSV File Path {0}", summary.LocalSourceFilePath);
                try
                {
                    //Adding filename to Update/Create User 2018-01-05
                    _entityDBTable.InboundFileName = summary.InboundFileName;
                    //Process the file
                    if (_entityDBTable.FileInputType.Equals("CSV", StringComparison.OrdinalIgnoreCase))
                    {
                        bResult = _entityDBTable.ParseCSVDataFile(summary.LocalSourceFilePath);
                    }
                    else if (_entityDBTable.FileInputType.StartsWith("XLS", StringComparison.OrdinalIgnoreCase))
                    {
                        bResult = _entityDBTable.ParseXLSDataFile(summary.LocalSourceFilePath);
                    }
                    else
                    {
                        throw new Exception("Incorrect File Input Type...");
                    }
                    if (!bResult)
                        throw new Exception("Parsing of Data failed...");
                    bResult = _entityDBTable.ValidateData();
                    if (!bResult)
                        throw new Exception("Inbound file failed in Validation of Data...");
                    bResult = _entityDBTable.TransferDataToDB();
                    if (!bResult)
                        throw new Exception("Inbound file failed in Transfer of Data to Database...");
                    bResult = _entityDBTable.SaveProcessingResults(ref errorList, ref alertList);
                    if (!bResult)
                        throw new Exception("Inbound file failed while saving processing results...");
                }
                catch (Exception ex)
                {
                    Globals.DBLogger.Error($"ProcessInboundFile.ProcessFileDBTable: Error with Entity:[{_inEntity.EntityID}] and Error :{ex.Message}.", ex);
                    sbErrorLine.Append($"File Processing Failed with Error:{ex.Message}...File:[{summary.InboundFileName}]<br>");
                    sbErrorLine.Append(@":''-(<br>");
                    bResult = false;
                }
                finally
                {
                    //Update processing record
                    using (GatewayDBContext dbContext = new GatewayDBContext())
                    {
                        //Add summary record
                        _ProcessEndTime = DateTime.Now;
                        dbContext.Entry(summary).State = System.Data.Entity.EntityState.Modified;
                        //Set the data
                        summary.RowsTotal = _entityDBTable.RowsTotal;
                        summary.RowsInserted = _entityDBTable.RowsInserted;
                        summary.RowsUpdated = _entityDBTable.RowsUpdated;
                        summary.RowsCopiedToHistory = _entityDBTable.RowsHistory;
                        summary.RowsSuccessful = _entityDBTable.RowsSuccessful;
                        summary.RowsFailed = _entityDBTable.RowsFailed;
                        summary.LocalFailedFilePath = ((_entityDBTable.RowsFailed > 0) ? _entityDBTable.FailureFilePath : "");
                        summary.LocalSuccessFilePath = ((_entityDBTable.RowsSuccessful > 0) ? _entityDBTable.SuccessFilePath : "");
                        summary.ProcessingStartedTime = _ProcessStartTime;
                        summary.ProcessingCompletedTime = _ProcessEndTime;
                        summary.IsProcessed = true;
                        summary.IsResultUploadedToSFTP = false;
                        summary.IsReadyForArchival = false;
                        summary.IsArchived = false;
                        //prepare summary
                        if (bResult)
                            sbErrorLine.Clear();
                        if (_entityDBTable.RowsFailed == 0 && bResult)
                        {
                            sbErrorLine.AppendFormat("File Processing Successful...");
                            sbErrorLine.Append((summary.RowsSuccessful > 0) ? ":-))<br>" : ":-)<br>");
                        }
                        if (errorList.Count > 0)
                        {
                            sbErrorLine.Append("File Processing Error Summary ...<br>");
                            foreach (var err in errorList.OrderByDescending(x => x.Value))
                            {
                                if (sbErrorLine.Length < 4800)
                                {
                                    sbErrorLine.AppendFormat("{0}:{1}<br>", err.Value, err.Key);
                                }
                                else
                                {
                                    //Magic number as field size is 5000 hence message needs to be truncated
                                    sbErrorLine.Remove(4800, (sbErrorLine.Length - 4800));
                                    sbErrorLine.Append("<br><br>TOO MANY ERRORS...LIMITING SUMMARY...");
                                    break;
                                }
                            }
                            sbErrorLine.Append(@":'-(<br>");
                        }
                        if (alertList.Count > 0)
                        {
                            sbErrorLine.Append("File Processing Alert Summary ...<br>");
                            foreach (var alert in alertList.OrderByDescending(x => x.Value))
                            {
                                if (sbErrorLine.Length < 4800)
                                {
                                    sbErrorLine.AppendFormat("{0}:{1}<br>", alert.Value, alert.Key);
                                }
                                else
                                {
                                    //Magic number as field size is 5000 hence message needs to be truncated
                                    sbErrorLine.Remove(4800, (sbErrorLine.Length - 4800));
                                    sbErrorLine.Append("<br><br>TOO MANY ALERTS...LIMITING SUMMARY...");
                                    break;
                                }
                            }
                            sbErrorLine.Append(@":-(<br>");
                        }
                        summary.ProcessingSummary = sbErrorLine.ToString();
                        dbContext.SaveChanges();
                    }
                    _inProcessSummary = summary;
                }
                return bResult;
            }
            catch (Exception ex)
            {
                Globals.DBLogger.Error($"ProcessInboundFile.ProcessFileDBTable: Error for Entity: {_inEntity.EntityID} with Error : {ex.Message}", ex);
                return false;
            }
            finally
            {
                //Reset class variables
                this.ResetFileCounters();
                Globals.FlushLogBuffers();
            }
        }

    }
}
