  private bool DownloadPOBoxInvoices(POBoxControlFileSummary controlFile, ScannedPOBoxBatch batch)
        {
            try
            {
                bool bResult = false;
                bool IsResult = false;
                Globals.DBLogger.InfoFormat("DownloadPOBoxInvoices: Downloading Invoice Files for {0}...", controlFile.POBoxName);
                //Create Invoice Local folders if not exist
                DirectoryInfo diInvoiceRoot = new DirectoryInfo(Path.Combine(Globals.LocalPOBoxRootFolder, controlFile.POBoxName));
                if (!diInvoiceRoot.Exists) diInvoiceRoot.Create();
                try {

                    using (GatewayDBContext dbContext = new EFLibrary.GatewayDBContext())
                    {
                        using (SFTPHelper sftpHelper = new SFTPHelper())
                        {
                            //Define and initialize variables
                            FileInfo fiLocalInvoice;
                            string fileNameWOExt, invoiceKey;
                            TransferOperationResult transferResult = null;
                            IEnumerable<RemoteFileInfo> sftpInvoiceFiles = null;
                            POBoxInvoiceFileSummary invoiceSummary;

                            //Iterate through invoice info and download all the invoices
                            foreach (InvoiceControlInfo invInfo in batch.InvoiceList)
                            {


                                //Add invoice file record so that failures/ missing invoices can be tracked
                                // this may happen when control file mentions invoice but physical invoice is not present
                                fileNameWOExt = Globals.FileNameWOExt(invInfo.DocumentIdentifier);
                                // Perform data access using the context 
                                invoiceSummary = dbContext.POBoxInvoiceFileSummaries.Where(x => (x.POBoxName == controlFile.POBoxName)
                                        && (x.ControlFileName.Equals(controlFile.ControlFileName, StringComparison.OrdinalIgnoreCase))
                                        && (x.InvoiceFileName.Equals(fileNameWOExt, StringComparison.OrdinalIgnoreCase))).FirstOrDefault();
                                //Add or Update Summary record
                                if (invoiceSummary == null)
                                {
                                    invoiceSummary = new POBoxInvoiceFileSummary();
                                    dbContext.POBoxInvoiceFileSummaries.Add(invoiceSummary);
                                }
                                //Update the data
                                invoiceSummary.POBoxName = controlFile.POBoxName;
                                invoiceSummary.ControlFileName = controlFile.ControlFileName;
                                invoiceSummary.InvoiceFileName = fileNameWOExt;
                                invoiceSummary.SFTPInvoiceFileFullName = string.Empty;
                                invoiceSummary.LocalInvoiceFileFullName = string.Empty;
                                invoiceSummary.LocalMetaFileFullName = string.Empty;
                                //Save to database
                                dbContext.SaveChanges();
                                //Add to dictionary
                                invoiceKey = string.Format("{0}:{1}:{2}", invoiceSummary.POBoxName, invoiceSummary.ControlFileName, invoiceSummary.InvoiceFileName);
                                if (_invoiceFilesList.ContainsKey(invoiceKey))
                                    _invoiceFilesList[invoiceKey] = invoiceSummary;
                                else
                                    _invoiceFilesList.Add(invoiceKey, invoiceSummary);
                                // List invoice and metadata remote files
                                bResult = sftpHelper.EnumerateSFTPFiles(string.Format("{0}{1}/", Globals.SFTPPOBoxRootFolder, controlFile.POBoxName),
                                        invInfo.DocumentIdentifier, ref sftpInvoiceFiles);
                                // Move to next record in case of failure
                                if (!bResult)
                                    continue;

                                foreach (RemoteFileInfo sftpFI in sftpInvoiceFiles)
                                {

                                    // Download individual invoice file
                                    bResult = sftpHelper.DownloadSFTPFiles(sftpFI.FullName, Path.Combine(diInvoiceRoot.FullName, sftpFI.Name), ref transferResult);
                                    // Move to next record in case of failure
                                    if (!bResult)
                                        continue;
                                    foreach (TransferEventArgs transfer in transferResult.Transfers)
                                    {
                                        Globals.DBLogger.InfoFormat("DownloadPOBoxInvoices: Transferred: {0} to {1}", transfer.FileName, transfer.Destination);

                                        fiLocalInvoice = new FileInfo(transfer.Destination);
                                        fileNameWOExt = Globals.FileNameWOExt(fiLocalInvoice);
                                        // Perform data access using the context 
                                        invoiceSummary = dbContext.POBoxInvoiceFileSummaries.Where(x => (x.POBoxName == controlFile.POBoxName)
                                            && (x.ControlFileName.Equals(controlFile.ControlFileName, StringComparison.OrdinalIgnoreCase))
                                            && (x.InvoiceFileName.Equals(fileNameWOExt, StringComparison.OrdinalIgnoreCase))).FirstOrDefault();
                                        //Add or Update Summary record
                                        if (invoiceSummary == null)
                                        {
                                            invoiceSummary = new POBoxInvoiceFileSummary();
                                            dbContext.POBoxInvoiceFileSummaries.Add(invoiceSummary);
                                        }
                                        //Update the data
                                        invoiceSummary.POBoxName = controlFile.POBoxName;
                                        invoiceSummary.ControlFileName = controlFile.ControlFileName;
                                        invoiceSummary.InvoiceFileName = fileNameWOExt;
                                        invoiceSummary.SFTPInvoiceFileFullName = transfer.FileName;
                                        invoiceSummary.LocalInvoiceFileFullName = transfer.Destination;
                                        invoiceSummary.LocalMetaFileFullName =
                                            batch.CreateInvoiceMetaFile(new FileInfo(transfer.Destination), invInfo);
                                        //Copy files to KOFAX folders
                                        this.TransferToKofaxFolder(controlFile.POBoxName, ref invoiceSummary);
                                        //Save to database
                                        dbContext.SaveChanges();
                                        //Add to dictionary
                                        invoiceKey = string.Format("{0}:{1}:{2}", invoiceSummary.POBoxName, invoiceSummary.ControlFileName, invoiceSummary.InvoiceFileName);
                                        if (_invoiceFilesList.ContainsKey(invoiceKey))
                                            _invoiceFilesList[invoiceKey] = invoiceSummary;
                                        else
                                            _invoiceFilesList.Add(invoiceKey, invoiceSummary);
                                        bResult = true;
                                    }
                                }


                            }

                        }
                        //Update ControlFile record to IsProcessed
                        if (!string.IsNullOrWhiteSpace(controlFile.ControlFileName)
                            && !string.IsNullOrWhiteSpace(controlFile.POBoxName))
                        {
                            //Search for control file record and update the flag
                            POBoxControlFileSummary ctrlFile = dbContext.POBoxControlFileSummaries
                                .Where(x => x.ControlFileName == controlFile.ControlFileName
                                && x.POBoxName == controlFile.POBoxName).FirstOrDefault();
                            if (ctrlFile != null)
                            {
                                //update control file flags
                                ctrlFile.IsProcessed = true;
                                ctrlFile.IsArchived = false;
                                //Save to database
                                dbContext.SaveChanges();
                            }
                        }
                    }
                    IsResult = true;
                }
                catch
                {

                }

                bResult= LoadingBatchData(controlFile,batch);

                return bResult;
            }
            catch (Exception ex)
            {
                Globals.DBLogger.Error(string.Format("DownloadPOBoxInvoices: Error: {0}", ex.Message), ex);
                return false;
            }
        }

        private bool LoadingBatchData(POBoxControlFileSummary controlFile,ScannedPOBoxBatch batch)
        {
            try
            {
                using (SqlConnection sqlConn = new SqlConnection(Globals.WNSTracDBConn))
                {
                    sqlConn.Open();
                    foreach (InvoiceControlInfo invList in batch.InvoiceList)
                    {

                        SqlCommand sqlCmd = new SqlCommand(@"INSERT INTO Ins_Ricoh_Metadata ([BatchNumber],[DocumentIdentifier],[CollectionDate],[ImageScanDate],[ScanOperatorID],[SourcePOBox],[InvoiceHeaderID],[Created_Date],[Created_By],[Updated_Date],[Updated_By]) VALUES (@P1,@P2,@P3,@P4,@P5,@P6,@P7,@P8,@P9,@P10,@P11);", sqlConn);
                        sqlCmd.Parameters.AddWithValue("@P1", invList.BatchNumber);
                        sqlCmd.Parameters.AddWithValue("@P2", invList.DocumentIdentifier);
                        sqlCmd.Parameters.AddWithValue("@P3", invList.CollectionDate);
                        sqlCmd.Parameters.AddWithValue("@P4", invList.ImageScanDate);
                        sqlCmd.Parameters.AddWithValue("@P5", invList.ScanOperatorID);
                        sqlCmd.Parameters.AddWithValue("@P6", invList.SourcePOBox);
                        sqlCmd.Parameters.AddWithValue("@p7", invList.InvoiceHeaderID ?? Convert.DBNull);
                        sqlCmd.Parameters.AddWithValue("@P8", DateTime.Now);
                        sqlCmd.Parameters.AddWithValue("@P9", string.Format("Gateway:{0}", controlFile.ControlFileName));
                        sqlCmd.Parameters.AddWithValue("@P10", DateTime.Now);
                        sqlCmd.Parameters.AddWithValue("@P11", string.Format("Gateway:{0}", controlFile.ControlFileName));
                        if (sqlCmd.Connection.State != ConnectionState.Open)
                            sqlCmd.Connection.Open();
                        sqlCmd.ExecuteNonQuery();
                        sqlCmd.Connection.Close();
                    }
                    sqlConn.Close();
                    return true;
                }
            }
            catch (Exception ex)
            {
                Globals.DBLogger.Error(string.Format("LoadingBatchData: Error: {0}", ex.Message), ex);
                return false;
            }
           
        }
